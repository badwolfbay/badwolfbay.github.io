<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>BADWOLFBAY</title>
  
  <subtitle>Run,You Clever Boy!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.badwolfbay.cn/"/>
  <updated>2020-03-13T15:23:02.576Z</updated>
  <id>http://www.badwolfbay.cn/</id>
  
  <author>
    <name>badwolf</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>manjaro-desktop</title>
    <link href="http://www.badwolfbay.cn/2020/03/13/manjaro-desktop/"/>
    <id>http://www.badwolfbay.cn/2020/03/13/manjaro-desktop/</id>
    <published>2020-03-13T15:00:49.000Z</published>
    <updated>2020-03-13T15:23:02.576Z</updated>
    
    <content type="html"><![CDATA[<p>先晒一下<code>manjaro</code>截图</p><p><img src="(/images/Screenshot_20200313_225231.png" alt="desktop">)</p><p>因为经常使用python,在<code>win</code>下开发很难受,所以将笔记本系统换成了<code>manjaro</code>,在执行镜像,安装系统,安装软件,美化和字体渲染方面也遇到了很多问题.晒一下截图.并记录一下遇到的大的问题,等有时间统一整理记录.</p><ul><li><code>openvpn</code>配置文件是openssl1.0版本编译,并修改<code>qopenvpn</code>图形界面</li><li><code>Electron</code>版本的<code>docker</code>客户端图形工具开发</li><li>字体渲染,在设置中设置字体后软件字体不生效问题</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;先晒一下&lt;code&gt;manjaro&lt;/code&gt;截图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;(/images/Screenshot_20200313_225231.png&quot; alt=&quot;desktop&quot;&gt;)&lt;/p&gt;
&lt;p&gt;因为经常使用python,在&lt;code&gt;win&lt;/code
      
    
    </summary>
    
      <category term="manjaro" scheme="http://www.badwolfbay.cn/categories/manjaro/"/>
    
    
      <category term="manjaro" scheme="http://www.badwolfbay.cn/tags/manjaro/"/>
    
  </entry>
  
  <entry>
    <title>Java String详解</title>
    <link href="http://www.badwolfbay.cn/2018/05/09/java-string/"/>
    <id>http://www.badwolfbay.cn/2018/05/09/java-string/</id>
    <published>2018-05-09T03:12:53.000Z</published>
    <updated>2018-05-09T03:14:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>Java中的String是经常使用的类，但是String中有很多需要学习的东西</p><p>1.不可变性</p><p>从最开始学习String时，就一直说String的类型是不可变的，但是从来没有深究。<br>如果看String源码会发现</p><ul><li>String类是final修饰的，使用者并不能通过继承来修改String类中的内容</li><li>String内部维护了一个final修饰的char类型的数组</li><li>char类型的数组虽然是引用类型，但是new String时使用<code>Arrays.copyOf</code>来避免使用者通过修改数组内容来修改String</li><li>使用<code>replace</code>,<code>substring</code>是，都是重新new String</li></ul><p>2.equals</p><p>在Java中使用<code>equals</code>来比较两个对象是否相等</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public boolean equals(Object obj) &#123;</div><div class="line">return (this == obj);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Object中的源码中显示如果没有重写<code>equals</code>，比较的就是两个对象的内存地址是否相等。String重写了<code>equals</code>方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public boolean equals(Object anObject) &#123;</div><div class="line">    if (this == anObject) &#123;</div><div class="line">        return true;</div><div class="line">    &#125;</div><div class="line">    if (anObject instanceof String) &#123;</div><div class="line">    String anotherString = (String)anObject;</div><div class="line">    int n = value.length;</div><div class="line">    if (n == anotherString.value.length) &#123;</div><div class="line">    char v1[] = value;</div><div class="line">        char v2[] = anotherString.value;</div><div class="line">        int i = 0;</div><div class="line">        while (n-- != 0) &#123;</div><div class="line">             if (v1[i] != v2[i])</div><div class="line">                return false;</div><div class="line">                i++;</div><div class="line">             &#125;</div><div class="line">             return true;</div><div class="line">         &#125;</div><div class="line">     &#125;</div><div class="line">     return false;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>从源码中可以发现</p><ul><li>如果两个String对象地址相同，则肯定相等。</li><li>两个对象地址不同，如果数组的长度相等，并且数组中每个值都相等，则两个字符串相等。</li></ul><a id="more"></a><p>3.StringBuilder</p><p><code>+</code>在做变量拼接时其实是用的StringBuilder.append()方法，所以当使用<code>+</code>和<code>StringBuilder.append()</code>时，其实效率没有太大的差别，但是如果把<code>+</code>放在循环中时做字符串循环拼接时,<code>+</code>的效率就会低很多，如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">String result = &quot;&quot;;</div><div class="line">for (int i = 0; i&lt;1000 ; i++)&#123;</div><div class="line">    result += i;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>因为每次循环都会产生一个StringBuilder对象,通过StringBuilder的append方法完成字符串<code>+</code>的操作，在循环过程中，<br>result的长度越来越长，占用的空间越来越大，就比较容易出现OOM。</p><p>4.字符串常量池</p><p>JVM为了提高性能和减少内存开销，在实例化字符串常量的时候进行了一些优化</p><ul><li>通过字面量声明的字符串直接保存到常量池中，如String s = “test”;</li><li>当创建字符串时，首先检查字符串常量池中是否存在该字符串</li></ul><p>Q1: 下面分别创建了几个对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">String s1 = <span class="string">"test1"</span>;</div><div class="line">String s2 = <span class="keyword">new</span> String(<span class="string">"test2"</span>);</div></pre></td></tr></table></figure><p>A： s1创建了一个字符串对象；s2可能创建一个对象，也可能创建两个对象，当字符串常量池中不存在”test2”时，在字符串常量池中创建，同时在堆中创建对象,对象指向字符串常量池的”test2”。</p><p>可以用<code>String.intern()</code>方法将字符串保存到常量池中，常量池底层使用<code>StringTable</code>保存字符串的引用<br>在使用<code>intern</code>方法时：</p><ul><li>如果常量池中已经存在当前字符串，将直接返回当前字符串</li><li>如果常量池中不存在当前字符串，将该字符串添加到字符串常量池中，然后返回该字符串的引用</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">String a = new StringBuilder(&quot;test&quot;).append(&quot;string&quot;).toString();</div><div class="line">System.out.println(a.intern() == a);</div><div class="line"></div><div class="line">String b = new StringBuilder(&quot;ja&quot;).append(&quot;va&quot;).toString();</div><div class="line">System.out.println(b.intern() == b);</div></pre></td></tr></table></figure><p>上面代码在JDK1.6和JDK1.7上运行会分别得到不同的结果<br>JDK1.6下：false, false<br>JDK1.7下：true, false</p><p>是由于JDK1.6中字符串常量池在永久代中，从JDK1.7开始字符串常量池移到了堆中。</p><p><strong>JDK1.6中的intern</strong><br>1.变量<code>a</code>分配在heap上，<code>a.intern()</code>指向的是永久代中的引用，和<code>a</code>指向的不是同一个引用，所以返回<code>false</code><br>2.对于<code>b</code>同理，指向的并不是同一个引用</p><p><strong>JDK1.7以后的intern</strong><br>1.在做<code>intern</code>操作时，如果<code>StringTable</code>已经存在相等的字符串，返回<code>StringTable</code>中的字符串引用，如果不存在，复制字符串的引用到常量池中，然后返回。所以对于变量<code>a</code>，一开始<code>StringTable</code>中不存在<code>teststring</code>的引用，所以JVM会复制变量<code>a</code>的引用到<code>StringTable</code>中，所以<code>a.intern()</code>和<code>a</code>其实是同一个字符串的引用，返回<code>true</code>。<br>2.对于变量<code>b</code>,一开始就存在<code>java</code>字符串，<code>b.intern()</code>返回的是<code>StringTable</code>中的引用，和<code>b</code>指向的并不是同一个，所以返回<code>false</code>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java中的String是经常使用的类，但是String中有很多需要学习的东西&lt;/p&gt;
&lt;p&gt;1.不可变性&lt;/p&gt;
&lt;p&gt;从最开始学习String时，就一直说String的类型是不可变的，但是从来没有深究。&lt;br&gt;如果看String源码会发现&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;String类是final修饰的，使用者并不能通过继承来修改String类中的内容&lt;/li&gt;
&lt;li&gt;String内部维护了一个final修饰的char类型的数组&lt;/li&gt;
&lt;li&gt;char类型的数组虽然是引用类型，但是new String时使用&lt;code&gt;Arrays.copyOf&lt;/code&gt;来避免使用者通过修改数组内容来修改String&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;replace&lt;/code&gt;,&lt;code&gt;substring&lt;/code&gt;是，都是重新new String&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2.equals&lt;/p&gt;
&lt;p&gt;在Java中使用&lt;code&gt;equals&lt;/code&gt;来比较两个对象是否相等&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;public boolean equals(Object obj) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	return (this == obj);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Object中的源码中显示如果没有重写&lt;code&gt;equals&lt;/code&gt;，比较的就是两个对象的内存地址是否相等。String重写了&lt;code&gt;equals&lt;/code&gt;方法&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;public boolean equals(Object anObject) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    if (this == anObject) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        return true;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    if (anObject instanceof String) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    String anotherString = (String)anObject;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    int n = value.length;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    if (n == anotherString.value.length) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    	char v1[] = value;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        char v2[] = anotherString.value;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        int i = 0;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        while (n-- != 0) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;             if (v1[i] != v2[i])&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                return false;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                i++;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;             &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;             return true;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;         &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     return false;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;从源码中可以发现&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果两个String对象地址相同，则肯定相等。&lt;/li&gt;
&lt;li&gt;两个对象地址不同，如果数组的长度相等，并且数组中每个值都相等，则两个字符串相等。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Java" scheme="http://www.badwolfbay.cn/categories/Java/"/>
    
    
      <category term="Java" scheme="http://www.badwolfbay.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>记一次Dubbo调用失败的错误</title>
    <link href="http://www.badwolfbay.cn/2018/01/30/window-tomcat-start/"/>
    <id>http://www.badwolfbay.cn/2018/01/30/window-tomcat-start/</id>
    <published>2018-01-30T01:12:00.000Z</published>
    <updated>2018-01-30T01:34:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>应用程序作为<code>provider</code>注册到<code>Dubbo</code>的注册中心后，作为提供者一直被消费者访问不到，报出一个超时链接的错误。<br>    &ensp;&ensp;一开始怀疑是网络问题(提供者将自身的服务注册到注册中心后，消费者会从注册中心获取提供者的真实地址和端口，从而通过<code>RPC</code>进行远程调用，所以提供者的地址信息会在消费者的客户端缓存一份)，可是从消费者到注册者的网络环境能<code>ping</code>通，<code>telnet</code>其提供者的端口也是通的。<br>    &ensp;&ensp;从浏览器中通过<code>Http</code>的方式访问提供者的接口，浏览器就一直处于访问的挂起状态，得不到返回信息。同样后台也看不到任何报错信息，怀疑是不是<code>Dubbo</code>的问题，可是检查注册中心后发现一切正常，其他服务都能够正常访问。<br>    &ensp;&ensp;最后在部署程序时发现<code>Tomcat</code>的控制台日志一直卡住。悲催的因为程序只能部署在<code>Windows</code>上，之前一直在<code>Linux</code>下部署,只有开发在<code>Windows</code>下开发，可是从来没有遇到这种问题。<code>Tomcat</code>是通过双击<code>startup.bat</code>启动的，后来决定从<code>cmd</code>中启动试一下，程序居然可以访问了!!!<br>    &ensp;&ensp;百度后发现原来是<code>Windows</code>下<code>Console</code>设置的问题。在<code>Console</code>中右键，选择<code>属性</code>，然后再<code>选项</code>中勾掉<code>编辑选项</code>的<code>快速编辑模式</code>，默认是打勾的，去掉那个勾勾，然后再<code>确认</code>就可以了。<code>Windows</code>下的大坑啊。。。折腾了一下午！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;应用程序作为&lt;code&gt;provider&lt;/code&gt;注册到&lt;code&gt;Dubbo&lt;/code&gt;的注册中心后，作为提供者一直被消费者访问不到，报出一个超时链接的错误。&lt;br&gt;    &amp;ensp;&amp;ensp;一开始怀疑是网络问题(提供者将自身的服务注册到注册中心后，消费者会从
      
    
    </summary>
    
      <category term="Java" scheme="http://www.badwolfbay.cn/categories/Java/"/>
    
    
      <category term="Java" scheme="http://www.badwolfbay.cn/tags/Java/"/>
    
      <category term="Dubbo" scheme="http://www.badwolfbay.cn/tags/Dubbo/"/>
    
      <category term="Windows" scheme="http://www.badwolfbay.cn/tags/Windows/"/>
    
      <category term="Tomcat" scheme="http://www.badwolfbay.cn/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>Spring+Mybatis分库分表总结</title>
    <link href="http://www.badwolfbay.cn/2018/01/18/multiresouce-sharding/"/>
    <id>http://www.badwolfbay.cn/2018/01/18/multiresouce-sharding/</id>
    <published>2018-01-18T03:38:01.000Z</published>
    <updated>2018-01-18T08:21:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>收到一个用户需求要求时时展现填报信息，之前项目使用的数据库是<code>MySQL</code>，但是由于数据量较大而且计算过程复杂，所以决定将数据放到<code>Oracle</code>中利用存储过程计算，这样就需要项目同时连接<code>Oracle</code>和<code>MySQL</code>数据库。下边简单总结下分库分表</p><h1 id="分表"><a href="#分表" class="headerlink" title="分表"></a>分表</h1><p>当一个表的数据量很大以后，业务上就需要根据规则对数据库进行水平切分，如注册用户表<code>user_01</code>,<code>user_02</code>等，但是当数据库表进行切分以后，程序就需要根据规格进行相应的处理。利用<code>Mybatis</code>的<code>interceptor</code>可以实现根据路由规则去操作相应的数据库，开源的有<code>Shardbatis</code>实现。但是<code>sharding</code>只能区分一个数据源中的不同表，并不能根据规则切换数据源。</p><h1 id="分库"><a href="#分库" class="headerlink" title="分库"></a>分库</h1><p>如果想连接多个数据库，需要配置两个数据源，如</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"oracleDataSource"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"oracle.jdbc.driver.OracleDriver"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;oracle.db.url&#125;"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;oracle.db.username&#125;"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;oracle.db.password&#125;"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure><ol><li>利用<code>AbstractRoutingDataSource</code>.</li></ol><p>在配置文件中加入<code>DynamicDataSource</code>配置，其中可以配置多个数据源链接和默认的链接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;bean id=&quot;dataSource&quot; class=&quot;com.xxx.core.dataSource.DynamicDataSource&quot; &gt;  </div><div class="line">    &lt;property name=&quot;targetDataSources&quot;&gt;  </div><div class="line">        &lt;map key-type=&quot;java.lang.String&quot;&gt;  </div><div class="line">            &lt;entry value-ref=&quot;dataSource1&quot; key=&quot;dataSource1&quot;&gt;&lt;/entry&gt;</div><div class="line">            &lt;entry value-ref=&quot;dataSource2&quot; key=&quot;dataSource2&quot;&gt;&lt;/entry&gt;  </div><div class="line">        &lt;/map&gt;  </div><div class="line">    &lt;/property&gt;  </div><div class="line">    &lt;property name=&quot;defaultTargetDataSource&quot; ref=&quot;dataSource1&quot;&gt;  </div><div class="line">    &lt;/property&gt;  </div><div class="line">&lt;/bean&gt;</div></pre></td></tr></table></figure><p>然后继承<code>AbstractRoutingDataSource</code>,该方法中实现数据库的动态切换。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public class DynamicDataSource extends AbstractRoutingDataSource&#123;</div><div class="line">    @Override</div><div class="line">    protected Object determineCurrentLookupKey() &#123;</div><div class="line">        return DataSourceContextHolder.getDataSourceType();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>定义一个可以设置当前线程的变量的工具类，用于设置对应的数据源名称。由于Spring的Bean是单例的，需要将数据源放入<code>ThreadLocal</code>中来避免线程安全的问题。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class DataSourceContextHolder &#123;  </div><div class="line">    private static final ThreadLocal&lt;String&gt; contextHolder = new ThreadLocal&lt;String&gt;();  </div><div class="line">    public static void setDataSourceType(String dataSourceType) &#123;  </div><div class="line">        contextHolder.set(dataSourceType);  </div><div class="line">    &#125;  </div><div class="line">    public static String getDataSourceType() &#123;  </div><div class="line">        return contextHolder.get();  </div><div class="line">    &#125;  </div><div class="line">    public static void clearDataSourceType() &#123;  </div><div class="line">        contextHolder.remove();  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>也可以利用<code>AOP</code>+<code>Annotation</code>来实现基于注解的数据库动态切换。</p><a id="more"></a><ol><li>直接配置两个数据源。<br>这种方式简单粗暴，配置多个数据源直接访问不同的数据库，但是数据库的事务会存在问题，不能同时保证多个数据库的事务。配置时遇到了<code>spring-mybatis</code>的一个大坑。</li></ol><p>天真的以为同时配置两套<code>datasource</code>,<code>sessionFactory</code>,<code>transaction</code>,<code>mapperscannerconfigurer</code>就能用了，如</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"oracleDataSource"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"oracle.jdbc.driver.OracleDriver"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;oracle.db.url&#125;"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;oracle.db.username&#125;"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;oracle.db.password&#125;"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"oracleSqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"oracleDataSource"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath:com/xxx/oracle/mapper/*.xml"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"oracleTransactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"oracleDataSource"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"oracleTransactionManager"</span></span></div><div class="line"><span class="tag">                          <span class="attr">proxy-target-class</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"oracleMapperScannerConfigurer"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.xxx.oracle"</span> /&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure><p>但是并没有。。。一直抱一个<code>Mapped Statements collection does not contain value for</code>的错误，直接将mybatis的xml放到另一个数据源下就会报表不存在的错误，事实证明配置的Oracle数据源在Mybatis中并没有生效。在<code>stackoverflow</code>上也并没有找到相关问题的解。无意中看到一篇文章，原文地址</p><p><a href="https://www.iflym.com/index.php/code/201211010001.html" target="_blank" rel="external">https://www.iflym.com/index.php/code/201211010001.html</a></p><p>才发现<code>spring-mybatis</code>的一个大坑。原文指出在<code>MapperFactoryBean</code>的父类<code>SqlSessionDaoSupport</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Autowired</span>(required = <span class="keyword">false</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setSqlSessionFactory</span><span class="params">(SqlSessionFactory sqlSessionFactory)</span> </span>&#123;</div><div class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.externalSqlSession) &#123;</div><div class="line">    <span class="keyword">this</span>.sqlSession = <span class="keyword">new</span> SqlSessionTemplate(sqlSessionFactory);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="meta">@Autowired</span>(required = <span class="keyword">false</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setSqlSessionTemplate</span><span class="params">(SqlSessionTemplate sqlSessionTemplate)</span> </span>&#123;</div><div class="line">  <span class="keyword">this</span>.sqlSession = sqlSessionTemplate;</div><div class="line">  <span class="keyword">this</span>.externalSqlSession = <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><blockquote><p>你绝对想不到，因为经过Autowired的处理，MapperFactoryBean即会运行setSqlSessionFactory方法，也会运行setSqlSessionTemplate方法。而更让人郁闷的是，你设置的sqlSessionFactoryBeanName根本没有用。这来自于内部，自以为是的externalSqlSession变量。当此变量为true时，setSqlSessionFactory方法会直接返回。因为，setSqlSessionTemplate会比属性注入的applyPropertyValues更先运行，这一切是不是很让人郁闷。</p></blockquote><p>所以在xml中配置文件改成<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"oracleSqlSession"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionTemplate"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">ref</span>=<span class="string">"oracleSqlSessionFactory"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"oracleMapperScannerConfigurer"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.xxx.oracle"</span> /&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 由于spring-mybatis的问题，不能使用sqlSessionFactoryBeanName --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionTemplateBeanName"</span> <span class="attr">value</span>=<span class="string">"oracleSqlSession"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure></p><p>问题解决了！！！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;收到一个用户需求要求时时展现填报信息，之前项目使用的数据库是&lt;code&gt;MySQL&lt;/code&gt;，但是由于数据量较大而且计算过程复杂，所以决定将数据放到&lt;code&gt;Oracle&lt;/code&gt;中利用存储过程计算，这样就需要项目同时连接&lt;code&gt;Oracle&lt;/code&gt;和&lt;code&gt;MySQL&lt;/code&gt;数据库。下边简单总结下分库分表&lt;/p&gt;
&lt;h1 id=&quot;分表&quot;&gt;&lt;a href=&quot;#分表&quot; class=&quot;headerlink&quot; title=&quot;分表&quot;&gt;&lt;/a&gt;分表&lt;/h1&gt;&lt;p&gt;当一个表的数据量很大以后，业务上就需要根据规则对数据库进行水平切分，如注册用户表&lt;code&gt;user_01&lt;/code&gt;,&lt;code&gt;user_02&lt;/code&gt;等，但是当数据库表进行切分以后，程序就需要根据规格进行相应的处理。利用&lt;code&gt;Mybatis&lt;/code&gt;的&lt;code&gt;interceptor&lt;/code&gt;可以实现根据路由规则去操作相应的数据库，开源的有&lt;code&gt;Shardbatis&lt;/code&gt;实现。但是&lt;code&gt;sharding&lt;/code&gt;只能区分一个数据源中的不同表，并不能根据规则切换数据源。&lt;/p&gt;
&lt;h1 id=&quot;分库&quot;&gt;&lt;a href=&quot;#分库&quot; class=&quot;headerlink&quot; title=&quot;分库&quot;&gt;&lt;/a&gt;分库&lt;/h1&gt;&lt;p&gt;如果想连接多个数据库，需要配置两个数据源，如&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;oracleDataSource&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;org.apache.commons.dbcp.BasicDataSource&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;driverClassName&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;oracle.jdbc.driver.OracleDriver&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;url&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;$&amp;#123;oracle.db.url&amp;#125;&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;username&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;$&amp;#123;oracle.db.username&amp;#125;&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;password&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;$&amp;#123;oracle.db.password&amp;#125;&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;利用&lt;code&gt;AbstractRoutingDataSource&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在配置文件中加入&lt;code&gt;DynamicDataSource&lt;/code&gt;配置，其中可以配置多个数据源链接和默认的链接&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;bean id=&amp;quot;dataSource&amp;quot; class=&amp;quot;com.xxx.core.dataSource.DynamicDataSource&amp;quot; &amp;gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;property name=&amp;quot;targetDataSources&amp;quot;&amp;gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;map key-type=&amp;quot;java.lang.String&amp;quot;&amp;gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;lt;entry value-ref=&amp;quot;dataSource1&amp;quot; key=&amp;quot;dataSource1&amp;quot;&amp;gt;&amp;lt;/entry&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;lt;entry value-ref=&amp;quot;dataSource2&amp;quot; key=&amp;quot;dataSource2&amp;quot;&amp;gt;&amp;lt;/entry&amp;gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;/map&amp;gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;/property&amp;gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;property name=&amp;quot;defaultTargetDataSource&amp;quot; ref=&amp;quot;dataSource1&amp;quot;&amp;gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;/property&amp;gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后继承&lt;code&gt;AbstractRoutingDataSource&lt;/code&gt;,该方法中实现数据库的动态切换。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;public class DynamicDataSource extends AbstractRoutingDataSource&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    @Override&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    protected Object determineCurrentLookupKey() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        return DataSourceContextHolder.getDataSourceType();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;定义一个可以设置当前线程的变量的工具类，用于设置对应的数据源名称。由于Spring的Bean是单例的，需要将数据源放入&lt;code&gt;ThreadLocal&lt;/code&gt;中来避免线程安全的问题。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;public class DataSourceContextHolder &amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    private static final ThreadLocal&amp;lt;String&amp;gt; contextHolder = new ThreadLocal&amp;lt;String&amp;gt;();  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    public static void setDataSourceType(String dataSourceType) &amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        contextHolder.set(dataSourceType);  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    public static String getDataSourceType() &amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        return contextHolder.get();  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    public static void clearDataSourceType() &amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        contextHolder.remove();  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;也可以利用&lt;code&gt;AOP&lt;/code&gt;+&lt;code&gt;Annotation&lt;/code&gt;来实现基于注解的数据库动态切换。&lt;/p&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://www.badwolfbay.cn/categories/Spring/"/>
    
    
      <category term="Java" scheme="http://www.badwolfbay.cn/tags/Java/"/>
    
      <category term="Spring" scheme="http://www.badwolfbay.cn/tags/Spring/"/>
    
      <category term="Mybatis" scheme="http://www.badwolfbay.cn/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Aria2+YAAW+Tampermonkey下载百度云文件</title>
    <link href="http://www.badwolfbay.cn/2018/01/04/aria2-yaaw/"/>
    <id>http://www.badwolfbay.cn/2018/01/04/aria2-yaaw/</id>
    <published>2018-01-04T03:10:00.000Z</published>
    <updated>2018-01-04T03:13:22.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>BaiduExporter</code>插件被Google下架，安装<code>BaiduExporter</code>插件只能离线安装，但是会提示<code>只能通过Chrome网上应用商店安装该程序</code>的错误(可以通过加压后再进行安装)，如果不想安装这个插件，可以安装<code>YAAW</code>。</p><p>因为公司换了电脑，不再使用<code>Mac</code>，重新在<code>Win7</code>上安装<code>Aria2</code>。</p><h1 id="下载安装aria2"><a href="#下载安装aria2" class="headerlink" title="下载安装aria2"></a>下载安装aria2</h1><p>1.进入官网下载页面<a href="https//aria2.github.io/">Aria2</a><br>2.下载win版本的压缩包<br>3.解压后放到一个目录下，如：<code>D:\Aria2</code>,然后在这个目录下建立3个文件，分别为</p><ul><li>Aria2.log(日志，空文件)</li><li>aria2.session(日志，空文件)</li><li>aria2.conf(配置文件)</li></ul><h1 id="配置aria2"><a href="#配置aria2" class="headerlink" title="配置aria2"></a>配置aria2</h1><p>打开<code>aria2.conf</code>文件，将一下内容复制到文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div></pre></td><td class="code"><pre><div class="line">dir=D:\Download\</div><div class="line"></div><div class="line">log=D:\Aria2\Aria2.log</div><div class="line"></div><div class="line">input-file=D:\Aria2\aria2.session</div><div class="line"></div><div class="line">save-session=D:\Aria2\aria2.session</div><div class="line"></div><div class="line">save-session-interval=60</div><div class="line"></div><div class="line">force-save=true</div><div class="line"></div><div class="line">log-level=error</div><div class="line"></div><div class="line"># see --split option</div><div class="line"></div><div class="line">max-concurrent-downloads=5</div><div class="line"></div><div class="line">continue=true</div><div class="line"></div><div class="line">max-overall-download-limit=0</div><div class="line"></div><div class="line">max-overall-upload-limit=50K</div><div class="line"></div><div class="line">max-upload-limit=20</div><div class="line"></div><div class="line"># Http/FTP options</div><div class="line"></div><div class="line">connect-timeout=120</div><div class="line"></div><div class="line">lowest-speed-limit=10K</div><div class="line"></div><div class="line">max-connection-per-server=10</div><div class="line"></div><div class="line">max-file-not-found=2</div><div class="line"></div><div class="line">min-split-size=1M</div><div class="line"></div><div class="line">split=5</div><div class="line"></div><div class="line">check-certificate=false</div><div class="line"></div><div class="line">http-no-cache=true</div><div class="line"></div><div class="line"># FTP Specific Options</div><div class="line"></div><div class="line"># BT/PT Setting</div><div class="line"></div><div class="line">bt-enable-lpd=true</div><div class="line"></div><div class="line">#bt-max-peers=55</div><div class="line"></div><div class="line">follow-torrent=true</div><div class="line"></div><div class="line">enable-dht6=false</div><div class="line"></div><div class="line">bt-seed-unverified</div><div class="line"></div><div class="line">rpc-save-upload-metadata=true</div><div class="line"></div><div class="line">bt-hash-check-seed</div><div class="line"></div><div class="line">bt-remove-unselected-file</div><div class="line"></div><div class="line">bt-request-peer-speed-limit=100K</div><div class="line"></div><div class="line">seed-ratio=0.0</div><div class="line"></div><div class="line"># Metalink Specific Options</div><div class="line"></div><div class="line"># RPC Options</div><div class="line"></div><div class="line">enable-rpc=true</div><div class="line"></div><div class="line">pause=false</div><div class="line"></div><div class="line">rpc-allow-origin-all=true</div><div class="line"></div><div class="line">rpc-listen-all=true</div><div class="line"></div><div class="line">rpc-save-upload-metadata=true</div><div class="line"></div><div class="line">rpc-secure=false</div><div class="line"></div><div class="line"># Advanced Options</div><div class="line"></div><div class="line">daemon=true</div><div class="line"></div><div class="line">disable-ipv6=true</div><div class="line"></div><div class="line">enable-mmap=true</div><div class="line"></div><div class="line">file-allocation=falloc </div><div class="line"></div><div class="line">max-download-result=120</div><div class="line"></div><div class="line">#no-file-allocation-limit=32M</div><div class="line"></div><div class="line">force-sequential=true</div><div class="line"></div><div class="line">parameterized-uri=true</div></pre></td></tr></table></figure></p><p>注意修改以下几项</p><p>dir=D:\Download\</p><p>log=D:\Aria2\Aria2.log</p><p>input-file=D:\Aria2\aria2.session</p><p>save-session=D:\Aria2\aria2.session</p><p>在<code>cmd</code>中启动:<code>aria2c.exe --conf-path=aria2.conf</code></p><h1 id="安装YAAW插件"><a href="#安装YAAW插件" class="headerlink" title="安装YAAW插件"></a>安装YAAW插件</h1><p>在chrome的插件商店搜索<code>YAAW</code>找到<code>YAAW for Chrome</code>进行安装</p><p>然后在所有的下载链接上右键选择<code>ARIA2 RPC</code>进行下载就可以了。</p><h1 id="Aria2-Web"><a href="#Aria2-Web" class="headerlink" title="Aria2 Web"></a>Aria2 Web</h1><p>1.可以直接现在访问<br><a href="http://aria2c.com" target="_blank" rel="external">http://aria2c.com</a><br>2.点击chrome插件yaaw，也可以直接看到下载任务</p><h1 id="百度云大文件链接"><a href="#百度云大文件链接" class="headerlink" title="百度云大文件链接"></a>百度云大文件链接</h1><ol><li>安装油猴插件（插件商店搜索<code>Tampermonkey</code>并安装）</li><li>安装<code>EX-百度云盘</code>油猴脚本(<a href="https://greasyfork.org/zh-CN/scripts/26638-ex-%E7%99%BE%E5%BA%A6%E4%BA%91%E7%9B%98" target="_blank" rel="external">EX-百度云盘</a>)</li><li>百度云盘中的页面中会多一个<code>EX-下载</code>的选项</li><li>这时在<code>EX-下载</code>的下拉菜单中的<code>普通下载</code>右键还不能将任务发送aria2进行下载，需要将文件共享。</li><li>在共享页面的<code>EX-下载</code>的菜单中选择<code>普通下载</code>后，Chrome就可以下载大文件了。然后在下载的链接上右击，选择<code>ARIA2-RPC</code>就可以了。</li><li>按照上边的Aria2 Web可以查看下载的文件和进度。</li></ol><h1 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h1><p><code>aria2</code>的启动时在<code>cmd</code>中启动的，需要使用脚本启动并隐藏cmd窗口。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;BaiduExporter&lt;/code&gt;插件被Google下架，安装&lt;code&gt;BaiduExporter&lt;/code&gt;插件只能离线安装，但是会提示&lt;code&gt;只能通过Chrome网上应用商店安装该程序&lt;/code&gt;的错误(可以通过加压后再进行安装)，如果不想安
      
    
    </summary>
    
      <category term="软件" scheme="http://www.badwolfbay.cn/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="Baidu" scheme="http://www.badwolfbay.cn/tags/Baidu/"/>
    
  </entry>
  
  <entry>
    <title>利用Django Admin管理</title>
    <link href="http://www.badwolfbay.cn/2017/12/29/django-admin/"/>
    <id>http://www.badwolfbay.cn/2017/12/29/django-admin/</id>
    <published>2017-12-29T06:38:01.000Z</published>
    <updated>2018-01-04T03:17:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>Python的Web框架Django有一个很厉害的功能就是可以根据数据的表结构生成<code>models</code>,然后利用自带的<code>admin</code>管理界面进行管理。</p><h1 id="安装-Windows"><a href="#安装-Windows" class="headerlink" title="安装(Windows)"></a>安装(Windows)</h1><p>1.安装Python</p><p>下载地址:</p><blockquote><p><a href="https://www.python.org/getit" target="_blank" rel="external">https://www.python.org/getit</a><br>注:安装时选择安装pip</p></blockquote><p>2.配置环境</p><p>在Windows的环境变量中<code>path</code>中添加<br><code>C:\Python\Python36-32;C:\Python\Python36-32\Scripts</code></p><p>3.安装Django</p><p>在<code>cmd</code>中执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install Django==2.0</div></pre></td></tr></table></figure></p><h1 id="配置Django"><a href="#配置Django" class="headerlink" title="配置Django"></a>配置Django</h1><p>根据数据库反向生成model</p><p>1.新建项目</p><p>在想要存储的目录下执行命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">django-admin startproject cwtb</div></pre></td></tr></table></figure><p>2.修改数据库<br>修改新建项目的<code>settings.py</code>文件数据库连接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">DATABASES = &#123;</div><div class="line">    &apos;default&apos;: &#123;</div><div class="line">        &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;,</div><div class="line">        &apos;NAME&apos;: &apos;fms_cwtb&apos;,</div><div class="line">        &apos;USER&apos;: &apos;jxq&apos;,</div><div class="line">        &apos;PASSWORD&apos;: &apos;jxq&apos;,</div><div class="line">        &apos;HOST&apos;: &apos;192.168.157.61&apos;,</div><div class="line">        &apos;PORT&apos;: &apos;3306&apos;,</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>3.执行命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#安装MySQL客户端</div><div class="line">pip install mysqlclient</div><div class="line">#生成models</div><div class="line">python manage.py inspectdb</div></pre></td></tr></table></figure><p>4.创建app，导入models</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">python manage.py startapp app</div><div class="line">python manage.py inspectdb &gt; app/models.py</div></pre></td></tr></table></figure><p>5.生成<code>admin</code>需要的表到数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">python manage.py migrate auth</div><div class="line">python manage.py migrate</div></pre></td></tr></table></figure><p>6.创建登录用户名密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python manage.py createsuperuser</div></pre></td></tr></table></figure><p>期间会要求输入用户名/密码:admin/admin1234</p><p>7.<code>admin</code>中注册app</p><p>修改<code>admin.py</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">from django.contrib import admin</div><div class="line"></div><div class="line">from app.models import FmsTbBiTs</div><div class="line"></div><div class="line"># Register your models here.</div><div class="line"></div><div class="line">@admin.register(FmsTbBiTs)</div><div class="line">class  FmsTbCpkDjcAdmin(admin.ModelAdmin):</div><div class="line">    list_display = (&apos;id&apos;, &apos;year&apos;, &apos;quarter&apos;, &apos;month&apos;, &apos;dept_code&apos;, &apos;dept_name&apos;, &apos;project_code&apos;, &apos;project_name&apos;,&apos;km_code&apos;, &apos;km_name&apos;, &apos;tsz&apos;, &apos;data_type&apos;, &apos;tb_type&apos;, &apos;bz1&apos;, &apos;bz2&apos;, &apos;bz3&apos;, &apos;bz4&apos;, &apos;create_time&apos;, &apos;update_time&apos;)</div></pre></td></tr></table></figure><p>8.修改<code>setting.py</code>,将新建的<code>app</code>应用添加到<code>INSTALLED_APPS</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">INSTALLED_APPS = [</div><div class="line"></div><div class="line">    &apos;django.contrib.admin&apos;,</div><div class="line">    &apos;django.contrib.auth&apos;,</div><div class="line">    &apos;django.contrib.contenttypes&apos;,</div><div class="line">    &apos;django.contrib.sessions&apos;,</div><div class="line">    &apos;django.contrib.messages&apos;,</div><div class="line">    &apos;django.contrib.staticfiles&apos;,</div><div class="line">    &apos;app&apos;</div><div class="line">]</div></pre></td></tr></table></figure><p>9.修改中英文配置</p><p>修改<code>settings.py</code>文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">LANGUAGE_CODE =  &apos;zh-hans&apos;</div><div class="line"></div><div class="line">TIME_ZONE =  &apos;Asia/Shanghai&apos;</div></pre></td></tr></table></figure><p>10.启动<code>Admin</code>管理后台</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python manage.py runserver 0.0.0.0:8000</div></pre></td></tr></table></figure><p>访问</p><p><code>http://localhost:8000/admin</code>会看到登陆界面</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Python的Web框架Django有一个很厉害的功能就是可以根据数据的表结构生成&lt;code&gt;models&lt;/code&gt;,然后利用自带的&lt;code&gt;admin&lt;/code&gt;管理界面进行管理。&lt;/p&gt;
&lt;h1 id=&quot;安装-Windows&quot;&gt;&lt;a href=&quot;#安装-Wind
      
    
    </summary>
    
      <category term="python" scheme="http://www.badwolfbay.cn/categories/python/"/>
    
    
      <category term="Python" scheme="http://www.badwolfbay.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>百度云盘大文件下载及wget命令下载</title>
    <link href="http://www.badwolfbay.cn/2017/12/11/wget-baidu-yunpan/"/>
    <id>http://www.badwolfbay.cn/2017/12/11/wget-baidu-yunpan/</id>
    <published>2017-12-11T02:12:53.000Z</published>
    <updated>2017-12-11T06:28:42.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="大文件下载-chrome"><a href="#大文件下载-chrome" class="headerlink" title="大文件下载 (chrome)"></a>大文件下载 (chrome)</h3><p>1.安装Tampermonkey</p><p>下载<code>Tampermonkey</code>ctx安装文件,拖拽到chrome扩展程序进行安装</p><p>2.安装脚本</p><blockquote><p><a href="https://greasyfork.org/zh-CN" target="_blank" rel="external">https://greasyfork.org/zh-CN</a></p></blockquote><p>搜索 <code>百度云</code>，找到<code>解决百度云大文件下载限制</code>，点击<code>安装脚本</code></p><p>点击下载即可在chrome中下载大文件</p><h3 id="wget命令下载"><a href="#wget命令下载" class="headerlink" title="wget命令下载"></a>wget命令下载</h3><p>在不使用客户端的情况下，在Linux上可以使用<code>wget</code>命令下载文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget -c --referer=&quot;https://pan.baidu.com/s/1geShrcn&quot; -O USB_Clover_El_10.11.2_15C50.dmg &quot;https://d11.baidupcs.com/file/4fe11b6499aadfb6d6c71a069347b2ef?bkt=p3-000041b61dfd29c78e715750f5f368b68f21&amp;xcode=8b170a5746c3e069110d88ded6ecebe0753c975f9b99f324&amp;fid=2634882875-250528-446076603732633&amp;time=1512955781&amp;sign=FDTAXGERLQBHSK-DCb740ccc5511e5e8fedcff06b081203-DhXO3o2T%2FM61XgCfTOIdJdBKfIs%3D&amp;to=d11&amp;size=6331828199&amp;sta_dx=6331828199&amp;sta_cs=1408&amp;sta_ft=dmg&amp;sta_ct=7&amp;sta_mt=0&amp;fm2=MH,Yangquan,Anywhere,,guangdong,ct&amp;vuk=2634882875&amp;iv=0&amp;newver=1&amp;newfm=1&amp;secfm=1&amp;flow_ver=3&amp;pkey=000041b61dfd29c78e715750f5f368b68f21&amp;sl=83034191&amp;expires=8h&amp;rt=sh&amp;r=740312867&amp;mlogid=7987506833960085243&amp;vbdid=502990198&amp;fin=USB_Clover_El_10.11.2_15C50.dmg&amp;fn=USB_Clover_El_10.11.2_15C50.dmg&amp;rtype=1&amp;dp-logid=7987506833960085243&amp;dp-callid=0.1.1&amp;hps=1&amp;tsl=300&amp;csl=300&amp;csign=7qu6lUTZwacrMJY1n%2Fm13tTPRpA%3D&amp;so=0&amp;ut=6&amp;uter=4&amp;serv=0&amp;uc=1539727773&amp;ic=815197955&amp;ti=91499ea5817d8028239ebf7886cf11f2e88e8e5223093275&amp;by=themis&quot;</div></pre></td></tr></table></figure><p><code>--referer</code>后为分享链接(自己的文件可以先创建一个分享链接)，<code>-O</code>为下载后的文件名<br>后边为chrome下载时的文件真实地址,文件上右击<code>复制链接地址即可</code></p><a id="more"></a><h3 id="安装aria2"><a href="#安装aria2" class="headerlink" title="安装aria2"></a>安装aria2</h3><p>Mac下安装<code>aria2</code></p><blockquote><p>brew install aria2</p></blockquote><p>github地址 <a href="https://github.com/aria2/aria2" target="_blank" rel="external">aria2</a></p><p>如果使用命令行下载不需要启动以下的RPC服务<br>启动<code>aria2</code>的RPC服务，创建<code>aria2.conf</code>文件<br>在<code>/usr/local/Cellar/aria2/1.33.1/etc</code>目录下，可以创建在任意目录，执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">aria2c --conf-path=/usr/local/Cellar/aria2/1.33.1/etc/aria2.conf -D</div></pre></td></tr></table></figure><p><code>aria2.conf</code>文件内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">#用户名</div><div class="line">#rpc-user=user</div><div class="line">#密码</div><div class="line">#rpc-passwd=passwd</div><div class="line">#上面的认证方式不建议使用,建议使用下面的token方式</div><div class="line">#设置加密的密钥</div><div class="line">#rpc-secret=token</div><div class="line">#允许rpc</div><div class="line">enable-rpc=true</div><div class="line">#允许所有来源, web界面跨域权限需要</div><div class="line">rpc-allow-origin-all=true</div><div class="line">#允许外部访问，false的话只监听本地端口</div><div class="line">rpc-listen-all=true</div><div class="line">#RPC端口, 仅当默认端口被占用时修改</div><div class="line">#rpc-listen-port=6800</div><div class="line">#最大同时下载数(任务数), 路由建议值: 3</div><div class="line">max-concurrent-downloads=5</div><div class="line">#断点续传</div><div class="line">continue=true</div><div class="line">#同服务器连接数</div><div class="line">max-connection-per-server=5</div><div class="line">#最小文件分片大小, 下载线程数上限取决于能分出多少片, 对于小文件重要</div><div class="line">min-split-size=10M</div><div class="line">#单文件最大线程数, 路由建议值: 5</div><div class="line">split=10</div><div class="line">#下载速度限制</div><div class="line">max-overall-download-limit=0</div><div class="line">#单文件速度限制</div><div class="line">max-download-limit=0</div><div class="line">#上传速度限制</div><div class="line">max-overall-upload-limit=0</div><div class="line">#单文件速度限制</div><div class="line">max-upload-limit=0</div><div class="line">#断开速度过慢的连接</div><div class="line">#lowest-speed-limit=0</div><div class="line">#验证用，需要1.16.1之后的release版本</div><div class="line">#referer=*</div><div class="line">#文件保存路径, 默认为当前启动位置</div><div class="line">dir=/Users/badwolf/Downloads</div><div class="line">#文件缓存, 使用内置的文件缓存, 如果你不相信Linux内核文件缓存和磁盘内置缓存时使用, 需要1.16及以上版本</div><div class="line">#disk-cache=0</div><div class="line">#另一种Linux文件缓存方式, 使用前确保您使用的内核支持此选项, 需要1.15及以上版本(?)</div><div class="line">#enable-mmap=true</div><div class="line">#文件预分配, 能有效降低文件碎片, 提高磁盘性能. 缺点是预分配时间较长</div><div class="line">#所需时间 none &lt; falloc ? trunc &lt;&lt; prealloc, falloc和trunc需要文件系统和内核支持</div><div class="line">file-allocation=prealloc</div></pre></td></tr></table></figure><h3 id="安装百度云aria2插件"><a href="#安装百度云aria2插件" class="headerlink" title="安装百度云aria2插件"></a>安装百度云aria2插件</h3><blockquote><p><a href="https://github.com/acgotaku/BaiduExporter" target="_blank" rel="external">https://github.com/acgotaku/BaiduExporter</a></p></blockquote><p>下载ctx文件，安装后可能会出现<code>只能通过Chrome网上应用商店安装该程序</code>的错误<br>需要将文件解压后用<code>开发者模式</code>加载已解压的扩展程序方式安装<br>PS:插件安装位置<code>C:\Users\xxxx\AppData\Local\Google\Chrome\User Data\Default\Extensions</code></p><p>安装后重新打开百度云即可以看到<code>导出下载</code>有ARIA2的相关配置,如果没有，需要在F12控制台下多刷新几次直到提示初始化成功为止</p><p>因为我是远程下载点击<code>文本导出</code>，复制aria2c的命令执行即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;大文件下载-chrome&quot;&gt;&lt;a href=&quot;#大文件下载-chrome&quot; class=&quot;headerlink&quot; title=&quot;大文件下载 (chrome)&quot;&gt;&lt;/a&gt;大文件下载 (chrome)&lt;/h3&gt;&lt;p&gt;1.安装Tampermonkey&lt;/p&gt;
&lt;p&gt;下载&lt;code&gt;Tampermonkey&lt;/code&gt;ctx安装文件,拖拽到chrome扩展程序进行安装&lt;/p&gt;
&lt;p&gt;2.安装脚本&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://greasyfork.org/zh-CN&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://greasyfork.org/zh-CN&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;搜索 &lt;code&gt;百度云&lt;/code&gt;，找到&lt;code&gt;解决百度云大文件下载限制&lt;/code&gt;，点击&lt;code&gt;安装脚本&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;点击下载即可在chrome中下载大文件&lt;/p&gt;
&lt;h3 id=&quot;wget命令下载&quot;&gt;&lt;a href=&quot;#wget命令下载&quot; class=&quot;headerlink&quot; title=&quot;wget命令下载&quot;&gt;&lt;/a&gt;wget命令下载&lt;/h3&gt;&lt;p&gt;在不使用客户端的情况下，在Linux上可以使用&lt;code&gt;wget&lt;/code&gt;命令下载文件&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;wget -c --referer=&amp;quot;https://pan.baidu.com/s/1geShrcn&amp;quot; -O USB_Clover_El_10.11.2_15C50.dmg &amp;quot;https://d11.baidupcs.com/file/4fe11b6499aadfb6d6c71a069347b2ef?bkt=p3-000041b61dfd29c78e715750f5f368b68f21&amp;amp;xcode=8b170a5746c3e069110d88ded6ecebe0753c975f9b99f324&amp;amp;fid=2634882875-250528-446076603732633&amp;amp;time=1512955781&amp;amp;sign=FDTAXGERLQBHSK-DCb740ccc5511e5e8fedcff06b081203-DhXO3o2T%2FM61XgCfTOIdJdBKfIs%3D&amp;amp;to=d11&amp;amp;size=6331828199&amp;amp;sta_dx=6331828199&amp;amp;sta_cs=1408&amp;amp;sta_ft=dmg&amp;amp;sta_ct=7&amp;amp;sta_mt=0&amp;amp;fm2=MH,Yangquan,Anywhere,,guangdong,ct&amp;amp;vuk=2634882875&amp;amp;iv=0&amp;amp;newver=1&amp;amp;newfm=1&amp;amp;secfm=1&amp;amp;flow_ver=3&amp;amp;pkey=000041b61dfd29c78e715750f5f368b68f21&amp;amp;sl=83034191&amp;amp;expires=8h&amp;amp;rt=sh&amp;amp;r=740312867&amp;amp;mlogid=7987506833960085243&amp;amp;vbdid=502990198&amp;amp;fin=USB_Clover_El_10.11.2_15C50.dmg&amp;amp;fn=USB_Clover_El_10.11.2_15C50.dmg&amp;amp;rtype=1&amp;amp;dp-logid=7987506833960085243&amp;amp;dp-callid=0.1.1&amp;amp;hps=1&amp;amp;tsl=300&amp;amp;csl=300&amp;amp;csign=7qu6lUTZwacrMJY1n%2Fm13tTPRpA%3D&amp;amp;so=0&amp;amp;ut=6&amp;amp;uter=4&amp;amp;serv=0&amp;amp;uc=1539727773&amp;amp;ic=815197955&amp;amp;ti=91499ea5817d8028239ebf7886cf11f2e88e8e5223093275&amp;amp;by=themis&amp;quot;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;--referer&lt;/code&gt;后为分享链接(自己的文件可以先创建一个分享链接)，&lt;code&gt;-O&lt;/code&gt;为下载后的文件名&lt;br&gt;后边为chrome下载时的文件真实地址,文件上右击&lt;code&gt;复制链接地址即可&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java多线程synchronized</title>
    <link href="http://www.badwolfbay.cn/2017/12/06/java-synchronized/"/>
    <id>http://www.badwolfbay.cn/2017/12/06/java-synchronized/</id>
    <published>2017-12-06T02:08:20.000Z</published>
    <updated>2017-12-06T02:11:42.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>synchronized</code>依靠锁机制实现多线程的同步，锁分两种</p><ul><li>对象锁</li><li>类锁</li></ul><p>1.<code>synchronized</code>作用于普通方法时依靠对象锁工作，多线程访问synchronized方法，一旦某个线程抢到锁后，其他进程排队等待<br>等效于<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">void method&#123;</div><div class="line">    synchronized(this)&#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">public class TestSynchronized &#123;</div><div class="line"></div><div class="line">    public synchronized void method1() throws InterruptedException &#123;</div><div class="line">        System.out.println(&quot;Method1 start at :&quot; + System.currentTimeMillis());</div><div class="line">        Thread.sleep(6000);</div><div class="line">        System.out.println(&quot;Method1 end at :&quot; + System.currentTimeMillis());</div><div class="line">    &#125;</div><div class="line">    public synchronized void method2() throws InterruptedException &#123;</div><div class="line">        while (true) &#123;</div><div class="line">            System.out.println(&quot;method2 running&quot;);</div><div class="line">            Thread.sleep(200);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    static TestSynchronized instance = new TestSynchronized();</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        Thread thread1 = new Thread(new Runnable() &#123;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public void run() &#123;</div><div class="line">                try &#123;</div><div class="line">                    instance.method1();</div><div class="line">                &#125; catch (InterruptedException e) &#123;</div><div class="line">                    // TODO Auto-generated catch block</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">                for (int i = 1; i &lt; 4; i++) &#123;</div><div class="line">                    try &#123;</div><div class="line">                        Thread.sleep(200);</div><div class="line">                    &#125; catch (InterruptedException e) &#123;</div><div class="line">                        e.printStackTrace();</div><div class="line">                    &#125;</div><div class="line">                    System.out.println(&quot;Thread1 still alive&quot;);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        Thread thread2 = new Thread(new Runnable() &#123;</div><div class="line">            </div><div class="line">            @Override</div><div class="line">            public void run() &#123;</div><div class="line">                 try &#123;</div><div class="line">                    instance.method2();</div><div class="line">                &#125; catch (InterruptedException e) &#123;</div><div class="line">                    // TODO Auto-generated catch block</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">                </div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        thread1.start();</div><div class="line">        thread2.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>方法<code>method2</code>会一直等待<code>method1</code>执行完成后再执行。<br>synchronized void method(){}整个函数加上synchronized块，效率并不好。</p><p>2.<code>synchronized</code>作用于静态方法相当于</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">void method()&#123;</div><div class="line">    synchronized(Object.class)&#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;synchronized&lt;/code&gt;依靠锁机制实现多线程的同步，锁分两种&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对象锁&lt;/li&gt;
&lt;li&gt;类锁&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;1.&lt;code&gt;synchronized&lt;/code&gt;作用于普通方法时依靠对象锁工作，多线程访问sy
      
    
    </summary>
    
      <category term="Java" scheme="http://www.badwolfbay.cn/categories/Java/"/>
    
    
      <category term="Java" scheme="http://www.badwolfbay.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JVM学习一</title>
    <link href="http://www.badwolfbay.cn/2017/11/15/jvm-study-1/"/>
    <id>http://www.badwolfbay.cn/2017/11/15/jvm-study-1/</id>
    <published>2017-11-15T13:22:11.000Z</published>
    <updated>2017-11-16T02:26:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>OutOfMemoryError异常</p><h3 id="JAVA堆溢出"><a href="#JAVA堆溢出" class="headerlink" title="JAVA堆溢出"></a>JAVA堆溢出</h3><p>Java堆用来存储对象实例，只要不断的创建对象，只要在对象数量达到最大堆的容量限制后就会产生内存溢出</p><p>通过设置堆的最小值(-Xms)参数和最大值(-Xmx)设置相等来避免堆自动扩展</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// VM args -Xmx20m -Xms20m</div><div class="line">public class HeapOOM &#123;</div><div class="line"></div><div class="line">    static class OOMObject&#123;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    public static void main(String[] args)&#123;</div><div class="line">        List&lt;OOMObject&gt; list = new ArrayList&lt;&gt;();</div><div class="line">        while(true)&#123;</div><div class="line">            list.add(new OOMObject());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>报错信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Exception in thread &quot;main&quot; java.lang.OutOfMemoryError: Java heap space</div></pre></td></tr></table></figure><h3 id="虚拟机栈和本地方法溢出"><a href="#虚拟机栈和本地方法溢出" class="headerlink" title="虚拟机栈和本地方法溢出"></a>虚拟机栈和本地方法溢出</h3><p>在HotSpot虚拟机中并不区分虚拟机栈和本地方法栈<br>栈容量只能通过-Xss来设置<br>存放基本数据类型(byte,char,boolean,shot,int,long,float,double)和对象的引用类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">// VM args -Xss128k</div><div class="line">public class JavaVMStackSOF &#123;</div><div class="line"></div><div class="line">    private int stackLength = -1;</div><div class="line"></div><div class="line">    public void stackLeak()&#123;</div><div class="line">        stackLength++;</div><div class="line">        stackLeak();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void main(String[] args)&#123;</div><div class="line">        JavaVMStackSOF oom = new JavaVMStackSOF();</div><div class="line">        try&#123;</div><div class="line">            oom.stackLeak();</div><div class="line">        &#125;catch(Throwable e)&#123;</div><div class="line">            System.out.println(&quot;stack length:&quot; + oom.stackLength);</div><div class="line">            throw e;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><a id="more"></a><h3 id="方法区和运行时常量溢出"><a href="#方法区和运行时常量溢出" class="headerlink" title="方法区和运行时常量溢出"></a>方法区和运行时常量溢出</h3><p>JDK1.6以及之前的版本中，常量池分配在”永久代”中,JDK1.7以后开始“去永久代”<br>通过-XX:PermSize和-XX:MaxPermSize限制方法区大小<br>String.intern()是一个Native方法，在JDK1.6之前，intern()方法会将首次遇到的字符串实例复制到”永久代”中，返回的也是”永久代”中的实例，JDK1.7以后不会再复制实例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public class RuntimeConstantPoolOOM &#123;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        String str1 = new StringBuilder(&quot;计算机&quot;).append(&quot;软件&quot;).toString();</div><div class="line">        System.out.println(str1.intern() == str1);</div><div class="line">        String str2 = new StringBuilder(&quot;ja&quot;).append(&quot;va&quot;).toString();</div><div class="line">        System.out.println(str2.intern() == str2);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>所以在JDK1.6和JDK1.7上执行上边的代码会出现不同的结果；JDK1.6中会是两个false,JDK1.7上会是一个true，一个false</p><h3 id="本机直接内存溢出"><a href="#本机直接内存溢出" class="headerlink" title="本机直接内存溢出"></a>本机直接内存溢出</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;OutOfMemoryError异常&lt;/p&gt;
&lt;h3 id=&quot;JAVA堆溢出&quot;&gt;&lt;a href=&quot;#JAVA堆溢出&quot; class=&quot;headerlink&quot; title=&quot;JAVA堆溢出&quot;&gt;&lt;/a&gt;JAVA堆溢出&lt;/h3&gt;&lt;p&gt;Java堆用来存储对象实例，只要不断的创建对象，只要在对象数量达到最大堆的容量限制后就会产生内存溢出&lt;/p&gt;
&lt;p&gt;通过设置堆的最小值(-Xms)参数和最大值(-Xmx)设置相等来避免堆自动扩展&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;// VM args -Xmx20m -Xms20m&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;public class HeapOOM &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    static class OOMObject&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    public static void main(String[] args)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        List&amp;lt;OOMObject&amp;gt; list = new ArrayList&amp;lt;&amp;gt;();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        while(true)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            list.add(new OOMObject());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;报错信息&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Exception in thread &amp;quot;main&amp;quot; java.lang.OutOfMemoryError: Java heap space&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;虚拟机栈和本地方法溢出&quot;&gt;&lt;a href=&quot;#虚拟机栈和本地方法溢出&quot; class=&quot;headerlink&quot; title=&quot;虚拟机栈和本地方法溢出&quot;&gt;&lt;/a&gt;虚拟机栈和本地方法溢出&lt;/h3&gt;&lt;p&gt;在HotSpot虚拟机中并不区分虚拟机栈和本地方法栈&lt;br&gt;栈容量只能通过-Xss来设置&lt;br&gt;存放基本数据类型(byte,char,boolean,shot,int,long,float,double)和对象的引用类型&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;// VM args -Xss128k&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;public class JavaVMStackSOF &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    private int stackLength = -1;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    public void stackLeak()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        stackLength++;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        stackLeak();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    public static void main(String[] args)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        JavaVMStackSOF oom = new JavaVMStackSOF();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        try&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            oom.stackLeak();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;catch(Throwable e)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            System.out.println(&amp;quot;stack length:&amp;quot; + oom.stackLength);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            throw e;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Java" scheme="http://www.badwolfbay.cn/categories/Java/"/>
    
    
      <category term="Java" scheme="http://www.badwolfbay.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>HashMap总结</title>
    <link href="http://www.badwolfbay.cn/2017/11/15/java-hashmap/"/>
    <id>http://www.badwolfbay.cn/2017/11/15/java-hashmap/</id>
    <published>2017-11-15T13:21:37.000Z</published>
    <updated>2017-11-16T02:28:10.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>基于Map接口实现，允许null键/值，非同步(线程不安全)，不保证有序，也不保证顺序不随时间变化；存储着Entry（hash,key,value,next）对象</li><li>两个重要参数容量(Capacity)和负载因子(Load factor)</li><li>HashMap在new后并不会分配数组，而是在第一次put时进行初始化，类似ArrayList在第一次add时分配内存空间</li><li>HashMap的bucket数组大小一定是2的幂，如果是new的时候指定了容量且不是2的幂，实际容量会是最接近且大于指定容量的2的幂，如new HashMap&lt;&gt;(19)，实际容量为32</li><li>HashMap在put的元素大于Capacity*LoadFactor(默认16*0.75)之后会进行扩容</li><li>JDK8处于提升性能的考虑，在哈希碰撞的链表长度达到TREEIFY_THRESHOLD(默认8)后，会把该链表转变成树结构</li><li>JDK8在resize的时候，通过巧妙的设计，减少了rehash的性能消耗;resize是扩容的两倍</li></ul><blockquote><p><a href="http://yikun.github.io" target="_blank" rel="external">http://yikun.github.io</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;基于Map接口实现，允许null键/值，非同步(线程不安全)，不保证有序，也不保证顺序不随时间变化；存储着Entry（hash,key,value,next）对象&lt;/li&gt;
&lt;li&gt;两个重要参数容量(Capacity)和负载因子(Load factor)&lt;/li
      
    
    </summary>
    
      <category term="Java" scheme="http://www.badwolfbay.cn/categories/Java/"/>
    
    
      <category term="Java" scheme="http://www.badwolfbay.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Go指南学习笔记十三</title>
    <link href="http://www.badwolfbay.cn/2017/11/08/go-tour-note-13/"/>
    <id>http://www.badwolfbay.cn/2017/11/08/go-tour-note-13/</id>
    <published>2017-11-08T05:46:20.000Z</published>
    <updated>2017-11-08T06:40:47.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="range和close"><a href="#range和close" class="headerlink" title="range和close"></a>range和close</h3><p>发送者可以通过<code>close</code>来关闭channel。<br>接受者可以通过传入第二个参数来测试channl是否被关闭</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">v, ok := &lt;-ch</div></pre></td></tr></table></figure><p>循环<code>for i := range c</code>会不断从channl接受值，直到它被关闭。</p><p><em>只有发送者能关闭channel,而不是接收者</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import (</div><div class="line">    &quot;fmt&quot;</div><div class="line">)</div><div class="line"></div><div class="line">//斐波那契数列</div><div class="line">func fibonacci(n int, c chan int) &#123;</div><div class="line">    x, y := 0, 1</div><div class="line">    for i := 0; i &lt; n; i++ &#123;</div><div class="line">        c &lt;- x</div><div class="line">        x, y = y, x+y</div><div class="line">    &#125;</div><div class="line">    close(c)</div><div class="line">&#125;</div><div class="line"></div><div class="line">func main()&#123;</div><div class="line">    c := make(chan int, 10)</div><div class="line">    go fibonacci(cap(c), c)</div><div class="line">    for i := range c &#123;</div><div class="line">        fmt.Println(i)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">0</div><div class="line">1</div><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">5</div><div class="line">8</div><div class="line">13</div><div class="line">21</div><div class="line">34</div></pre></td></tr></table></figure><a id="more"></a><h3 id="select"><a href="#select" class="headerlink" title="select"></a>select</h3><p><code>select</code>使得一个goroutine在多个通讯操作中等待。</p><p><code>select</code>会阻塞，直到条件分支中的某个可以继续执行，这时就会执行那个分支。当多个都准备好时，会随机选择一个。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import &quot;fmt&quot;</div><div class="line"></div><div class="line">func fibonacci(c, quit chan int) &#123;</div><div class="line">    x, y := 0, 1</div><div class="line">    for &#123;</div><div class="line">        select &#123;</div><div class="line">        case c &lt;- x:</div><div class="line">            x, y = y, x+y</div><div class="line">        case &lt;-quit:</div><div class="line">            fmt.Println(&quot;quit&quot;)</div><div class="line">            return</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">func main()&#123;</div><div class="line">    c := make(chan int)</div><div class="line">    quit := make(chan int)</div><div class="line">    go func()&#123;</div><div class="line">        for i := 0; i &lt; 10; i++ &#123;</div><div class="line">            fmt.Println(&lt;-c)</div><div class="line">        &#125;</div><div class="line">        quit &lt;- 0</div><div class="line">    &#125;()</div><div class="line">    fibonacci(c, quit)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">0</div><div class="line">1</div><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">5</div><div class="line">8</div><div class="line">13</div><div class="line">21</div><div class="line">34</div><div class="line">quit</div></pre></td></tr></table></figure></p><h3 id="默认选择"><a href="#默认选择" class="headerlink" title="默认选择"></a>默认选择</h3><p>当<code>select</code>中的其他分支都没有准备好的时候，<code>default</code>分支会被执行。<br>为了非阻塞的发送或者接口，可以使用default分支。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import (</div><div class="line">    &quot;fmt&quot;</div><div class="line">    &quot;time&quot;</div><div class="line">)</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line">    tick := time.Tick(100 * time.Millisecond)</div><div class="line">    boom := time.After(500 * time.Millisecond)</div><div class="line">    for &#123;</div><div class="line">        select &#123;</div><div class="line">        case &lt;-tick:</div><div class="line">            fmt.Println(&quot;tick.&quot;)</div><div class="line">        case &lt;-boom:</div><div class="line">            fmt.Println(&quot;BOOM!&quot;)</div><div class="line">            return</div><div class="line">        default:</div><div class="line">            fmt.Println(&quot;    .&quot;)</div><div class="line">            time.Sleep(50 * time.Microsecond)</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="sync-Mutex"><a href="#sync-Mutex" class="headerlink" title="sync.Mutex"></a>sync.Mutex</h3><p>如果只想保证每个时刻，只有一个goroutine能访问一个共享的变量避免冲突怎么办？<br>这里涉及的概念叫做<em>互斥</em>，使用互斥锁<code>mutex</code>来提供这个限制。<br>Go标准库中提供了<code>sync.Mutex</code>类型以及两个方法</p><ul><li>Lock</li><li>Unlock</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import (</div><div class="line">    &quot;fmt&quot;</div><div class="line">    &quot;time&quot;</div><div class="line">    &quot;sync&quot;</div><div class="line">)</div><div class="line"></div><div class="line">//并发是安全的</div><div class="line">type SafeCounter struct&#123;</div><div class="line">    v map[string] int</div><div class="line">    mux sync.Mutex</div><div class="line">&#125;</div><div class="line"></div><div class="line">func (c *SafeCounter) Inc(key string) &#123;</div><div class="line">    c.mux.Lock()</div><div class="line">    //lock之后同一时刻只有一个goroutine能访问c.v</div><div class="line">    c.v[key]++</div><div class="line">    c.mux.Unlock()</div><div class="line">&#125;</div><div class="line"></div><div class="line">// Value 返回给定 key 的计数器的当前值。</div><div class="line">func (c *SafeCounter) Value(key string) int &#123;</div><div class="line">    c.mux.Lock()</div><div class="line">    // Lock 之后同一时刻只有一个 goroutine 能访问 c.v</div><div class="line">    defer c.mux.Unlock()</div><div class="line">    return c.v[key]</div><div class="line">&#125;</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line">    c := SafeCounter&#123;v: make(map[string] int)&#125;</div><div class="line">    for i := 0; i &lt; 1000; i++ &#123;</div><div class="line">        go c.Inc(&quot;somekey&quot;)</div><div class="line">    &#125;</div><div class="line">    time.Sleep(time.Second)</div><div class="line">    fmt.Println(c.Value(&quot;somekey&quot;))</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">1000</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;range和close&quot;&gt;&lt;a href=&quot;#range和close&quot; class=&quot;headerlink&quot; title=&quot;range和close&quot;&gt;&lt;/a&gt;range和close&lt;/h3&gt;&lt;p&gt;发送者可以通过&lt;code&gt;close&lt;/code&gt;来关闭channel。&lt;br&gt;接受者可以通过传入第二个参数来测试channl是否被关闭&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;v, ok := &amp;lt;-ch&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;循环&lt;code&gt;for i := range c&lt;/code&gt;会不断从channl接受值，直到它被关闭。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;只有发送者能关闭channel,而不是接收者&lt;/em&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;package main&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;import (&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;quot;fmt&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//斐波那契数列&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;func fibonacci(n int, c chan int) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    x, y := 0, 1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    for i := 0; i &amp;lt; n; i++ &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        c &amp;lt;- x&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        x, y = y, x+y&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    close(c)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;func main()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    c := make(chan int, 10)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    go fibonacci(cap(c), c)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    for i := range c &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        fmt.Println(i)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输出结果&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;0&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="golang" scheme="http://www.badwolfbay.cn/categories/golang/"/>
    
    
      <category term="go" scheme="http://www.badwolfbay.cn/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>Go指南学习笔记十二</title>
    <link href="http://www.badwolfbay.cn/2017/11/07/go-tour-note-12/"/>
    <id>http://www.badwolfbay.cn/2017/11/07/go-tour-note-12/</id>
    <published>2017-11-07T01:50:29.000Z</published>
    <updated>2017-11-07T02:40:38.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="goroutine"><a href="#goroutine" class="headerlink" title="goroutine"></a>goroutine</h3><p><code>goroutine</code>是Go运行时环境管理的轻量级线程</p><blockquote><p>go f(x,y,z)</p></blockquote><p>开启一个新的goroutine执行。</p><p><code>f</code>,<code>x</code>,<code>y</code>,<code>z</code>是在当前goroutine中定义的，但是在新的goroutine中运行<code>f</code>。</p><p>goroutine在相同的地址空间中运行，因此访问共享内存必须同步。<code>sync</code>提供了这种可能，不过在Go中并不经常用到，因为还有其他办法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import (</div><div class="line">    &quot;fmt&quot;</div><div class="line">    &quot;time&quot;</div><div class="line">)</div><div class="line"></div><div class="line">func say(s string) &#123;</div><div class="line">    for i:=0; i&lt;5; i++ &#123;</div><div class="line">        time.Sleep(100 * time.Millisecond)</div><div class="line">        fmt.Println(s)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line">    go say(&quot;world&quot;)</div><div class="line">    say(&quot;hello&quot;)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>运行结果,<code>hello</code>和<code>world</code>交替运行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[Running] go run &quot;f:\study\go\smp\src\goroutine.go&quot;</div><div class="line">world</div><div class="line">hello</div><div class="line">hello</div><div class="line">world</div><div class="line">hello</div><div class="line">world</div><div class="line">hello</div><div class="line">world</div><div class="line">world</div><div class="line">hello</div></pre></td></tr></table></figure><a id="more"></a><h3 id="channel"><a href="#channel" class="headerlink" title="channel"></a>channel</h3><p>channel是有类型的管道，可以使用channel操作符<code>&lt;-</code>对齐发送或者接受值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ch &lt;- v //将v送给channel ch</div><div class="line">v := &lt;-ch //从ch接收，并且赋值给v</div></pre></td></tr></table></figure><p>和map与slice一样，使用前必须创建</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ch := make(chan int)</div></pre></td></tr></table></figure><p>默认情况下，在另一端准备好之前，发送和接受都会阻塞。这使得goroutine可以在没有明确的锁或竞态变量的情况下进行同步。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import (</div><div class="line">    &quot;fmt&quot;</div><div class="line">)</div><div class="line"></div><div class="line">func sum(a []int, c chan int) &#123;</div><div class="line">    sum := 0</div><div class="line">    for _, v := range a &#123;</div><div class="line">        sum += v</div><div class="line">    &#125;</div><div class="line">    c &lt;- sum // 将sum送入c</div><div class="line">&#125;</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line">    a := []int&#123;7, 2, 8, -9, 4, 0&#125;</div><div class="line"></div><div class="line">    c := make(chan int)</div><div class="line">    go sum(a[:len(a)/2], c)</div><div class="line">    go sum(a[len(a)/2:], c)</div><div class="line">    x, y := &lt;-c, &lt;-c</div><div class="line"></div><div class="line">    fmt.Println(x, y , x+y)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-5 17 12 或者 17 -5 12</div></pre></td></tr></table></figure><h3 id="缓冲channel"><a href="#缓冲channel" class="headerlink" title="缓冲channel"></a>缓冲channel</h3><p>channel是可以带缓冲的。为<code>make</code>提供第二个参数作为缓冲长度来初始化一个缓冲channel</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ch := make(chan int, 100)</div></pre></td></tr></table></figure><p>向带缓冲的channel发送数据时，只有在缓冲区慢的时候才会发生阻塞。而当缓冲区为空时接受操作会阻塞。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import (</div><div class="line">    &quot;fmt&quot;</div><div class="line">)</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line">    ch := make(chan int, 2)</div><div class="line">    ch &lt;- 1</div><div class="line">    ch &lt;- 2</div><div class="line">    fmt.Println(&lt;-ch)</div><div class="line">    fmt.Println(&lt;-ch)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">1</div><div class="line">2</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;goroutine&quot;&gt;&lt;a href=&quot;#goroutine&quot; class=&quot;headerlink&quot; title=&quot;goroutine&quot;&gt;&lt;/a&gt;goroutine&lt;/h3&gt;&lt;p&gt;&lt;code&gt;goroutine&lt;/code&gt;是Go运行时环境管理的轻量级线程&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;go f(x,y,z)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;开启一个新的goroutine执行。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;f&lt;/code&gt;,&lt;code&gt;x&lt;/code&gt;,&lt;code&gt;y&lt;/code&gt;,&lt;code&gt;z&lt;/code&gt;是在当前goroutine中定义的，但是在新的goroutine中运行&lt;code&gt;f&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;goroutine在相同的地址空间中运行，因此访问共享内存必须同步。&lt;code&gt;sync&lt;/code&gt;提供了这种可能，不过在Go中并不经常用到，因为还有其他办法。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;package main&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;import (&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;quot;fmt&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;quot;time&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;func say(s string) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    for i:=0; i&amp;lt;5; i++ &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        time.Sleep(100 * time.Millisecond)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        fmt.Println(s)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;func main() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    go say(&amp;quot;world&amp;quot;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    say(&amp;quot;hello&amp;quot;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;运行结果,&lt;code&gt;hello&lt;/code&gt;和&lt;code&gt;world&lt;/code&gt;交替运行。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[Running] go run &amp;quot;f:\study\go\smp\src\goroutine.go&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;world&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;hello&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;hello&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;world&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;hello&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;world&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;hello&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;world&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;world&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;hello&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="golang" scheme="http://www.badwolfbay.cn/categories/golang/"/>
    
    
      <category term="go" scheme="http://www.badwolfbay.cn/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>百度Java面试题汇总</title>
    <link href="http://www.badwolfbay.cn/2017/10/26/java-interview/"/>
    <id>http://www.badwolfbay.cn/2017/10/26/java-interview/</id>
    <published>2017-10-26T11:57:27.000Z</published>
    <updated>2017-11-06T05:13:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>简单记录下百度Java面试题</p><ul><li>Java源码使用了哪些设计模式？列举你知道的类/包以及使用模式</li><li>写一个单例模式</li><li>Threadlocal有哪些特点，描述使用场景</li><li>快速排序</li><li>Mysql事务隔离级别(Spring事务隔离级别)</li><li>字符串常量池</li><li>类加载器</li><li>SpringMVC和Struts2有什么区别？(需要跟进新技术，为什么SpringMVC替代Struts2)</li><li>Java，Python和Go三个相比各自有什么优点和缺点(需要自己总结思考)</li><li>网络传输,应用层有哪些协议?(并问了Http头的详细信息)</li><li>设计一个互联网架构</li><li>接上：当访问量多比如秒杀可能的瓶颈在哪里,怎么解决这些瓶颈问题</li><li>数据库怎么读写分离，怎么分库分表</li><li>Java中HashMap的containsKey和containsValue的时间复杂度</li><li>线程池的最大线程数和核心线程数</li><li>Spring事务的处理及回滚机制（事务的一致性）</li><li>JAVA的装饰者模式和IO流</li><li>Mybatis插入的返回值</li><li>Synchrosized的静态方法和普通方法上的区别</li><li>时间复杂度/空间复杂度</li></ul><p>需要自己接下来深入学习JVM，网络层。<br>由底层原理–&gt;架构–&gt;项目/应用/数据/性能</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;简单记录下百度Java面试题&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java源码使用了哪些设计模式？列举你知道的类/包以及使用模式&lt;/li&gt;
&lt;li&gt;写一个单例模式&lt;/li&gt;
&lt;li&gt;Threadlocal有哪些特点，描述使用场景&lt;/li&gt;
&lt;li&gt;快速排序&lt;/li&gt;
&lt;li&gt;Mysq
      
    
    </summary>
    
      <category term="Java" scheme="http://www.badwolfbay.cn/categories/Java/"/>
    
    
      <category term="Java" scheme="http://www.badwolfbay.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Go指南学习笔记十一</title>
    <link href="http://www.badwolfbay.cn/2017/10/25/go-tour-note-11/"/>
    <id>http://www.badwolfbay.cn/2017/10/25/go-tour-note-11/</id>
    <published>2017-10-25T01:10:40.000Z</published>
    <updated>2017-10-25T01:52:40.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h3><p>Go使用<code>error</code>来标识错误状态。<br>同<code>fmt.Stringer</code>一样，<code>error类型</code>也是个内建接口。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">type error interface &#123;</div><div class="line">    Error() string</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>通常函数会返回一个<code>error</code>值，调用它的代码应判断这个错误是否等于<code>nil</code>来进行错误处理。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">i, err := strconv.Atoi(&quot;42&quot;)</div><div class="line"></div><div class="line">if err ！= nil &#123;</div><div class="line">    fmt.Printf(&quot;conldn&apos;t convert number: %v\n&quot;, err)</div><div class="line">    return</div><div class="line">&#125;</div><div class="line">fmt.Printfln(&quot;Converted integer:&quot;, i)</div></pre></td></tr></table></figure><p><code>error</code>为nil时表示成功；非<code>nil</code>的error表示错误</p><a id="more"></a><p>如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import (</div><div class="line">    &quot;fmt&quot;</div><div class="line">    &quot;time&quot;</div><div class="line">)</div><div class="line"></div><div class="line">type MyError struct &#123;</div><div class="line">    When time.Time</div><div class="line">    What string</div><div class="line">&#125;</div><div class="line"></div><div class="line">func (e *MyError) Error() string &#123;</div><div class="line">    return fmt.Sprintf(&quot;at %v, %s&quot;, e.When, e.What)</div><div class="line">&#125;</div><div class="line"></div><div class="line">func run() error &#123;</div><div class="line">    return &amp;MyError&#123;time.Now(), &quot;it didn&apos;t work&quot;,&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line">    if err := run(); err != nil &#123;</div><div class="line">        fmt.Println(err) // </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>运行输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">at 2017-10-25 09:31:30.9208855 +0800 CST, it didn&apos;t work</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;错误&quot;&gt;&lt;a href=&quot;#错误&quot; class=&quot;headerlink&quot; title=&quot;错误&quot;&gt;&lt;/a&gt;错误&lt;/h3&gt;&lt;p&gt;Go使用&lt;code&gt;error&lt;/code&gt;来标识错误状态。&lt;br&gt;同&lt;code&gt;fmt.Stringer&lt;/code&gt;一样，&lt;code&gt;error类型&lt;/code&gt;也是个内建接口。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;type error interface &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Error() string&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通常函数会返回一个&lt;code&gt;error&lt;/code&gt;值，调用它的代码应判断这个错误是否等于&lt;code&gt;nil&lt;/code&gt;来进行错误处理。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;i, err := strconv.Atoi(&amp;quot;42&amp;quot;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;if err ！= nil &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    fmt.Printf(&amp;quot;conldn&amp;apos;t convert number: %v\n&amp;quot;, err)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    return&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;fmt.Printfln(&amp;quot;Converted integer:&amp;quot;, i)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;error&lt;/code&gt;为nil时表示成功；非&lt;code&gt;nil&lt;/code&gt;的error表示错误&lt;/p&gt;
    
    </summary>
    
      <category term="golang" scheme="http://www.badwolfbay.cn/categories/golang/"/>
    
    
      <category term="go" scheme="http://www.badwolfbay.cn/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>非root用户运行docker</title>
    <link href="http://www.badwolfbay.cn/2017/10/13/not-root-run-docker/"/>
    <id>http://www.badwolfbay.cn/2017/10/13/not-root-run-docker/</id>
    <published>2017-10-13T01:31:04.000Z</published>
    <updated>2017-10-13T01:45:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>转载：</p><p>原文出处：</p><blockquote><p><a href="https://notes.wanghao.work/2017-07-11-Docker非Root用户运行.html" target="_blank" rel="external">https://notes.wanghao.work/2017-07-11-Docker非Root用户运行.html</a></p></blockquote><hr><blockquote><p>Docker Engine的Deamon进程是以root权限运行的，如果是普通用户要与之交互，需要使用<code>sudo</code>命令来提权与之交互。之前使用Docker官方的安装脚本安装完成之后，会给出一个提示将当前非root用户添加到doker组之中，以避免每次都需要输入<code>sudo</code>的麻烦。</p></blockquote><p>然而随着Docker版本的迭代和官网的安装方式的更改，现在官方给出的安装方式是添加仓库源地址，然后使用默认的<code>apt</code>或者<code>yum</code>包管理工具来完成后安装。并不再提示用户添加非root用户到组。</p><p>默认情况下，完成Docker Engine的安装之后，Docker将会自动创建一个名为<code>docker</code>的用户组，所以<code>root</code>用户和在<code>docker</code>组中的用户都可以免去<code>sudo</code>来与Docker Engine交互。知道原理之后就简单了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo usermod -aG docker <span class="variable">$&#123;whoami&#125;</span> <span class="comment">#添加当前用户到docker组</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;转载：&lt;/p&gt;
&lt;p&gt;原文出处：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://notes.wanghao.work/2017-07-11-Docker非Root用户运行.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;
      
    
    </summary>
    
      <category term="docker" scheme="http://www.badwolfbay.cn/categories/docker/"/>
    
    
      <category term="docker" scheme="http://www.badwolfbay.cn/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Go指南学习笔记十</title>
    <link href="http://www.badwolfbay.cn/2017/10/12/go-tour-note-10/"/>
    <id>http://www.badwolfbay.cn/2017/10/12/go-tour-note-10/</id>
    <published>2017-10-12T13:15:45.000Z</published>
    <updated>2017-10-12T13:47:07.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Stringers"><a href="#Stringers" class="headerlink" title="Stringers"></a>Stringers</h3><p>普遍存在的接口是<em>fmt</em>包中定义的Stringer</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> Stringer inferface &#123;</div><div class="line">    String() <span class="keyword">string</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Stringer是一个可以用字符串描述自己的类型。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import (</div><div class="line">    &quot;fmt&quot;</div><div class="line">)</div><div class="line"></div><div class="line">type Person struct &#123;</div><div class="line">    Name string</div><div class="line">    Age  int</div><div class="line">&#125;</div><div class="line"></div><div class="line">func (p Person) String() string &#123;</div><div class="line">    return fmt.Sprintf(&quot;%v (%v years)&quot;, p.Name, p.Age)</div><div class="line">&#125;</div><div class="line">func main() &#123;</div><div class="line">    a := Person&#123;&quot;Dent&quot;, 42&#125;</div><div class="line">    z := Person&#123;&quot;Foo&quot;, 90&#125;</div><div class="line">    fmt.Println(a, z) // 输出Dent (42 years) Foo (90 years)</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Stringers&quot;&gt;&lt;a href=&quot;#Stringers&quot; class=&quot;headerlink&quot; title=&quot;Stringers&quot;&gt;&lt;/a&gt;Stringers&lt;/h3&gt;&lt;p&gt;普遍存在的接口是&lt;em&gt;fmt&lt;/em&gt;包中定义的Stringer&lt;/p&gt;
&lt;fig
      
    
    </summary>
    
      <category term="golang" scheme="http://www.badwolfbay.cn/categories/golang/"/>
    
    
      <category term="go" scheme="http://www.badwolfbay.cn/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes网络组件Calico安装</title>
    <link href="http://www.badwolfbay.cn/2017/09/26/calico-install-on-kubernetes/"/>
    <id>http://www.badwolfbay.cn/2017/09/26/calico-install-on-kubernetes/</id>
    <published>2017-09-26T06:43:51.000Z</published>
    <updated>2017-09-27T03:11:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>参照官网地址:</p><blockquote><p><a href="https://docs.projectcalico.org/v2.5/getting-started/kubernetes/installation/integration" target="_blank" rel="external">https://docs.projectcalico.org/v2.5/getting-started/kubernetes/installation/integration</a></p></blockquote><p>Calico组件包括</p><ul><li>calico/node， 必须安装在Master节点和每个计算节点上，包括BGP agent,负责网络策略。</li><li>cni/plugin， 和kubelet交互发现pod。</li><li>calico/policy-controller ,实现kubernetes的Network Policy API.</li></ul><p>本文中安装的calico版本为2.5,对应的组件版本分别为:</p><blockquote><p>calicoctl:v1.5.0<br>cni-plugin:v1.10.0<br>cni:v0.3.0</p></blockquote><h3 id="安装calico-node"><a href="#安装calico-node" class="headerlink" title="安装calico/node"></a>安装calico/node</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ wget https://github.com/projectcalico/calicoctl/releases/download/v1.5.0/calicoctl</div><div class="line"></div><div class="line">$ sudo chmod +x calicoctl</div><div class="line"></div><div class="line">$ mv calicoctl /usr/bin</div></pre></td></tr></table></figure><p>创建calico-node.service</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vi /usr/lib/systemd/system/calico-node.service</div></pre></td></tr></table></figure><p>service的内容，需要将ETCD_ENDPOINTS中地址换成真实的etcd集群地址，可以将node-image中指定所需要的镜像名称，如果不指定，默认为quay.io/calico/node:latest</p><font color="red">下边的命令会导致calio-node一直重启，所以需要换成官网的</font><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">[Unit]</div><div class="line">Description=calicoctl node</div><div class="line">After=docker.service</div><div class="line">Requires=docker.service</div><div class="line"></div><div class="line">[Service]</div><div class="line">User=root</div><div class="line">Environment=ETCD_ENDPOINTS=http://172.21.1.201:2379</div><div class="line">PermissionsStartOnly=true</div><div class="line">ExecStart=/usr/bin/calicoctl node run --node-image=calico/node:v2.5.1</div><div class="line">Restart=always</div><div class="line">RestartSec=10</div><div class="line"></div><div class="line">[Install]</div><div class="line">WantedBy=multi-user.target</div></pre></td></tr></table></figure><p>换成(替换下边的ETCD_ENDPOINTS和ExecStart命令中的镜像名称)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">[Unit]</div><div class="line">Description=calico node</div><div class="line">After=docker.service</div><div class="line">Requires=docker.service</div><div class="line"></div><div class="line">[Service]</div><div class="line">User=root</div><div class="line">Environment=ETCD_ENDPOINTS=http://&lt;ETCD_IP&gt;:&lt;ETCD_PORT&gt;</div><div class="line">PermissionsStartOnly=true</div><div class="line">ExecStart=/usr/bin/docker run --net=host --privileged --name=calico-node \</div><div class="line">  -e ETCD_ENDPOINTS=$&#123;ETCD_ENDPOINTS&#125; \</div><div class="line">  -e NODENAME=$&#123;HOSTNAME&#125; \</div><div class="line">  -e IP= \</div><div class="line">  -e NO_DEFAULT_POOLS= \</div><div class="line">  -e AS= \</div><div class="line">  -e CALICO_LIBNETWORK_ENABLED=true \</div><div class="line">  -e IP6= \</div><div class="line">  -e CALICO_NETWORKING_BACKEND=bird \</div><div class="line">  -e FELIX_DEFAULTENDPOINTTOHOSTACTION=ACCEPT \</div><div class="line">  -v /var/run/calico:/var/run/calico \</div><div class="line">  -v /lib/modules:/lib/modules \</div><div class="line">  -v /run/docker/plugins:/run/docker/plugins \</div><div class="line">  -v /var/run/docker.sock:/var/run/docker.sock \</div><div class="line">  -v /var/log/calico:/var/log/calico \</div><div class="line">  calico/node:v2.5.1</div><div class="line">ExecStop=/usr/bin/docker rm -f calico-node</div><div class="line">Restart=always</div><div class="line">RestartSec=10</div><div class="line"></div><div class="line">[Install]</div><div class="line">WantedBy=multi-user.target</div></pre></td></tr></table></figure><p>启动calico-node服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ systemctl daemon-reload</div><div class="line">$ systemctl start calico-node</div></pre></td></tr></table></figure><p>查看服务启动情况以及容器启动情况</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ systemctl status calico-node</div><div class="line"></div><div class="line">● calico-node.service - calicoctl node</div><div class="line">   Loaded: loaded (/usr/lib/systemd/system/calico-node.service; disabled; vendor preset: disabled)</div><div class="line">   Active: activating (auto-restart) since Tue 2017-09-26 09:57:00 CST; 1s ago</div><div class="line">  Process: 23696 ExecStart=/usr/bin/calicoctl node run --node-image=calico/node:v2.5.1 (code=exited, status=0/SUCCESS)</div><div class="line"> Main PID: 23696 (code=exited, status=0/SUCCESS)</div><div class="line"> </div><div class="line">$ docker ps </div><div class="line"> </div><div class="line"> CONTAINER ID        IMAGE                COMMAND             CREATED             STATUS              PORTS               NAMES</div><div class="line">1cca427ef1a1        calico/node:v2.5.1   &quot;start_runit&quot;       10 seconds ago      Up 9 seconds                            calico-node</div></pre></td></tr></table></figure><a id="more"></a><font color="red">当calico-node的ExecStart配置成calicoctl run命令时会导致服务一直重启，如上表示服务未启动成功，名字为calico-node的容器会一直重启。按照如上所说的修改后，再次查看</font><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">$ systemctl status calico-node</div><div class="line">● calico-node.service - calicoctl node</div><div class="line">   Loaded: loaded (/usr/lib/systemd/system/calico-node.service; disabled; vendor preset: disabled)</div><div class="line">   Active: active (running) since Wed 2017-09-27 10:57:28 CST; 2min 4s ago</div><div class="line">  Process: 21915 ExecStop=/usr/bin/docker rm -f calico-node (code=exited, status=0/SUCCESS)</div><div class="line"> Main PID: 21949 (docker)</div><div class="line">   Memory: 6.6M</div><div class="line">   CGroup: /system.slice/calico-node.service</div><div class="line">           └─21949 /usr/bin/docker run --net=host --privileged --name=calico-node -e ETCD_ENDPOINTS=http://172.21.1.201:2379 -e NODENAME= -e IP= -e NO_DEFAULT_POOLS= -e AS= -e CALICO_LIBNE...</div><div class="line"></div><div class="line">Sep 27 10:57:28 k1 systemd[1]: Started calicoctl node.</div><div class="line">Sep 27 10:57:28 k1 systemd[1]: Starting calicoctl node...</div><div class="line">Sep 27 10:57:28 k1 docker[21949]: Skipping datastore connection <span class="built_in">test</span></div><div class="line">Sep 27 10:57:28 k1 docker[21949]: IPv4 address 172.21.1.200 discovered on interface eth0</div><div class="line">Sep 27 10:57:28 k1 docker[21949]: No AS number configured on node resource, using global value</div><div class="line">Sep 27 10:57:28 k1 docker[21949]: Using node name: k1</div><div class="line">Sep 27 10:57:29 k1 docker[21949]: time=<span class="string">"2017-09-27T02:57:29Z"</span> level=info msg=<span class="string">"Loading config from environment"</span></div><div class="line">Sep 27 10:57:29 k1 docker[21949]: Starting libnetwork service</div><div class="line">Sep 27 10:57:29 k1 docker[21949]: Calico node started successfully</div></pre></td></tr></table></figure><h3 id="安装calico-cni-plugin"><a href="#安装calico-cni-plugin" class="headerlink" title="安装calico/cni-plugin"></a>安装calico/cni-plugin</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ wget https://github.com/projectcalico/cni-plugin/releases/download/v1.10.0/calico</div><div class="line">$ wget https://github.com/projectcalico/cni-plugin/releases/download/v1.10.0/calico-ipam</div><div class="line">$ chmod +x calico calico-ipam</div><div class="line">$ mv calico calico-ipam /usr/bin</div></pre></td></tr></table></figure><p>cni-plugin需要标准的CNI配置文件，创建配置文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">$ mkdir -p /etc/cni/net.d</div><div class="line">$ cat &gt;/etc/cni/net.d/10-calico.conf &lt;&lt;EOF</div><div class="line">&#123;</div><div class="line">    <span class="string">"name"</span>: <span class="string">"calico-k8s-network"</span>,</div><div class="line">    <span class="string">"cniVersion"</span>: <span class="string">"0.1.0"</span>,</div><div class="line">    <span class="string">"type"</span>: <span class="string">"calico"</span>,</div><div class="line">    <span class="string">"etcd_endpoints"</span>: <span class="string">"http://172.21.1.201:2379"</span>,</div><div class="line">    <span class="string">"log_level"</span>: <span class="string">"info"</span>,</div><div class="line">    <span class="string">"ipam"</span>: &#123;</div><div class="line">        <span class="string">"type"</span>: <span class="string">"calico-ipam"</span>,</div><div class="line">        <span class="string">"k8s_api_root"</span>: <span class="string">"http://127.0.0.1:8080"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="string">"policy"</span>: &#123;</div><div class="line">        <span class="string">"type"</span>: <span class="string">"k8s"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="string">"kubernetes"</span>: &#123;</div><div class="line">        <span class="string">"kubeconfig"</span>: <span class="string">"/etc/cni/net.d/calico-kubeconfig"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">EOF</div></pre></td></tr></table></figure><blockquote><p>注意：policy选项为k8s,使用Kubernetes Network Policy来定义网络策略.</p></blockquote><p>这里需要一个<em>calico-kubeconfig</em>的配置文件。在/etc/cni/net.d下创建<br>calico-kubeconfig配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"># Kubeconfig file for Calico CNI plugin.</div><div class="line">apiVersion: v1</div><div class="line">kind: Config</div><div class="line">clusters:</div><div class="line">- name: local</div><div class="line">  cluster:</div><div class="line">    insecure-skip-tls-verify: true</div><div class="line">    server: https://172.21.1.200:8080</div><div class="line">users:</div><div class="line">- name: calico</div><div class="line">contexts:</div><div class="line">- name: calico-context</div><div class="line">  context:</div><div class="line">    cluster: local</div><div class="line">    user: calico</div><div class="line">current-context: calico-context</div></pre></td></tr></table></figure><p>安装CNI plugin</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ wget https://github.com/containernetworking/cni/releases/download/v0.3.0/cni-v0.3.0.tgz</div><div class="line">$ tar -zxvf cni-v0.3.0.tgz</div><div class="line">$ cp loopback /opt/cni/bin/</div></pre></td></tr></table></figure><h3 id="安装calico-networkpolicy-controller"><a href="#安装calico-networkpolicy-controller" class="headerlink" title="安装calico networkpolicy-controller"></a>安装calico networkpolicy-controller</h3><p>创建yaml文件，文件地址下载地址：</p><blockquote><p><a href="https://docs.projectcalico.org/v2.5/getting-started/kubernetes/installation/policy-controller.yaml" target="_blank" rel="external">https://docs.projectcalico.org/v2.5/getting-started/kubernetes/installation/policy-controller.yaml</a></p></blockquote><p>内容如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"># Calico Version v2.5.1</div><div class="line"># https://docs.projectcalico.org/v2.5/releases#v2.5.1</div><div class="line"># This manifest includes the following component versions:</div><div class="line">#   calico/kube-policy-controller:v0.7.0</div><div class="line"></div><div class="line"># Create this manifest using kubectl to deploy</div><div class="line"># the Calico policy controller on Kubernetes.</div><div class="line"># It deploys a single instance of the policy controller.</div><div class="line">apiVersion: extensions/v1beta1</div><div class="line">kind: Deployment</div><div class="line">metadata:</div><div class="line">  name: calico-policy-controller</div><div class="line">  namespace: kube-system</div><div class="line">  labels:</div><div class="line">    k8s-app: calico-policy</div><div class="line">spec:</div><div class="line">  # Only a single instance of the policy controller should be</div><div class="line">  # active at a time.  Since this pod is run as a Deployment,</div><div class="line">  # Kubernetes will ensure the pod is recreated in case of failure,</div><div class="line">  # removing the need for passive backups.</div><div class="line">  replicas: 1</div><div class="line">  strategy:</div><div class="line">    type: Recreate</div><div class="line">  template:</div><div class="line">    metadata:</div><div class="line">      name: calico-policy-controller</div><div class="line">      namespace: kube-system</div><div class="line">      labels:</div><div class="line">        k8s-app: calico-policy</div><div class="line">    spec:</div><div class="line">      hostNetwork: true</div><div class="line">      containers:</div><div class="line">        - name: calico-policy-controller</div><div class="line">          # Make sure to pin this to your desired version.</div><div class="line">          image: quay.io/calico/kube-policy-controller:v0.7.0</div><div class="line">          env:</div><div class="line">            # Configure the policy controller with the location of</div><div class="line">            # your etcd cluster.</div><div class="line">            - name: ETCD_ENDPOINTS</div><div class="line">              value: &quot;&lt;ETCD_ENDPOINTS&gt;&quot;</div><div class="line">            # Location of the Kubernetes API - this shouldn&apos;t need to be</div><div class="line">            # changed so long as it is used in conjunction with</div><div class="line">            # CONFIGURE_ETC_HOSTS=&quot;true&quot;.</div><div class="line">            - name: K8S_API</div><div class="line">              value: &quot;https://kubernetes.default:443&quot;</div><div class="line">            # Configure /etc/hosts within the container to resolve</div><div class="line">            # the kubernetes.default Service to the correct clusterIP</div><div class="line">            # using the environment provided by the kubelet.</div><div class="line">            # This removes the need for KubeDNS to resolve the Service.</div><div class="line">            - name: CONFIGURE_ETC_HOSTS</div><div class="line">              value: &quot;true&quot;</div></pre></td></tr></table></figure></p><p>需要修改3处地址：<br><strong>image</strong>(镜像名称),<strong>ETCD_ENDPOINTS</strong>(ETCD地址),<strong>K8S_API</strong>(kubenetes 的API地址)</p><h3 id="修改kubelet"><a href="#修改kubelet" class="headerlink" title="修改kubelet"></a>修改kubelet</h3><p>需要将kubelet中的网络指定为calico ,修改/usr/lib/system.d/system/kubelet.service，加入如下参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">--network-plugin=cni</div><div class="line">--cni-conf-dir=/etc/cni/net.d</div><div class="line">--cni-bin-dir=/opt/cni/bin</div></pre></td></tr></table></figure><blockquote><p>注意：kubernetes1.4版本之前不支持<em>cni-conf-dir</em>和<em>cni-bin-dir</em>参数。替换成<em>–network-plugin-dir=/etc/cni/net.d</em></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参照官网地址:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.projectcalico.org/v2.5/getting-started/kubernetes/installation/integration&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://docs.projectcalico.org/v2.5/getting-started/kubernetes/installation/integration&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Calico组件包括&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;calico/node， 必须安装在Master节点和每个计算节点上，包括BGP agent,负责网络策略。&lt;/li&gt;
&lt;li&gt;cni/plugin， 和kubelet交互发现pod。&lt;/li&gt;
&lt;li&gt;calico/policy-controller ,实现kubernetes的Network Policy API.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本文中安装的calico版本为2.5,对应的组件版本分别为:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;calicoctl:v1.5.0&lt;br&gt;cni-plugin:v1.10.0&lt;br&gt;cni:v0.3.0&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;安装calico-node&quot;&gt;&lt;a href=&quot;#安装calico-node&quot; class=&quot;headerlink&quot; title=&quot;安装calico/node&quot;&gt;&lt;/a&gt;安装calico/node&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ wget https://github.com/projectcalico/calicoctl/releases/download/v1.5.0/calicoctl&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ sudo chmod +x calicoctl&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ mv calicoctl /usr/bin&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;创建calico-node.service&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ vi /usr/lib/systemd/system/calico-node.service&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;service的内容，需要将ETCD_ENDPOINTS中地址换成真实的etcd集群地址，可以将node-image中指定所需要的镜像名称，如果不指定，默认为quay.io/calico/node:latest&lt;/p&gt;
&lt;font color=&quot;red&quot;&gt;下边的命令会导致calio-node一直重启，所以需要换成官网的&lt;/font&gt;

&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[Unit]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Description=calicoctl node&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;After=docker.service&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Requires=docker.service&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[Service]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;User=root&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Environment=ETCD_ENDPOINTS=http://172.21.1.201:2379&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;PermissionsStartOnly=true&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ExecStart=/usr/bin/calicoctl node run --node-image=calico/node:v2.5.1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Restart=always&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;RestartSec=10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[Install]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;WantedBy=multi-user.target&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;换成(替换下边的ETCD_ENDPOINTS和ExecStart命令中的镜像名称)&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[Unit]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Description=calico node&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;After=docker.service&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Requires=docker.service&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[Service]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;User=root&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Environment=ETCD_ENDPOINTS=http://&amp;lt;ETCD_IP&amp;gt;:&amp;lt;ETCD_PORT&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;PermissionsStartOnly=true&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ExecStart=/usr/bin/docker run --net=host --privileged --name=calico-node \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  -e ETCD_ENDPOINTS=$&amp;#123;ETCD_ENDPOINTS&amp;#125; \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  -e NODENAME=$&amp;#123;HOSTNAME&amp;#125; \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  -e IP= \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  -e NO_DEFAULT_POOLS= \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  -e AS= \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  -e CALICO_LIBNETWORK_ENABLED=true \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  -e IP6= \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  -e CALICO_NETWORKING_BACKEND=bird \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  -e FELIX_DEFAULTENDPOINTTOHOSTACTION=ACCEPT \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  -v /var/run/calico:/var/run/calico \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  -v /lib/modules:/lib/modules \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  -v /run/docker/plugins:/run/docker/plugins \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  -v /var/run/docker.sock:/var/run/docker.sock \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  -v /var/log/calico:/var/log/calico \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  calico/node:v2.5.1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ExecStop=/usr/bin/docker rm -f calico-node&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Restart=always&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;RestartSec=10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[Install]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;WantedBy=multi-user.target&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;启动calico-node服务&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ systemctl daemon-reload&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ systemctl start calico-node&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;查看服务启动情况以及容器启动情况&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ systemctl status calico-node&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;● calico-node.service - calicoctl node&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   Loaded: loaded (/usr/lib/systemd/system/calico-node.service; disabled; vendor preset: disabled)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   Active: activating (auto-restart) since Tue 2017-09-26 09:57:00 CST; 1s ago&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  Process: 23696 ExecStart=/usr/bin/calicoctl node run --node-image=calico/node:v2.5.1 (code=exited, status=0/SUCCESS)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; Main PID: 23696 (code=exited, status=0/SUCCESS)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ docker ps &lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt; CONTAINER ID        IMAGE                COMMAND             CREATED             STATUS              PORTS               NAMES&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;1cca427ef1a1        calico/node:v2.5.1   &amp;quot;start_runit&amp;quot;       10 seconds ago      Up 9 seconds                            calico-node&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="docker" scheme="http://www.badwolfbay.cn/categories/docker/"/>
    
    
      <category term="docker" scheme="http://www.badwolfbay.cn/tags/docker/"/>
    
      <category term="kubernetes" scheme="http://www.badwolfbay.cn/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes上部署fluentd采集日志</title>
    <link href="http://www.badwolfbay.cn/2017/09/25/kubernetes-fluentd/"/>
    <id>http://www.badwolfbay.cn/2017/09/25/kubernetes-fluentd/</id>
    <published>2017-09-25T14:29:31.000Z</published>
    <updated>2017-09-25T15:01:40.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装es集群"><a href="#安装es集群" class="headerlink" title="安装es集群"></a>安装es集群</h3><p>假设es集群在k8s集群外,不要使用root用户。这里安装的版本是2.4.0</p><blockquote><p>tar -zxvf elasticsearch-2.4.0.tar.gz</p></blockquote><p>修改config文件夹下的elasticsearch.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="string">cluster.name:</span> <span class="string">elk_cluster</span></div><div class="line"><span class="string">node.name:</span> <span class="string">elk_node01</span></div><div class="line"><span class="string">path.data:</span> <span class="string">/csdbomc/elasticsearch-2.4.0/data</span></div><div class="line"><span class="string">path.logs:</span> <span class="string">/csdbomc/elasticsearch-2.4.0/logs</span></div><div class="line"><span class="string">network.host:</span> <span class="number">172.21</span><span class="number">.0</span><span class="number">.201</span></div><div class="line"><span class="string">network.port:</span> <span class="number">9201</span></div><div class="line"><span class="string">http.cors.enabled</span> <span class="string">:</span> <span class="literal">true</span> <span class="string">//</span></div><div class="line"><span class="string">http.cors.allow-origin:</span> <span class="string">"/.*/"</span></div><div class="line"><span class="string">http.cors.allow-methods</span> <span class="string">:</span> <span class="string">OPTIONS,</span> <span class="string">HEAD,</span> <span class="string">GET,</span> <span class="string">POST,</span> <span class="string">PUT,</span> <span class="string">DELETE</span></div><div class="line"><span class="string">http.cors.allow-headers</span> <span class="string">:</span> <span class="string">"X-Requested-With,X-Auth-Token,Content-Type, Content-Length, Authorization"</span></div></pre></td></tr></table></figure><p>到bin目录下执行（需要提前安装java）</p><blockquote><p>./elasticsearch -d</p></blockquote><h3 id="制作fluent镜像"><a href="#制作fluent镜像" class="headerlink" title="制作fluent镜像"></a>制作fluent镜像</h3><p>Dockerfile内容如下:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">FROM</span>  badwolf/fluentd-es-image</div><div class="line"></div><div class="line"><span class="comment"># Ensure there are enough file descriptors for running Fluentd.</span></div><div class="line"><span class="comment">#RUN ulimit -n 65536</span></div><div class="line"></div><div class="line"><span class="comment"># Disable prompts from apt.</span></div><div class="line"></div><div class="line"><span class="comment"># Copy the Fluentd configuration file.</span></div><div class="line"><span class="keyword">COPY</span><span class="bash"> td-agent.conf /etc/td-agent/td-agent.conf</span></div><div class="line"><span class="bash"></span></div><div class="line"><span class="bash"></span></div><div class="line"><span class="bash">ENV LD_PRELOAD /opt/td-agent/embedded/lib/libjemalloc.so</span></div><div class="line"><span class="bash"></span></div><div class="line"><span class="bash"><span class="comment"># Run the Fluentd service.</span></span></div><div class="line"><span class="bash">ENTRYPOINT [<span class="string">"td-agent"</span>]</span></div></pre></td></tr></table></figure><a id="more"></a><p>td-agent.conf的内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># This configuration file for Fluentd / td-agent is used</span></div><div class="line"><span class="comment"># to watch changes to Docker log files. The kubelet creates symlinks that</span></div><div class="line"><span class="comment"># capture the pod name, namespace, container name &amp; Docker container ID</span></div><div class="line"><span class="comment"># to the docker logs for pods in the /var/log/containers directory on the host.</span></div><div class="line"><span class="comment"># If running this fluentd configuration in a Docker container, the /var/log</span></div><div class="line"><span class="comment"># directory should be mounted in the container.</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># These logs are then submitted to Elasticsearch which assumes the</span></div><div class="line"><span class="comment"># installation of the fluent-plugin-elasticsearch &amp; the</span></div><div class="line"><span class="comment"># fluent-plugin-kubernetes_metadata_filter plugins.</span></div><div class="line"><span class="comment"># See https://github.com/uken/fluent-plugin-elasticsearch &amp;</span></div><div class="line"><span class="comment"># https://github.com/fabric8io/fluent-plugin-kubernetes_metadata_filter for</span></div><div class="line"><span class="comment"># more information about the plugins.</span></div><div class="line"><span class="comment"># Maintainer: Jimmi Dyson &lt;jimmidyson@gmail.com&gt;</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Example</span></div><div class="line"><span class="comment"># =======</span></div><div class="line"><span class="comment"># A line in the Docker log file might look like this JSON:</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># &#123;"log":"2014/09/25 21:15:03 Got request with path wombat\n",</span></div><div class="line"><span class="comment">#  "stream":"stderr",</span></div><div class="line"><span class="comment">#   "time":"2014-09-25T21:15:03.499185026Z"&#125;</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># The time_format specification below makes sure we properly</span></div><div class="line"><span class="comment"># parse the time format produced by Docker. This will be</span></div><div class="line"><span class="comment"># submitted to Elasticsearch and should appear like:</span></div><div class="line"><span class="comment"># $ curl 'http://elasticsearch-logging:9200/_search?pretty'</span></div><div class="line"><span class="comment"># ...</span></div><div class="line"><span class="comment"># &#123;</span></div><div class="line"><span class="comment">#      "_index" : "logstash-2014.09.25",</span></div><div class="line"><span class="comment">#      "_type" : "fluentd",</span></div><div class="line"><span class="comment">#      "_id" : "VBrbor2QTuGpsQyTCdfzqA",</span></div><div class="line"><span class="comment">#      "_score" : 1.0,</span></div><div class="line"><span class="comment">#      "_source":&#123;"log":"2014/09/25 22:45:50 Got request with path wombat\n",</span></div><div class="line"><span class="comment">#                 "stream":"stderr","tag":"docker.container.all",</span></div><div class="line"><span class="comment">#                 "@timestamp":"2014-09-25T22:45:50+00:00"&#125;</span></div><div class="line"><span class="comment">#    &#125;,</span></div><div class="line"><span class="comment"># ...</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># The Kubernetes fluentd plugin is used to write the Kubernetes metadata to the log</span></div><div class="line"><span class="comment"># record &amp; add labels to the log record if properly configured. This enables users</span></div><div class="line"><span class="comment"># to filter &amp; search logs on any metadata.</span></div><div class="line"><span class="comment"># For example a Docker container's logs might be in the directory:</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment">#  /var/lib/docker/containers/997599971ee6366d4a5920d25b79286ad45ff37a74494f262e3bc98d909d0a7b</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># and in the file:</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment">#  997599971ee6366d4a5920d25b79286ad45ff37a74494f262e3bc98d909d0a7b-json.log</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># where 997599971ee6... is the Docker ID of the running container.</span></div><div class="line"><span class="comment"># The Kubernetes kubelet makes a symbolic link to this file on the host machine</span></div><div class="line"><span class="comment"># in the /var/log/containers directory which includes the pod name and the Kubernetes</span></div><div class="line"><span class="comment"># container name:</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment">#    synthetic-logger-0.25lps-pod_default_synth-lgr-997599971ee6366d4a5920d25b79286ad45ff37a74494f262e3bc98d909d0a7b.log</span></div><div class="line"><span class="comment">#    -&gt;</span></div><div class="line"><span class="comment">#    /var/lib/docker/containers/997599971ee6366d4a5920d25b79286ad45ff37a74494f262e3bc98d909d0a7b/997599971ee6366d4a5920d25b79286ad45ff37a74494f262e3bc98d909d0a7b-json.log</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># The /var/log directory on the host is mapped to the /var/log directory in the container</span></div><div class="line"><span class="comment"># running this instance of Fluentd and we end up collecting the file:</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment">#   /var/log/containers/synthetic-logger-0.25lps-pod_default_synth-lgr-997599971ee6366d4a5920d25b79286ad45ff37a74494f262e3bc98d909d0a7b.log</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># This results in the tag:</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment">#  var.log.containers.synthetic-logger-0.25lps-pod_default_synth-lgr-997599971ee6366d4a5920d25b79286ad45ff37a74494f262e3bc98d909d0a7b.log</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># The Kubernetes fluentd plugin is used to extract the namespace, pod name &amp; container name</span></div><div class="line"><span class="comment"># which are added to the log message as a kubernetes field object &amp; the Docker container ID</span></div><div class="line"><span class="comment"># is also added under the docker field object.</span></div><div class="line"><span class="comment"># The final tag is:</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment">#   kubernetes.var.log.containers.synthetic-logger-0.25lps-pod_default_synth-lgr-997599971ee6366d4a5920d25b79286ad45ff37a74494f262e3bc98d909d0a7b.log</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># And the final log record look like:</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># &#123;</span></div><div class="line"><span class="comment">#   "log":"2014/09/25 21:15:03 Got request with path wombat\n",</span></div><div class="line"><span class="comment">#   "stream":"stderr",</span></div><div class="line"><span class="comment">#   "time":"2014-09-25T21:15:03.499185026Z",</span></div><div class="line"><span class="comment">#   "kubernetes": &#123;</span></div><div class="line"><span class="comment">#     "namespace": "default",</span></div><div class="line"><span class="comment">#     "pod_name": "synthetic-logger-0.25lps-pod",</span></div><div class="line"><span class="comment">#     "container_name": "synth-lgr"</span></div><div class="line"><span class="comment">#   &#125;,</span></div><div class="line"><span class="comment">#   "docker": &#123;</span></div><div class="line"><span class="comment">#     "container_id": "997599971ee6366d4a5920d25b79286ad45ff37a74494f262e3bc98d909d0a7b"</span></div><div class="line"><span class="comment">#   &#125;</span></div><div class="line"><span class="comment"># &#125;</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># This makes it easier for users to search for logs by pod name or by</span></div><div class="line"><span class="comment"># the name of the Kubernetes container regardless of how many times the</span></div><div class="line"><span class="comment"># Kubernetes pod has been restarted (resulting in a several Docker container IDs).</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># <span class="doctag">TODO:</span> Propagate the labels associated with a container along with its logs</span></div><div class="line"><span class="comment"># so users can query logs using labels as well as or instead of the pod name</span></div><div class="line"><span class="comment"># and container name. This is simply done via configuration of the Kubernetes</span></div><div class="line"><span class="comment"># fluentd plugin but requires secrets to be enabled in the fluent pod. This is a</span></div><div class="line"><span class="comment"># problem yet to be solved as secrets are not usable in static pods which the fluentd</span></div><div class="line"><span class="comment"># pod must be until a per-node controller is available in Kubernetes.</span></div><div class="line"></div><div class="line"><span class="comment"># Prevent fluentd from handling records containing its own logs. Otherwise</span></div><div class="line"><span class="comment"># it can lead to an infinite loop, when error in sending one message generates</span></div><div class="line"><span class="comment"># another message which also fails to be sent and so on.</span></div><div class="line">&lt;match fluent.**&gt;</div><div class="line">  <span class="built_in">type</span> null</div><div class="line">&lt;/match&gt;</div><div class="line"></div><div class="line"><span class="comment"># Example:</span></div><div class="line"><span class="comment"># &#123;"log":"[info:2016-02-16T16:04:05.930-08:00] Some log text here\n","stream":"stdout","time":"2016-02-17T00:04:05.931087621Z"&#125;</span></div><div class="line">&lt;<span class="built_in">source</span>&gt;</div><div class="line">  <span class="built_in">type</span> tail</div><div class="line">  path /var/<span class="built_in">log</span>/containers/*.<span class="built_in">log</span></div><div class="line">  pos_file /var/<span class="built_in">log</span>/es-containers.log.pos</div><div class="line">  time_format %Y-%m-%dT%H:%M:%S.%NZ</div><div class="line">  tag kubernetes.*</div><div class="line">  format json</div><div class="line">  read_from_head <span class="literal">true</span></div><div class="line">&lt;/<span class="built_in">source</span>&gt;</div><div class="line"></div><div class="line"><span class="comment"># Example:</span></div><div class="line"><span class="comment"># 2015-12-21 23:17:22,066 [salt.state       ][INFO    ] Completed state [net.ipv4.ip_forward] at time 23:17:22.066081</span></div><div class="line">&lt;<span class="built_in">source</span>&gt;</div><div class="line">  <span class="built_in">type</span> tail</div><div class="line">  format /^(?&lt;time&gt;[^ ]* [^ ,]*)[^\[]*\[[^\]]*\]\[(?&lt;severity&gt;[^ \]]*) *\] (?&lt;message&gt;.*)$/</div><div class="line">  time_format %Y-%m-%d %H:%M:%S</div><div class="line">  path /var/<span class="built_in">log</span>/salt/minion</div><div class="line">  pos_file /var/<span class="built_in">log</span>/es-salt.pos</div><div class="line">  tag salt</div><div class="line">&lt;/<span class="built_in">source</span>&gt;</div><div class="line"></div><div class="line"><span class="comment"># Example:</span></div><div class="line"><span class="comment"># Dec 21 23:17:22 gke-foo-1-1-4b5cbd14-node-4eoj startupscript: Finished running startup script /var/run/google.startup.script</span></div><div class="line">&lt;<span class="built_in">source</span>&gt;</div><div class="line">  <span class="built_in">type</span> tail</div><div class="line">  format syslog</div><div class="line">  path /var/<span class="built_in">log</span>/startupscript.log</div><div class="line">  pos_file /var/<span class="built_in">log</span>/es-startupscript.log.pos</div><div class="line">  tag startupscript</div><div class="line">&lt;/<span class="built_in">source</span>&gt;</div><div class="line"></div><div class="line"><span class="comment"># Examples:</span></div><div class="line"><span class="comment"># time="2016-02-04T06:51:03.053580605Z" level=info msg="GET /containers/json"</span></div><div class="line"><span class="comment"># time="2016-02-04T07:53:57.505612354Z" level=error msg="HTTP Error" err="No such image: -f" statusCode=404</span></div><div class="line">&lt;<span class="built_in">source</span>&gt;</div><div class="line">  <span class="built_in">type</span> tail</div><div class="line">  format /^time=<span class="string">"(?&lt;time&gt;[^)]*)"</span> level=(?&lt;severity&gt;[^ ]*) msg=<span class="string">"(?&lt;message&gt;[^"</span>]*)<span class="string">"( err="</span>(?&lt;error&gt;[^<span class="string">"]*)"</span>)?( statusCode=($&lt;status_code&gt;\d+))?/</div><div class="line">  path /var/<span class="built_in">log</span>/docker.log</div><div class="line">  pos_file /var/<span class="built_in">log</span>/es-docker.log.pos</div><div class="line">  tag docker</div><div class="line">&lt;/<span class="built_in">source</span>&gt;</div><div class="line"></div><div class="line"><span class="comment"># Example:</span></div><div class="line"><span class="comment"># 2016/02/04 06:52:38 filePurge: successfully removed file /var/etcd/data/member/wal/00000000000006d0-00000000010a23d1.wal</span></div><div class="line">&lt;<span class="built_in">source</span>&gt;</div><div class="line">  <span class="built_in">type</span> tail</div><div class="line">  <span class="comment"># Not parsing this, because it doesn't have anything particularly useful to</span></div><div class="line">  <span class="comment"># parse out of it (like severities).</span></div><div class="line">  format none</div><div class="line">  path /var/<span class="built_in">log</span>/etcd.log</div><div class="line">  pos_file /var/<span class="built_in">log</span>/es-etcd.log.pos</div><div class="line">  tag etcd</div><div class="line">&lt;/<span class="built_in">source</span>&gt;</div><div class="line"></div><div class="line"><span class="comment"># Multi-line parsing is required for all the kube logs because very large log</span></div><div class="line"><span class="comment"># statements, such as those that include entire object bodies, get split into</span></div><div class="line"><span class="comment"># multiple lines by glog.</span></div><div class="line"></div><div class="line"><span class="comment"># Example:</span></div><div class="line"><span class="comment"># I0204 07:32:30.020537    3368 server.go:1048] POST /stats/container/: (13.972191ms) 200 [[Go-http-client/1.1] 10.244.1.3:40537]</span></div><div class="line">&lt;<span class="built_in">source</span>&gt;</div><div class="line">  <span class="built_in">type</span> tail</div><div class="line">  format multiline</div><div class="line">  multiline_flush_interval 5s</div><div class="line">  format_firstline /^\w\d&#123;4&#125;/</div><div class="line">  format1 /^(?&lt;severity&gt;\w)(?&lt;time&gt;\d&#123;4&#125; [^\s]*)\s+(?&lt;pid&gt;\d+)\s+(?&lt;<span class="built_in">source</span>&gt;[^ \]]+)\] (?&lt;message&gt;.*)/</div><div class="line">  time_format %m%d %H:%M:%S.%N</div><div class="line">  path /var/<span class="built_in">log</span>/kubelet.log</div><div class="line">  pos_file /var/<span class="built_in">log</span>/es-kubelet.log.pos</div><div class="line">  tag kubelet</div><div class="line">&lt;/<span class="built_in">source</span>&gt;</div><div class="line"></div><div class="line"><span class="comment"># Example:</span></div><div class="line"><span class="comment"># I1118 21:26:53.975789       6 proxier.go:1096] Port "nodePort for kube-system/default-http-backend:http" (:31429/tcp) was open before and is still needed</span></div><div class="line">&lt;<span class="built_in">source</span>&gt;</div><div class="line">  <span class="built_in">type</span> tail</div><div class="line">  format multiline</div><div class="line">  multiline_flush_interval 5s</div><div class="line">  format_firstline /^\w\d&#123;4&#125;/</div><div class="line">  format1 /^(?&lt;severity&gt;\w)(?&lt;time&gt;\d&#123;4&#125; [^\s]*)\s+(?&lt;pid&gt;\d+)\s+(?&lt;<span class="built_in">source</span>&gt;[^ \]]+)\] (?&lt;message&gt;.*)/</div><div class="line">  time_format %m%d %H:%M:%S.%N</div><div class="line">  path /var/<span class="built_in">log</span>/kube-proxy.log</div><div class="line">  pos_file /var/<span class="built_in">log</span>/es-kube-proxy.log.pos</div><div class="line">  tag kube-proxy</div><div class="line">&lt;/<span class="built_in">source</span>&gt;</div><div class="line"></div><div class="line"><span class="comment"># Example:</span></div><div class="line"><span class="comment"># I0204 07:00:19.604280       5 handlers.go:131] GET /api/v1/nodes: (1.624207ms) 200 [[kube-controller-manager/v1.1.3 (linux/amd64) kubernetes/6a81b50] 127.0.0.1:38266]</span></div><div class="line">&lt;<span class="built_in">source</span>&gt;</div><div class="line">  <span class="built_in">type</span> tail</div><div class="line">  format multiline</div><div class="line">  multiline_flush_interval 5s</div><div class="line">  format_firstline /^\w\d&#123;4&#125;/</div><div class="line">  format1 /^(?&lt;severity&gt;\w)(?&lt;time&gt;\d&#123;4&#125; [^\s]*)\s+(?&lt;pid&gt;\d+)\s+(?&lt;<span class="built_in">source</span>&gt;[^ \]]+)\] (?&lt;message&gt;.*)/</div><div class="line">  time_format %m%d %H:%M:%S.%N</div><div class="line">  path /var/<span class="built_in">log</span>/kube-apiserver.log</div><div class="line">  pos_file /var/<span class="built_in">log</span>/es-kube-apiserver.log.pos</div><div class="line">  tag kube-apiserver</div><div class="line">&lt;/<span class="built_in">source</span>&gt;</div><div class="line"></div><div class="line"><span class="comment"># Example:</span></div><div class="line"><span class="comment"># I0204 06:55:31.872680       5 servicecontroller.go:277] LB already exists and doesn't need update for service kube-system/kube-ui</span></div><div class="line">&lt;<span class="built_in">source</span>&gt;</div><div class="line">  <span class="built_in">type</span> tail</div><div class="line">  format multiline</div><div class="line">  multiline_flush_interval 5s</div><div class="line">  format_firstline /^\w\d&#123;4&#125;/</div><div class="line">  format1 /^(?&lt;severity&gt;\w)(?&lt;time&gt;\d&#123;4&#125; [^\s]*)\s+(?&lt;pid&gt;\d+)\s+(?&lt;<span class="built_in">source</span>&gt;[^ \]]+)\] (?&lt;message&gt;.*)/</div><div class="line">  time_format %m%d %H:%M:%S.%N</div><div class="line">  path /var/<span class="built_in">log</span>/kube-controller-manager.log</div><div class="line">  pos_file /var/<span class="built_in">log</span>/es-kube-controller-manager.log.pos</div><div class="line">  tag kube-controller-manager</div><div class="line">&lt;/<span class="built_in">source</span>&gt;</div><div class="line"></div><div class="line"><span class="comment"># Example:</span></div><div class="line"><span class="comment"># W0204 06:49:18.239674       7 reflector.go:245] pkg/scheduler/factory/factory.go:193: watch of *api.Service ended with: 401: The event in requested index is outdated and cleared (</span></div><div class="line">the requested <span class="built_in">history</span> has been cleared [2578313/2577886]) [2579312]</div><div class="line">&lt;<span class="built_in">source</span>&gt;</div><div class="line">  <span class="built_in">type</span> tail</div><div class="line">  format multiline</div><div class="line">  multiline_flush_interval 5s</div><div class="line">  format_firstline /^\w\d&#123;4&#125;/</div><div class="line">  format1 /^(?&lt;severity&gt;\w)(?&lt;time&gt;\d&#123;4&#125; [^\s]*)\s+(?&lt;pid&gt;\d+)\s+(?&lt;<span class="built_in">source</span>&gt;[^ \]]+)\] (?&lt;message&gt;.*)/</div><div class="line">  time_format %m%d %H:%M:%S.%N</div><div class="line">  path /var/<span class="built_in">log</span>/kube-scheduler.log</div><div class="line">  pos_file /var/<span class="built_in">log</span>/es-kube-scheduler.log.pos</div><div class="line">  tag kube-scheduler</div><div class="line">&lt;/<span class="built_in">source</span>&gt;</div><div class="line"></div><div class="line"><span class="comment"># Example:</span></div><div class="line"><span class="comment"># I1104 10:36:20.242766       5 rescheduler.go:73] Running Rescheduler</span></div><div class="line">&lt;<span class="built_in">source</span>&gt;</div><div class="line">  <span class="built_in">type</span> tail</div><div class="line">  format multiline</div><div class="line">  multiline_flush_interval 5s</div><div class="line">  format_firstline /^\w\d&#123;4&#125;/</div><div class="line">  format1 /^(?&lt;severity&gt;\w)(?&lt;time&gt;\d&#123;4&#125; [^\s]*)\s+(?&lt;pid&gt;\d+)\s+(?&lt;<span class="built_in">source</span>&gt;[^ \]]+)\] (?&lt;message&gt;.*)/</div><div class="line">  time_format %m%d %H:%M:%S.%N</div><div class="line">  path /var/<span class="built_in">log</span>/rescheduler.log</div><div class="line">  pos_file /var/<span class="built_in">log</span>/es-rescheduler.log.pos</div><div class="line">  tag rescheduler</div><div class="line">&lt;/<span class="built_in">source</span>&gt;</div><div class="line"></div><div class="line"><span class="comment"># Example:</span></div><div class="line"><span class="comment"># I0603 15:31:05.793605       6 cluster_manager.go:230] Reading config from path /etc/gce.conf</span></div><div class="line">&lt;<span class="built_in">source</span>&gt;</div><div class="line">  <span class="built_in">type</span> tail</div><div class="line">  format multiline</div><div class="line">  multiline_flush_interval 5s</div><div class="line">  format_firstline /^\w\d&#123;4&#125;/</div><div class="line">  format1 /^(?&lt;severity&gt;\w)(?&lt;time&gt;\d&#123;4&#125; [^\s]*)\s+(?&lt;pid&gt;\d+)\s+(?&lt;<span class="built_in">source</span>&gt;[^ \]]+)\] (?&lt;message&gt;.*)/</div><div class="line">  time_format %m%d %H:%M:%S.%N</div><div class="line">  path /var/<span class="built_in">log</span>/glbc.log</div><div class="line">  pos_file /var/<span class="built_in">log</span>/es-glbc.log.pos</div><div class="line">  tag glbc</div><div class="line">&lt;/<span class="built_in">source</span>&gt;</div><div class="line"></div><div class="line"><span class="comment"># Example:</span></div><div class="line"><span class="comment"># I0603 15:31:05.793605       6 cluster_manager.go:230] Reading config from path /etc/gce.conf</span></div><div class="line">&lt;<span class="built_in">source</span>&gt;</div><div class="line">  <span class="built_in">type</span> tail</div><div class="line">  format multiline</div><div class="line">  multiline_flush_interval 5s</div><div class="line">  format_firstline /^\w\d&#123;4&#125;/</div><div class="line">  format1 /^(?&lt;severity&gt;\w)(?&lt;time&gt;\d&#123;4&#125; [^\s]*)\s+(?&lt;pid&gt;\d+)\s+(?&lt;<span class="built_in">source</span>&gt;[^ \]]+)\] (?&lt;message&gt;.*)/</div><div class="line">  time_format %m%d %H:%M:%S.%N</div><div class="line">  path /var/<span class="built_in">log</span>/cluster-autoscaler.log</div><div class="line">  pos_file /var/<span class="built_in">log</span>/es-cluster-autoscaler.log.pos</div><div class="line">  tag cluster-autoscaler</div><div class="line">&lt;/<span class="built_in">source</span>&gt;</div><div class="line"></div><div class="line">&lt;filter kubernetes.**&gt;</div><div class="line">  <span class="built_in">type</span> kubernetes_metadata</div><div class="line">  kubernetes_url http://172.21.1.200:8080</div><div class="line">&lt;/filter&gt;</div><div class="line"></div><div class="line">&lt;match **&gt;</div><div class="line">   <span class="built_in">type</span> elasticsearch</div><div class="line">   log_level info</div><div class="line">   include_tag_key <span class="literal">true</span></div><div class="line">   host 172.21.2.40</div><div class="line">   port 9211</div><div class="line">   logstash_format <span class="literal">true</span></div><div class="line">   <span class="comment"># Set the chunk limit the same as for fluentd-gcp.</span></div><div class="line">   buffer_chunk_limit 2M</div><div class="line">   <span class="comment"># Cap buffer memory usage to 2MiB/chunk * 32 chunks = 64 MiB</span></div><div class="line">   buffer_queue_limit 32</div><div class="line">   flush_interval 5s</div><div class="line">   <span class="comment"># Never wait longer than 5 minutes between retries.</span></div><div class="line">   max_retry_wait 30</div><div class="line">   <span class="comment"># Disable the limit on the number of retries (retry forever).</span></div><div class="line">   disable_retry_limit</div><div class="line">   <span class="comment"># Use multiple threads for processing.</span></div><div class="line">   num_threads 8</div><div class="line">&lt;/match&gt;</div></pre></td></tr></table></figure><p>修改其中的kubernetes_url地址为kubernetes的master节点地址<br>修改host,port分别为es的地址和端口</p><h3 id="部署fluent镜像"><a href="#部署fluent镜像" class="headerlink" title="部署fluent镜像"></a>部署fluent镜像</h3><p>使用daemonset部署fluent可以使得fluent在每台主机上部署一个POD</p><blockquote><p>cat fluentd-es.yaml</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></div><div class="line"><span class="attr">kind:</span> <span class="string">DaemonSet</span></div><div class="line"><span class="attr">metadata:</span></div><div class="line"><span class="attr">  name:</span> <span class="string">fluentd-es</span></div><div class="line"><span class="attr">  namespace:</span> <span class="string">kube-system</span></div><div class="line"><span class="attr">  labels:</span></div><div class="line"><span class="attr">    k8s-app:</span> <span class="string">fluentd-es</span></div><div class="line"><span class="attr">spec:</span></div><div class="line"><span class="attr">  template:</span></div><div class="line"><span class="attr">    metadata:</span></div><div class="line"><span class="attr">      labels:</span></div><div class="line"><span class="attr">        k8s-app:</span> <span class="string">fluentd-es</span></div><div class="line"><span class="attr">    spec:</span></div><div class="line"><span class="attr">      containers:</span></div><div class="line"><span class="attr">      - name:</span> <span class="string">fluentd-es</span></div><div class="line"><span class="attr">        image:</span> <span class="number">172.21</span><span class="number">.3</span><span class="number">.106</span><span class="string">:5000/fluentd-es</span></div><div class="line"><span class="attr">        resources:</span></div><div class="line"><span class="attr">          limits:</span></div><div class="line"><span class="attr">            memory:</span> <span class="number">200</span><span class="string">Mi</span></div><div class="line"><span class="attr">          requests:</span></div><div class="line"><span class="attr">            cpu:</span> <span class="number">250</span><span class="string">m</span></div><div class="line"><span class="attr">            memory:</span> <span class="number">200</span><span class="string">Mi</span></div><div class="line"><span class="attr">        volumeMounts:</span></div><div class="line"><span class="attr">        - name:</span> <span class="string">varlog</span></div><div class="line"><span class="attr">          mountPath:</span> <span class="string">/var/log</span></div><div class="line"><span class="attr">        - name:</span> <span class="string">varlibdockercontainers</span></div><div class="line"><span class="attr">          mountPath:</span> <span class="string">/var/lib/docker/containers</span></div><div class="line"><span class="attr">          readOnly:</span> <span class="literal">true</span></div><div class="line"><span class="attr">      terminationGracePeriodSeconds:</span> <span class="number">30</span></div><div class="line"><span class="attr">      volumes:</span></div><div class="line"><span class="attr">      - name:</span> <span class="string">varlog</span></div><div class="line"><span class="attr">        hostPath:</span></div><div class="line"><span class="attr">          path:</span> <span class="string">/var/log</span></div><div class="line"><span class="attr">      - name:</span> <span class="string">varlibdockercontainers</span></div><div class="line"><span class="attr">        hostPath:</span></div><div class="line"><span class="attr">          path:</span> <span class="string">/var/lib/docker/containers</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;安装es集群&quot;&gt;&lt;a href=&quot;#安装es集群&quot; class=&quot;headerlink&quot; title=&quot;安装es集群&quot;&gt;&lt;/a&gt;安装es集群&lt;/h3&gt;&lt;p&gt;假设es集群在k8s集群外,不要使用root用户。这里安装的版本是2.4.0&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;tar -zxvf elasticsearch-2.4.0.tar.gz&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;修改config文件夹下的elasticsearch.yml&lt;/p&gt;
&lt;figure class=&quot;highlight yml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;cluster.name:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;elk_cluster&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;node.name:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;elk_node01&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;path.data:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;/csdbomc/elasticsearch-2.4.0/data&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;path.logs:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;/csdbomc/elasticsearch-2.4.0/logs&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;network.host:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;172.21&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.201&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;network.port:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;9201&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;http.cors.enabled&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;//&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;http.cors.allow-origin:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;/.*/&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;http.cors.allow-methods&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;OPTIONS,&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;HEAD,&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;GET,&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;POST,&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;PUT,&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;DELETE&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;http.cors.allow-headers&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;X-Requested-With,X-Auth-Token,Content-Type, Content-Length, Authorization&quot;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;到bin目录下执行（需要提前安装java）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;./elasticsearch -d&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;制作fluent镜像&quot;&gt;&lt;a href=&quot;#制作fluent镜像&quot; class=&quot;headerlink&quot; title=&quot;制作fluent镜像&quot;&gt;&lt;/a&gt;制作fluent镜像&lt;/h3&gt;&lt;p&gt;Dockerfile内容如下:&lt;/p&gt;
&lt;figure class=&quot;highlight dockerfile&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt;  badwolf/fluentd-es-image&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Ensure there are enough file descriptors for running Fluentd.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#RUN ulimit -n 65536&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Disable prompts from apt.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Copy the Fluentd configuration file.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; td-agent.conf /etc/td-agent/td-agent.conf&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;bash&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;bash&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;bash&quot;&gt;ENV LD_PRELOAD /opt/td-agent/embedded/lib/libjemalloc.so&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;bash&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;bash&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Run the Fluentd service.&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;bash&quot;&gt;ENTRYPOINT [&lt;span class=&quot;string&quot;&gt;&quot;td-agent&quot;&lt;/span&gt;]&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="docker" scheme="http://www.badwolfbay.cn/categories/docker/"/>
    
    
      <category term="docker" scheme="http://www.badwolfbay.cn/tags/docker/"/>
    
      <category term="kubernetes" scheme="http://www.badwolfbay.cn/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>Docker镜像中国加速</title>
    <link href="http://www.badwolfbay.cn/2017/09/25/docker-image-mirror/"/>
    <id>http://www.badwolfbay.cn/2017/09/25/docker-image-mirror/</id>
    <published>2017-09-25T14:23:15.000Z</published>
    <updated>2017-09-25T15:01:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>通过 Docker 官方镜像加速，中国区用户能够快速访问最流行的 Docker 镜像。该镜像托管于中国大陆，本地用户现在将会享受到更快的下载速度和更强的稳定性，从而能够更敏捷地开发和交付 Docker 化应用。</p><p>Docker 中国官方镜像加速可通过 registry.docker-cn.com 访问。该镜像库只包含流行的公有镜像。私有镜像仍需要从美国镜像库中拉取。</p><p>您可以使用以下命令直接从该镜像加速地址进行拉取：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker pull registry.docker-cn.com/myname/myrepo:mytag</div></pre></td></tr></table></figure><p>例如:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker pull registry.docker-cn.com/library/ubuntu:16.04</div></pre></td></tr></table></figure><blockquote><p>注: 除非您修改了 Docker 守护进程的 <code>--registry-mirror</code> 参数 (见下文), 否则您将需要完整地指定官方镜像的名称。例如，library/ubuntu、library/redis、library/nginx。</p></blockquote><a id="more"></a><p><strong>使用 –registry-mirror 配置 Docker 守护进程</strong><br>您可以配置 Docker 守护进程默认使用 Docker 官方镜像加速。这样您可以默认通过官方镜像加速拉取镜像，而无需在每次拉取时指定 registry.docker-cn.com。</p><p>您可以在 Docker 守护进程启动时传入 –registry-mirror 参数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker --registry-mirror=https://registry.docker-cn.com daemon</div></pre></td></tr></table></figure><p>为了永久性保留更改，您可以修改 /etc/docker/daemon.json 文件并添加上 registry-mirrors 键值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"registry-mirrors"</span>: [<span class="string">"https://registry.docker-cn.com"</span>]</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>修改保存后重启 Docker 以使配置生效。</p><blockquote><p>注: 您也可以使用适用于 Mac 的 Docker 和适用于 Windows 的 Docker 来进行设置。</p></blockquote><p>原文连接:</p><blockquote><p><a href="https://www.docker-cn.com/registry-mirror" target="_blank" rel="external">https://www.docker-cn.com/registry-mirror</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过 Docker 官方镜像加速，中国区用户能够快速访问最流行的 Docker 镜像。该镜像托管于中国大陆，本地用户现在将会享受到更快的下载速度和更强的稳定性，从而能够更敏捷地开发和交付 Docker 化应用。&lt;/p&gt;
&lt;p&gt;Docker 中国官方镜像加速可通过 registry.docker-cn.com 访问。该镜像库只包含流行的公有镜像。私有镜像仍需要从美国镜像库中拉取。&lt;/p&gt;
&lt;p&gt;您可以使用以下命令直接从该镜像加速地址进行拉取：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ docker pull registry.docker-cn.com/myname/myrepo:mytag&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;例如:&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ docker pull registry.docker-cn.com/library/ubuntu:16.04&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;注: 除非您修改了 Docker 守护进程的 &lt;code&gt;--registry-mirror&lt;/code&gt; 参数 (见下文), 否则您将需要完整地指定官方镜像的名称。例如，library/ubuntu、library/redis、library/nginx。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="docker" scheme="http://www.badwolfbay.cn/categories/docker/"/>
    
    
      <category term="docker" scheme="http://www.badwolfbay.cn/tags/docker/"/>
    
      <category term="image" scheme="http://www.badwolfbay.cn/tags/image/"/>
    
  </entry>
  
  <entry>
    <title>调用Harbor RestAPI增加认证</title>
    <link href="http://www.badwolfbay.cn/2017/09/25/harbor-api-token/"/>
    <id>http://www.badwolfbay.cn/2017/09/25/harbor-api-token/</id>
    <published>2017-09-25T02:57:19.000Z</published>
    <updated>2017-09-25T03:09:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>1.通过Rest API访问Harbor需要Token认证信息</p><blockquote><p>curl -u username:password <a href="http://172.21.1.19/api/users" target="_blank" rel="external">http://172.21.1.19/api/users</a></p></blockquote><p>但是通过restclient访问时像curl一样添加-u参数，需要在Header中<br>增加参数</p><blockquote><p>Authorization: Basic base64encoded(user:pass)</p></blockquote><p>如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Builder builder = restClient.target(url + <span class="string">"/api/users"</span>).request();</div><div class="line">String auth = Base64.getEncoder().encodeToString(<span class="string">"user:password"</span>.getBytes())；</div><div class="line">builder.header(<span class="string">"Authorization"</span>,<span class="string">"Basic "</span> + auth);</div></pre></td></tr></table></figure><p>在JAVA8中，可以直接使用Base64工具类。</p><p>参考链接:</p><blockquote><p><a href="https://stackoverflow.com/questions/29116595/how-to-send-u-data-of-curl-in-rest-client" target="_blank" rel="external">https://stackoverflow.com/questions/29116595/how-to-send-u-data-of-curl-in-rest-client</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.通过Rest API访问Harbor需要Token认证信息&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;curl -u username:password &lt;a href=&quot;http://172.21.1.19/api/users&quot; target=&quot;_blank&quot; rel=
      
    
    </summary>
    
      <category term="harbor" scheme="http://www.badwolfbay.cn/categories/harbor/"/>
    
    
      <category term="harbor" scheme="http://www.badwolfbay.cn/tags/harbor/"/>
    
  </entry>
  
</feed>
