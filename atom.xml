<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>BADWOLFBAY</title>
  
  <subtitle>Run,You Clever Boy!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.51yimo.com/"/>
  <updated>2017-11-01T06:17:07.000Z</updated>
  <id>http://www.51yimo.com/</id>
  
  <author>
    <name>badwolf</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>百度Java面试题汇总</title>
    <link href="http://www.51yimo.com/2017/10/26/java-interview/"/>
    <id>http://www.51yimo.com/2017/10/26/java-interview/</id>
    <published>2017-10-26T11:57:27.000Z</published>
    <updated>2017-11-01T06:17:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>简单记录下百度Java面试题</p><ul><li>Java源码使用了哪些设计模式？列举你知道的类/包以及使用模式</li><li>写一个单例模式</li><li>Threadlocal有哪些特点，描述使用场景</li><li>快速排序</li><li>Mysql事务隔离级别(Spring事务隔离级别)</li><li>字符串常量池</li><li>类加载器</li><li>SpringMVC和Struts2有什么区别？(需要跟进新技术，为什么SpringMVC替代Struts2)</li><li>Java，Python和Go三个相比各自有什么优点和缺点(需要自己总结思考)</li><li>网络传输,应用层有哪些协议?(并问了Http头的详细信息)</li><li>设计一个互联网架构</li><li>接上：当访问量多比如秒杀可能的瓶颈在哪里,怎么解决这些瓶颈问题</li><li>数据库怎么读写分离，怎么分库分表</li><li>Java中HashMap的containsKey和containsValue的时间复杂度</li></ul><p>需要自己接下来深入学习JVM，网络层。<br>由底层原理–&gt;架构–&gt;项目/应用/数据/性能</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;简单记录下百度Java面试题&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java源码使用了哪些设计模式？列举你知道的类/包以及使用模式&lt;/li&gt;
&lt;li&gt;写一个单例模式&lt;/li&gt;
&lt;li&gt;Threadlocal有哪些特点，描述使用场景&lt;/li&gt;
&lt;li&gt;快速排序&lt;/li&gt;
&lt;li&gt;Mysq
      
    
    </summary>
    
      <category term="Java" scheme="http://www.51yimo.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://www.51yimo.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Go指南学习笔记十一</title>
    <link href="http://www.51yimo.com/2017/10/25/go-tour-note-11/"/>
    <id>http://www.51yimo.com/2017/10/25/go-tour-note-11/</id>
    <published>2017-10-25T01:10:40.000Z</published>
    <updated>2017-10-25T01:52:40.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h3><p>Go使用<code>error</code>来标识错误状态。<br>同<code>fmt.Stringer</code>一样，<code>error类型</code>也是个内建接口。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">type error interface &#123;</div><div class="line">    Error() string</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>通常函数会返回一个<code>error</code>值，调用它的代码应判断这个错误是否等于<code>nil</code>来进行错误处理。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">i, err := strconv.Atoi(&quot;42&quot;)</div><div class="line"></div><div class="line">if err ！= nil &#123;</div><div class="line">    fmt.Printf(&quot;conldn&apos;t convert number: %v\n&quot;, err)</div><div class="line">    return</div><div class="line">&#125;</div><div class="line">fmt.Printfln(&quot;Converted integer:&quot;, i)</div></pre></td></tr></table></figure><p><code>error</code>为nil时表示成功；非<code>nil</code>的error表示错误</p><a id="more"></a><p>如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import (</div><div class="line">    &quot;fmt&quot;</div><div class="line">    &quot;time&quot;</div><div class="line">)</div><div class="line"></div><div class="line">type MyError struct &#123;</div><div class="line">    When time.Time</div><div class="line">    What string</div><div class="line">&#125;</div><div class="line"></div><div class="line">func (e *MyError) Error() string &#123;</div><div class="line">    return fmt.Sprintf(&quot;at %v, %s&quot;, e.When, e.What)</div><div class="line">&#125;</div><div class="line"></div><div class="line">func run() error &#123;</div><div class="line">    return &amp;MyError&#123;time.Now(), &quot;it didn&apos;t work&quot;,&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line">    if err := run(); err != nil &#123;</div><div class="line">        fmt.Println(err) // </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>运行输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">at 2017-10-25 09:31:30.9208855 +0800 CST, it didn&apos;t work</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;错误&quot;&gt;&lt;a href=&quot;#错误&quot; class=&quot;headerlink&quot; title=&quot;错误&quot;&gt;&lt;/a&gt;错误&lt;/h3&gt;&lt;p&gt;Go使用&lt;code&gt;error&lt;/code&gt;来标识错误状态。&lt;br&gt;同&lt;code&gt;fmt.Stringer&lt;/code&gt;一样，&lt;code&gt;error类型&lt;/code&gt;也是个内建接口。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;type error interface &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Error() string&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通常函数会返回一个&lt;code&gt;error&lt;/code&gt;值，调用它的代码应判断这个错误是否等于&lt;code&gt;nil&lt;/code&gt;来进行错误处理。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;i, err := strconv.Atoi(&amp;quot;42&amp;quot;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;if err ！= nil &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    fmt.Printf(&amp;quot;conldn&amp;apos;t convert number: %v\n&amp;quot;, err)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    return&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;fmt.Printfln(&amp;quot;Converted integer:&amp;quot;, i)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;error&lt;/code&gt;为nil时表示成功；非&lt;code&gt;nil&lt;/code&gt;的error表示错误&lt;/p&gt;
    
    </summary>
    
      <category term="golang" scheme="http://www.51yimo.com/categories/golang/"/>
    
    
      <category term="go" scheme="http://www.51yimo.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>非root用户运行docker</title>
    <link href="http://www.51yimo.com/2017/10/13/not-root-run-docker/"/>
    <id>http://www.51yimo.com/2017/10/13/not-root-run-docker/</id>
    <published>2017-10-13T01:31:04.000Z</published>
    <updated>2017-10-13T01:45:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>转载：</p><p>原文出处：</p><blockquote><p><a href="https://notes.wanghao.work/2017-07-11-Docker非Root用户运行.html" target="_blank" rel="external">https://notes.wanghao.work/2017-07-11-Docker非Root用户运行.html</a></p></blockquote><hr><blockquote><p>Docker Engine的Deamon进程是以root权限运行的，如果是普通用户要与之交互，需要使用<code>sudo</code>命令来提权与之交互。之前使用Docker官方的安装脚本安装完成之后，会给出一个提示将当前非root用户添加到doker组之中，以避免每次都需要输入<code>sudo</code>的麻烦。</p></blockquote><p>然而随着Docker版本的迭代和官网的安装方式的更改，现在官方给出的安装方式是添加仓库源地址，然后使用默认的<code>apt</code>或者<code>yum</code>包管理工具来完成后安装。并不再提示用户添加非root用户到组。</p><p>默认情况下，完成Docker Engine的安装之后，Docker将会自动创建一个名为<code>docker</code>的用户组，所以<code>root</code>用户和在<code>docker</code>组中的用户都可以免去<code>sudo</code>来与Docker Engine交互。知道原理之后就简单了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo usermod -aG docker <span class="variable">$&#123;whoami&#125;</span> <span class="comment">#添加当前用户到docker组</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;转载：&lt;/p&gt;
&lt;p&gt;原文出处：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://notes.wanghao.work/2017-07-11-Docker非Root用户运行.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;
      
    
    </summary>
    
      <category term="docker" scheme="http://www.51yimo.com/categories/docker/"/>
    
    
      <category term="docker" scheme="http://www.51yimo.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Go指南学习笔记十</title>
    <link href="http://www.51yimo.com/2017/10/12/go-tour-note-10/"/>
    <id>http://www.51yimo.com/2017/10/12/go-tour-note-10/</id>
    <published>2017-10-12T13:15:45.000Z</published>
    <updated>2017-10-12T13:47:07.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Stringers"><a href="#Stringers" class="headerlink" title="Stringers"></a>Stringers</h3><p>普遍存在的接口是<em>fmt</em>包中定义的Stringer</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> Stringer inferface &#123;</div><div class="line">    String() <span class="keyword">string</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Stringer是一个可以用字符串描述自己的类型。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import (</div><div class="line">    &quot;fmt&quot;</div><div class="line">)</div><div class="line"></div><div class="line">type Person struct &#123;</div><div class="line">    Name string</div><div class="line">    Age  int</div><div class="line">&#125;</div><div class="line"></div><div class="line">func (p Person) String() string &#123;</div><div class="line">    return fmt.Sprintf(&quot;%v (%v years)&quot;, p.Name, p.Age)</div><div class="line">&#125;</div><div class="line">func main() &#123;</div><div class="line">    a := Person&#123;&quot;Dent&quot;, 42&#125;</div><div class="line">    z := Person&#123;&quot;Foo&quot;, 90&#125;</div><div class="line">    fmt.Println(a, z) // 输出Dent (42 years) Foo (90 years)</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Stringers&quot;&gt;&lt;a href=&quot;#Stringers&quot; class=&quot;headerlink&quot; title=&quot;Stringers&quot;&gt;&lt;/a&gt;Stringers&lt;/h3&gt;&lt;p&gt;普遍存在的接口是&lt;em&gt;fmt&lt;/em&gt;包中定义的Stringer&lt;/p&gt;
&lt;fig
      
    
    </summary>
    
      <category term="golang" scheme="http://www.51yimo.com/categories/golang/"/>
    
    
      <category term="go" scheme="http://www.51yimo.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes网络组件Calico安装</title>
    <link href="http://www.51yimo.com/2017/09/26/calico-install-on-kubernetes/"/>
    <id>http://www.51yimo.com/2017/09/26/calico-install-on-kubernetes/</id>
    <published>2017-09-26T06:43:51.000Z</published>
    <updated>2017-09-27T03:11:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>参照官网地址:</p><blockquote><p><a href="https://docs.projectcalico.org/v2.5/getting-started/kubernetes/installation/integration" target="_blank" rel="external">https://docs.projectcalico.org/v2.5/getting-started/kubernetes/installation/integration</a></p></blockquote><p>Calico组件包括</p><ul><li>calico/node， 必须安装在Master节点和每个计算节点上，包括BGP agent,负责网络策略。</li><li>cni/plugin， 和kubelet交互发现pod。</li><li>calico/policy-controller ,实现kubernetes的Network Policy API.</li></ul><p>本文中安装的calico版本为2.5,对应的组件版本分别为:</p><blockquote><p>calicoctl:v1.5.0<br>cni-plugin:v1.10.0<br>cni:v0.3.0</p></blockquote><h3 id="安装calico-node"><a href="#安装calico-node" class="headerlink" title="安装calico/node"></a>安装calico/node</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ wget https://github.com/projectcalico/calicoctl/releases/download/v1.5.0/calicoctl</div><div class="line"></div><div class="line">$ sudo chmod +x calicoctl</div><div class="line"></div><div class="line">$ mv calicoctl /usr/bin</div></pre></td></tr></table></figure><p>创建calico-node.service</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vi /usr/lib/systemd/system/calico-node.service</div></pre></td></tr></table></figure><p>service的内容，需要将ETCD_ENDPOINTS中地址换成真实的etcd集群地址，可以将node-image中指定所需要的镜像名称，如果不指定，默认为quay.io/calico/node:latest</p><font color="red">下边的命令会导致calio-node一直重启，所以需要换成官网的</font><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">[Unit]</div><div class="line">Description=calicoctl node</div><div class="line">After=docker.service</div><div class="line">Requires=docker.service</div><div class="line"></div><div class="line">[Service]</div><div class="line">User=root</div><div class="line">Environment=ETCD_ENDPOINTS=http://172.21.1.201:2379</div><div class="line">PermissionsStartOnly=true</div><div class="line">ExecStart=/usr/bin/calicoctl node run --node-image=calico/node:v2.5.1</div><div class="line">Restart=always</div><div class="line">RestartSec=10</div><div class="line"></div><div class="line">[Install]</div><div class="line">WantedBy=multi-user.target</div></pre></td></tr></table></figure><p>换成(替换下边的ETCD_ENDPOINTS和ExecStart命令中的镜像名称)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">[Unit]</div><div class="line">Description=calico node</div><div class="line">After=docker.service</div><div class="line">Requires=docker.service</div><div class="line"></div><div class="line">[Service]</div><div class="line">User=root</div><div class="line">Environment=ETCD_ENDPOINTS=http://&lt;ETCD_IP&gt;:&lt;ETCD_PORT&gt;</div><div class="line">PermissionsStartOnly=true</div><div class="line">ExecStart=/usr/bin/docker run --net=host --privileged --name=calico-node \</div><div class="line">  -e ETCD_ENDPOINTS=$&#123;ETCD_ENDPOINTS&#125; \</div><div class="line">  -e NODENAME=$&#123;HOSTNAME&#125; \</div><div class="line">  -e IP= \</div><div class="line">  -e NO_DEFAULT_POOLS= \</div><div class="line">  -e AS= \</div><div class="line">  -e CALICO_LIBNETWORK_ENABLED=true \</div><div class="line">  -e IP6= \</div><div class="line">  -e CALICO_NETWORKING_BACKEND=bird \</div><div class="line">  -e FELIX_DEFAULTENDPOINTTOHOSTACTION=ACCEPT \</div><div class="line">  -v /var/run/calico:/var/run/calico \</div><div class="line">  -v /lib/modules:/lib/modules \</div><div class="line">  -v /run/docker/plugins:/run/docker/plugins \</div><div class="line">  -v /var/run/docker.sock:/var/run/docker.sock \</div><div class="line">  -v /var/log/calico:/var/log/calico \</div><div class="line">  calico/node:v2.5.1</div><div class="line">ExecStop=/usr/bin/docker rm -f calico-node</div><div class="line">Restart=always</div><div class="line">RestartSec=10</div><div class="line"></div><div class="line">[Install]</div><div class="line">WantedBy=multi-user.target</div></pre></td></tr></table></figure><p>启动calico-node服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ systemctl daemon-reload</div><div class="line">$ systemctl start calico-node</div></pre></td></tr></table></figure><p>查看服务启动情况以及容器启动情况</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ systemctl status calico-node</div><div class="line"></div><div class="line">● calico-node.service - calicoctl node</div><div class="line">   Loaded: loaded (/usr/lib/systemd/system/calico-node.service; disabled; vendor preset: disabled)</div><div class="line">   Active: activating (auto-restart) since Tue 2017-09-26 09:57:00 CST; 1s ago</div><div class="line">  Process: 23696 ExecStart=/usr/bin/calicoctl node run --node-image=calico/node:v2.5.1 (code=exited, status=0/SUCCESS)</div><div class="line"> Main PID: 23696 (code=exited, status=0/SUCCESS)</div><div class="line"> </div><div class="line">$ docker ps </div><div class="line"> </div><div class="line"> CONTAINER ID        IMAGE                COMMAND             CREATED             STATUS              PORTS               NAMES</div><div class="line">1cca427ef1a1        calico/node:v2.5.1   &quot;start_runit&quot;       10 seconds ago      Up 9 seconds                            calico-node</div></pre></td></tr></table></figure><a id="more"></a><font color="red">当calico-node的ExecStart配置成calicoctl run命令时会导致服务一直重启，如上表示服务未启动成功，名字为calico-node的容器会一直重启。按照如上所说的修改后，再次查看</font><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">$ systemctl status calico-node</div><div class="line">● calico-node.service - calicoctl node</div><div class="line">   Loaded: loaded (/usr/lib/systemd/system/calico-node.service; disabled; vendor preset: disabled)</div><div class="line">   Active: active (running) since Wed 2017-09-27 10:57:28 CST; 2min 4s ago</div><div class="line">  Process: 21915 ExecStop=/usr/bin/docker rm -f calico-node (code=exited, status=0/SUCCESS)</div><div class="line"> Main PID: 21949 (docker)</div><div class="line">   Memory: 6.6M</div><div class="line">   CGroup: /system.slice/calico-node.service</div><div class="line">           └─21949 /usr/bin/docker run --net=host --privileged --name=calico-node -e ETCD_ENDPOINTS=http://172.21.1.201:2379 -e NODENAME= -e IP= -e NO_DEFAULT_POOLS= -e AS= -e CALICO_LIBNE...</div><div class="line"></div><div class="line">Sep 27 10:57:28 k1 systemd[1]: Started calicoctl node.</div><div class="line">Sep 27 10:57:28 k1 systemd[1]: Starting calicoctl node...</div><div class="line">Sep 27 10:57:28 k1 docker[21949]: Skipping datastore connection <span class="built_in">test</span></div><div class="line">Sep 27 10:57:28 k1 docker[21949]: IPv4 address 172.21.1.200 discovered on interface eth0</div><div class="line">Sep 27 10:57:28 k1 docker[21949]: No AS number configured on node resource, using global value</div><div class="line">Sep 27 10:57:28 k1 docker[21949]: Using node name: k1</div><div class="line">Sep 27 10:57:29 k1 docker[21949]: time=<span class="string">"2017-09-27T02:57:29Z"</span> level=info msg=<span class="string">"Loading config from environment"</span></div><div class="line">Sep 27 10:57:29 k1 docker[21949]: Starting libnetwork service</div><div class="line">Sep 27 10:57:29 k1 docker[21949]: Calico node started successfully</div></pre></td></tr></table></figure><h3 id="安装calico-cni-plugin"><a href="#安装calico-cni-plugin" class="headerlink" title="安装calico/cni-plugin"></a>安装calico/cni-plugin</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ wget https://github.com/projectcalico/cni-plugin/releases/download/v1.10.0/calico</div><div class="line">$ wget https://github.com/projectcalico/cni-plugin/releases/download/v1.10.0/calico-ipam</div><div class="line">$ chmod +x calico calico-ipam</div><div class="line">$ mv calico calico-ipam /usr/bin</div></pre></td></tr></table></figure><p>cni-plugin需要标准的CNI配置文件，创建配置文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">$ mkdir -p /etc/cni/net.d</div><div class="line">$ cat &gt;/etc/cni/net.d/10-calico.conf &lt;&lt;EOF</div><div class="line">&#123;</div><div class="line">    <span class="string">"name"</span>: <span class="string">"calico-k8s-network"</span>,</div><div class="line">    <span class="string">"cniVersion"</span>: <span class="string">"0.1.0"</span>,</div><div class="line">    <span class="string">"type"</span>: <span class="string">"calico"</span>,</div><div class="line">    <span class="string">"etcd_endpoints"</span>: <span class="string">"http://172.21.1.201:2379"</span>,</div><div class="line">    <span class="string">"log_level"</span>: <span class="string">"info"</span>,</div><div class="line">    <span class="string">"ipam"</span>: &#123;</div><div class="line">        <span class="string">"type"</span>: <span class="string">"calico-ipam"</span>,</div><div class="line">        <span class="string">"k8s_api_root"</span>: <span class="string">"http://127.0.0.1:8080"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="string">"policy"</span>: &#123;</div><div class="line">        <span class="string">"type"</span>: <span class="string">"k8s"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="string">"kubernetes"</span>: &#123;</div><div class="line">        <span class="string">"kubeconfig"</span>: <span class="string">"/etc/cni/net.d/calico-kubeconfig"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">EOF</div></pre></td></tr></table></figure><blockquote><p>注意：policy选项为k8s,使用Kubernetes Network Policy来定义网络策略.</p></blockquote><p>这里需要一个<em>calico-kubeconfig</em>的配置文件。在/etc/cni/net.d下创建<br>calico-kubeconfig配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"># Kubeconfig file for Calico CNI plugin.</div><div class="line">apiVersion: v1</div><div class="line">kind: Config</div><div class="line">clusters:</div><div class="line">- name: local</div><div class="line">  cluster:</div><div class="line">    insecure-skip-tls-verify: true</div><div class="line">    server: https://172.21.1.200:8080</div><div class="line">users:</div><div class="line">- name: calico</div><div class="line">contexts:</div><div class="line">- name: calico-context</div><div class="line">  context:</div><div class="line">    cluster: local</div><div class="line">    user: calico</div><div class="line">current-context: calico-context</div></pre></td></tr></table></figure><p>安装CNI plugin</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ wget https://github.com/containernetworking/cni/releases/download/v0.3.0/cni-v0.3.0.tgz</div><div class="line">$ tar -zxvf cni-v0.3.0.tgz</div><div class="line">$ cp loopback /opt/cni/bin/</div></pre></td></tr></table></figure><h3 id="安装calico-networkpolicy-controller"><a href="#安装calico-networkpolicy-controller" class="headerlink" title="安装calico networkpolicy-controller"></a>安装calico networkpolicy-controller</h3><p>创建yaml文件，文件地址下载地址：</p><blockquote><p><a href="https://docs.projectcalico.org/v2.5/getting-started/kubernetes/installation/policy-controller.yaml" target="_blank" rel="external">https://docs.projectcalico.org/v2.5/getting-started/kubernetes/installation/policy-controller.yaml</a></p></blockquote><p>内容如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"># Calico Version v2.5.1</div><div class="line"># https://docs.projectcalico.org/v2.5/releases#v2.5.1</div><div class="line"># This manifest includes the following component versions:</div><div class="line">#   calico/kube-policy-controller:v0.7.0</div><div class="line"></div><div class="line"># Create this manifest using kubectl to deploy</div><div class="line"># the Calico policy controller on Kubernetes.</div><div class="line"># It deploys a single instance of the policy controller.</div><div class="line">apiVersion: extensions/v1beta1</div><div class="line">kind: Deployment</div><div class="line">metadata:</div><div class="line">  name: calico-policy-controller</div><div class="line">  namespace: kube-system</div><div class="line">  labels:</div><div class="line">    k8s-app: calico-policy</div><div class="line">spec:</div><div class="line">  # Only a single instance of the policy controller should be</div><div class="line">  # active at a time.  Since this pod is run as a Deployment,</div><div class="line">  # Kubernetes will ensure the pod is recreated in case of failure,</div><div class="line">  # removing the need for passive backups.</div><div class="line">  replicas: 1</div><div class="line">  strategy:</div><div class="line">    type: Recreate</div><div class="line">  template:</div><div class="line">    metadata:</div><div class="line">      name: calico-policy-controller</div><div class="line">      namespace: kube-system</div><div class="line">      labels:</div><div class="line">        k8s-app: calico-policy</div><div class="line">    spec:</div><div class="line">      hostNetwork: true</div><div class="line">      containers:</div><div class="line">        - name: calico-policy-controller</div><div class="line">          # Make sure to pin this to your desired version.</div><div class="line">          image: quay.io/calico/kube-policy-controller:v0.7.0</div><div class="line">          env:</div><div class="line">            # Configure the policy controller with the location of</div><div class="line">            # your etcd cluster.</div><div class="line">            - name: ETCD_ENDPOINTS</div><div class="line">              value: &quot;&lt;ETCD_ENDPOINTS&gt;&quot;</div><div class="line">            # Location of the Kubernetes API - this shouldn&apos;t need to be</div><div class="line">            # changed so long as it is used in conjunction with</div><div class="line">            # CONFIGURE_ETC_HOSTS=&quot;true&quot;.</div><div class="line">            - name: K8S_API</div><div class="line">              value: &quot;https://kubernetes.default:443&quot;</div><div class="line">            # Configure /etc/hosts within the container to resolve</div><div class="line">            # the kubernetes.default Service to the correct clusterIP</div><div class="line">            # using the environment provided by the kubelet.</div><div class="line">            # This removes the need for KubeDNS to resolve the Service.</div><div class="line">            - name: CONFIGURE_ETC_HOSTS</div><div class="line">              value: &quot;true&quot;</div></pre></td></tr></table></figure></p><p>需要修改3处地址：<br><strong>image</strong>(镜像名称),<strong>ETCD_ENDPOINTS</strong>(ETCD地址),<strong>K8S_API</strong>(kubenetes 的API地址)</p><h3 id="修改kubelet"><a href="#修改kubelet" class="headerlink" title="修改kubelet"></a>修改kubelet</h3><p>需要将kubelet中的网络指定为calico ,修改/usr/lib/system.d/system/kubelet.service，加入如下参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">--network-plugin=cni</div><div class="line">--cni-conf-dir=/etc/cni/net.d</div><div class="line">--cni-bin-dir=/opt/cni/bin</div></pre></td></tr></table></figure><blockquote><p>注意：kubernetes1.4版本之前不支持<em>cni-conf-dir</em>和<em>cni-bin-dir</em>参数。替换成<em>–network-plugin-dir=/etc/cni/net.d</em></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参照官网地址:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.projectcalico.org/v2.5/getting-started/kubernetes/installation/integration&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://docs.projectcalico.org/v2.5/getting-started/kubernetes/installation/integration&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Calico组件包括&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;calico/node， 必须安装在Master节点和每个计算节点上，包括BGP agent,负责网络策略。&lt;/li&gt;
&lt;li&gt;cni/plugin， 和kubelet交互发现pod。&lt;/li&gt;
&lt;li&gt;calico/policy-controller ,实现kubernetes的Network Policy API.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本文中安装的calico版本为2.5,对应的组件版本分别为:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;calicoctl:v1.5.0&lt;br&gt;cni-plugin:v1.10.0&lt;br&gt;cni:v0.3.0&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;安装calico-node&quot;&gt;&lt;a href=&quot;#安装calico-node&quot; class=&quot;headerlink&quot; title=&quot;安装calico/node&quot;&gt;&lt;/a&gt;安装calico/node&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ wget https://github.com/projectcalico/calicoctl/releases/download/v1.5.0/calicoctl&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ sudo chmod +x calicoctl&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ mv calicoctl /usr/bin&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;创建calico-node.service&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ vi /usr/lib/systemd/system/calico-node.service&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;service的内容，需要将ETCD_ENDPOINTS中地址换成真实的etcd集群地址，可以将node-image中指定所需要的镜像名称，如果不指定，默认为quay.io/calico/node:latest&lt;/p&gt;
&lt;font color=&quot;red&quot;&gt;下边的命令会导致calio-node一直重启，所以需要换成官网的&lt;/font&gt;

&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[Unit]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Description=calicoctl node&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;After=docker.service&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Requires=docker.service&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[Service]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;User=root&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Environment=ETCD_ENDPOINTS=http://172.21.1.201:2379&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;PermissionsStartOnly=true&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ExecStart=/usr/bin/calicoctl node run --node-image=calico/node:v2.5.1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Restart=always&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;RestartSec=10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[Install]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;WantedBy=multi-user.target&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;换成(替换下边的ETCD_ENDPOINTS和ExecStart命令中的镜像名称)&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[Unit]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Description=calico node&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;After=docker.service&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Requires=docker.service&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[Service]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;User=root&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Environment=ETCD_ENDPOINTS=http://&amp;lt;ETCD_IP&amp;gt;:&amp;lt;ETCD_PORT&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;PermissionsStartOnly=true&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ExecStart=/usr/bin/docker run --net=host --privileged --name=calico-node \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  -e ETCD_ENDPOINTS=$&amp;#123;ETCD_ENDPOINTS&amp;#125; \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  -e NODENAME=$&amp;#123;HOSTNAME&amp;#125; \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  -e IP= \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  -e NO_DEFAULT_POOLS= \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  -e AS= \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  -e CALICO_LIBNETWORK_ENABLED=true \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  -e IP6= \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  -e CALICO_NETWORKING_BACKEND=bird \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  -e FELIX_DEFAULTENDPOINTTOHOSTACTION=ACCEPT \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  -v /var/run/calico:/var/run/calico \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  -v /lib/modules:/lib/modules \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  -v /run/docker/plugins:/run/docker/plugins \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  -v /var/run/docker.sock:/var/run/docker.sock \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  -v /var/log/calico:/var/log/calico \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  calico/node:v2.5.1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ExecStop=/usr/bin/docker rm -f calico-node&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Restart=always&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;RestartSec=10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[Install]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;WantedBy=multi-user.target&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;启动calico-node服务&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ systemctl daemon-reload&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ systemctl start calico-node&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;查看服务启动情况以及容器启动情况&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ systemctl status calico-node&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;● calico-node.service - calicoctl node&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   Loaded: loaded (/usr/lib/systemd/system/calico-node.service; disabled; vendor preset: disabled)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   Active: activating (auto-restart) since Tue 2017-09-26 09:57:00 CST; 1s ago&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  Process: 23696 ExecStart=/usr/bin/calicoctl node run --node-image=calico/node:v2.5.1 (code=exited, status=0/SUCCESS)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; Main PID: 23696 (code=exited, status=0/SUCCESS)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ docker ps &lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt; CONTAINER ID        IMAGE                COMMAND             CREATED             STATUS              PORTS               NAMES&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;1cca427ef1a1        calico/node:v2.5.1   &amp;quot;start_runit&amp;quot;       10 seconds ago      Up 9 seconds                            calico-node&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="docker" scheme="http://www.51yimo.com/categories/docker/"/>
    
    
      <category term="docker" scheme="http://www.51yimo.com/tags/docker/"/>
    
      <category term="kubernetes" scheme="http://www.51yimo.com/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes上部署fluentd采集日志</title>
    <link href="http://www.51yimo.com/2017/09/25/kubernetes-fluentd/"/>
    <id>http://www.51yimo.com/2017/09/25/kubernetes-fluentd/</id>
    <published>2017-09-25T14:29:31.000Z</published>
    <updated>2017-09-25T15:01:40.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装es集群"><a href="#安装es集群" class="headerlink" title="安装es集群"></a>安装es集群</h3><p>假设es集群在k8s集群外,不要使用root用户。这里安装的版本是2.4.0</p><blockquote><p>tar -zxvf elasticsearch-2.4.0.tar.gz</p></blockquote><p>修改config文件夹下的elasticsearch.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="string">cluster.name:</span> <span class="string">elk_cluster</span></div><div class="line"><span class="string">node.name:</span> <span class="string">elk_node01</span></div><div class="line"><span class="string">path.data:</span> <span class="string">/csdbomc/elasticsearch-2.4.0/data</span></div><div class="line"><span class="string">path.logs:</span> <span class="string">/csdbomc/elasticsearch-2.4.0/logs</span></div><div class="line"><span class="string">network.host:</span> <span class="number">172.21</span><span class="number">.0</span><span class="number">.201</span></div><div class="line"><span class="string">network.port:</span> <span class="number">9201</span></div><div class="line"><span class="string">http.cors.enabled</span> <span class="string">:</span> <span class="literal">true</span> <span class="string">//</span></div><div class="line"><span class="string">http.cors.allow-origin:</span> <span class="string">"/.*/"</span></div><div class="line"><span class="string">http.cors.allow-methods</span> <span class="string">:</span> <span class="string">OPTIONS,</span> <span class="string">HEAD,</span> <span class="string">GET,</span> <span class="string">POST,</span> <span class="string">PUT,</span> <span class="string">DELETE</span></div><div class="line"><span class="string">http.cors.allow-headers</span> <span class="string">:</span> <span class="string">"X-Requested-With,X-Auth-Token,Content-Type, Content-Length, Authorization"</span></div></pre></td></tr></table></figure><p>到bin目录下执行（需要提前安装java）</p><blockquote><p>./elasticsearch -d</p></blockquote><h3 id="制作fluent镜像"><a href="#制作fluent镜像" class="headerlink" title="制作fluent镜像"></a>制作fluent镜像</h3><p>Dockerfile内容如下:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">FROM</span>  badwolf/fluentd-es-image</div><div class="line"></div><div class="line"><span class="comment"># Ensure there are enough file descriptors for running Fluentd.</span></div><div class="line"><span class="comment">#RUN ulimit -n 65536</span></div><div class="line"></div><div class="line"><span class="comment"># Disable prompts from apt.</span></div><div class="line"></div><div class="line"><span class="comment"># Copy the Fluentd configuration file.</span></div><div class="line"><span class="keyword">COPY</span><span class="bash"> td-agent.conf /etc/td-agent/td-agent.conf</span></div><div class="line"><span class="bash"></span></div><div class="line"><span class="bash"></span></div><div class="line"><span class="bash">ENV LD_PRELOAD /opt/td-agent/embedded/lib/libjemalloc.so</span></div><div class="line"><span class="bash"></span></div><div class="line"><span class="bash"><span class="comment"># Run the Fluentd service.</span></span></div><div class="line"><span class="bash">ENTRYPOINT [<span class="string">"td-agent"</span>]</span></div></pre></td></tr></table></figure><a id="more"></a><p>td-agent.conf的内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># This configuration file for Fluentd / td-agent is used</span></div><div class="line"><span class="comment"># to watch changes to Docker log files. The kubelet creates symlinks that</span></div><div class="line"><span class="comment"># capture the pod name, namespace, container name &amp; Docker container ID</span></div><div class="line"><span class="comment"># to the docker logs for pods in the /var/log/containers directory on the host.</span></div><div class="line"><span class="comment"># If running this fluentd configuration in a Docker container, the /var/log</span></div><div class="line"><span class="comment"># directory should be mounted in the container.</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># These logs are then submitted to Elasticsearch which assumes the</span></div><div class="line"><span class="comment"># installation of the fluent-plugin-elasticsearch &amp; the</span></div><div class="line"><span class="comment"># fluent-plugin-kubernetes_metadata_filter plugins.</span></div><div class="line"><span class="comment"># See https://github.com/uken/fluent-plugin-elasticsearch &amp;</span></div><div class="line"><span class="comment"># https://github.com/fabric8io/fluent-plugin-kubernetes_metadata_filter for</span></div><div class="line"><span class="comment"># more information about the plugins.</span></div><div class="line"><span class="comment"># Maintainer: Jimmi Dyson &lt;jimmidyson@gmail.com&gt;</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Example</span></div><div class="line"><span class="comment"># =======</span></div><div class="line"><span class="comment"># A line in the Docker log file might look like this JSON:</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># &#123;"log":"2014/09/25 21:15:03 Got request with path wombat\n",</span></div><div class="line"><span class="comment">#  "stream":"stderr",</span></div><div class="line"><span class="comment">#   "time":"2014-09-25T21:15:03.499185026Z"&#125;</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># The time_format specification below makes sure we properly</span></div><div class="line"><span class="comment"># parse the time format produced by Docker. This will be</span></div><div class="line"><span class="comment"># submitted to Elasticsearch and should appear like:</span></div><div class="line"><span class="comment"># $ curl 'http://elasticsearch-logging:9200/_search?pretty'</span></div><div class="line"><span class="comment"># ...</span></div><div class="line"><span class="comment"># &#123;</span></div><div class="line"><span class="comment">#      "_index" : "logstash-2014.09.25",</span></div><div class="line"><span class="comment">#      "_type" : "fluentd",</span></div><div class="line"><span class="comment">#      "_id" : "VBrbor2QTuGpsQyTCdfzqA",</span></div><div class="line"><span class="comment">#      "_score" : 1.0,</span></div><div class="line"><span class="comment">#      "_source":&#123;"log":"2014/09/25 22:45:50 Got request with path wombat\n",</span></div><div class="line"><span class="comment">#                 "stream":"stderr","tag":"docker.container.all",</span></div><div class="line"><span class="comment">#                 "@timestamp":"2014-09-25T22:45:50+00:00"&#125;</span></div><div class="line"><span class="comment">#    &#125;,</span></div><div class="line"><span class="comment"># ...</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># The Kubernetes fluentd plugin is used to write the Kubernetes metadata to the log</span></div><div class="line"><span class="comment"># record &amp; add labels to the log record if properly configured. This enables users</span></div><div class="line"><span class="comment"># to filter &amp; search logs on any metadata.</span></div><div class="line"><span class="comment"># For example a Docker container's logs might be in the directory:</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment">#  /var/lib/docker/containers/997599971ee6366d4a5920d25b79286ad45ff37a74494f262e3bc98d909d0a7b</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># and in the file:</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment">#  997599971ee6366d4a5920d25b79286ad45ff37a74494f262e3bc98d909d0a7b-json.log</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># where 997599971ee6... is the Docker ID of the running container.</span></div><div class="line"><span class="comment"># The Kubernetes kubelet makes a symbolic link to this file on the host machine</span></div><div class="line"><span class="comment"># in the /var/log/containers directory which includes the pod name and the Kubernetes</span></div><div class="line"><span class="comment"># container name:</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment">#    synthetic-logger-0.25lps-pod_default_synth-lgr-997599971ee6366d4a5920d25b79286ad45ff37a74494f262e3bc98d909d0a7b.log</span></div><div class="line"><span class="comment">#    -&gt;</span></div><div class="line"><span class="comment">#    /var/lib/docker/containers/997599971ee6366d4a5920d25b79286ad45ff37a74494f262e3bc98d909d0a7b/997599971ee6366d4a5920d25b79286ad45ff37a74494f262e3bc98d909d0a7b-json.log</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># The /var/log directory on the host is mapped to the /var/log directory in the container</span></div><div class="line"><span class="comment"># running this instance of Fluentd and we end up collecting the file:</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment">#   /var/log/containers/synthetic-logger-0.25lps-pod_default_synth-lgr-997599971ee6366d4a5920d25b79286ad45ff37a74494f262e3bc98d909d0a7b.log</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># This results in the tag:</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment">#  var.log.containers.synthetic-logger-0.25lps-pod_default_synth-lgr-997599971ee6366d4a5920d25b79286ad45ff37a74494f262e3bc98d909d0a7b.log</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># The Kubernetes fluentd plugin is used to extract the namespace, pod name &amp; container name</span></div><div class="line"><span class="comment"># which are added to the log message as a kubernetes field object &amp; the Docker container ID</span></div><div class="line"><span class="comment"># is also added under the docker field object.</span></div><div class="line"><span class="comment"># The final tag is:</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment">#   kubernetes.var.log.containers.synthetic-logger-0.25lps-pod_default_synth-lgr-997599971ee6366d4a5920d25b79286ad45ff37a74494f262e3bc98d909d0a7b.log</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># And the final log record look like:</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># &#123;</span></div><div class="line"><span class="comment">#   "log":"2014/09/25 21:15:03 Got request with path wombat\n",</span></div><div class="line"><span class="comment">#   "stream":"stderr",</span></div><div class="line"><span class="comment">#   "time":"2014-09-25T21:15:03.499185026Z",</span></div><div class="line"><span class="comment">#   "kubernetes": &#123;</span></div><div class="line"><span class="comment">#     "namespace": "default",</span></div><div class="line"><span class="comment">#     "pod_name": "synthetic-logger-0.25lps-pod",</span></div><div class="line"><span class="comment">#     "container_name": "synth-lgr"</span></div><div class="line"><span class="comment">#   &#125;,</span></div><div class="line"><span class="comment">#   "docker": &#123;</span></div><div class="line"><span class="comment">#     "container_id": "997599971ee6366d4a5920d25b79286ad45ff37a74494f262e3bc98d909d0a7b"</span></div><div class="line"><span class="comment">#   &#125;</span></div><div class="line"><span class="comment"># &#125;</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># This makes it easier for users to search for logs by pod name or by</span></div><div class="line"><span class="comment"># the name of the Kubernetes container regardless of how many times the</span></div><div class="line"><span class="comment"># Kubernetes pod has been restarted (resulting in a several Docker container IDs).</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># <span class="doctag">TODO:</span> Propagate the labels associated with a container along with its logs</span></div><div class="line"><span class="comment"># so users can query logs using labels as well as or instead of the pod name</span></div><div class="line"><span class="comment"># and container name. This is simply done via configuration of the Kubernetes</span></div><div class="line"><span class="comment"># fluentd plugin but requires secrets to be enabled in the fluent pod. This is a</span></div><div class="line"><span class="comment"># problem yet to be solved as secrets are not usable in static pods which the fluentd</span></div><div class="line"><span class="comment"># pod must be until a per-node controller is available in Kubernetes.</span></div><div class="line"></div><div class="line"><span class="comment"># Prevent fluentd from handling records containing its own logs. Otherwise</span></div><div class="line"><span class="comment"># it can lead to an infinite loop, when error in sending one message generates</span></div><div class="line"><span class="comment"># another message which also fails to be sent and so on.</span></div><div class="line">&lt;match fluent.**&gt;</div><div class="line">  <span class="built_in">type</span> null</div><div class="line">&lt;/match&gt;</div><div class="line"></div><div class="line"><span class="comment"># Example:</span></div><div class="line"><span class="comment"># &#123;"log":"[info:2016-02-16T16:04:05.930-08:00] Some log text here\n","stream":"stdout","time":"2016-02-17T00:04:05.931087621Z"&#125;</span></div><div class="line">&lt;<span class="built_in">source</span>&gt;</div><div class="line">  <span class="built_in">type</span> tail</div><div class="line">  path /var/<span class="built_in">log</span>/containers/*.<span class="built_in">log</span></div><div class="line">  pos_file /var/<span class="built_in">log</span>/es-containers.log.pos</div><div class="line">  time_format %Y-%m-%dT%H:%M:%S.%NZ</div><div class="line">  tag kubernetes.*</div><div class="line">  format json</div><div class="line">  read_from_head <span class="literal">true</span></div><div class="line">&lt;/<span class="built_in">source</span>&gt;</div><div class="line"></div><div class="line"><span class="comment"># Example:</span></div><div class="line"><span class="comment"># 2015-12-21 23:17:22,066 [salt.state       ][INFO    ] Completed state [net.ipv4.ip_forward] at time 23:17:22.066081</span></div><div class="line">&lt;<span class="built_in">source</span>&gt;</div><div class="line">  <span class="built_in">type</span> tail</div><div class="line">  format /^(?&lt;time&gt;[^ ]* [^ ,]*)[^\[]*\[[^\]]*\]\[(?&lt;severity&gt;[^ \]]*) *\] (?&lt;message&gt;.*)$/</div><div class="line">  time_format %Y-%m-%d %H:%M:%S</div><div class="line">  path /var/<span class="built_in">log</span>/salt/minion</div><div class="line">  pos_file /var/<span class="built_in">log</span>/es-salt.pos</div><div class="line">  tag salt</div><div class="line">&lt;/<span class="built_in">source</span>&gt;</div><div class="line"></div><div class="line"><span class="comment"># Example:</span></div><div class="line"><span class="comment"># Dec 21 23:17:22 gke-foo-1-1-4b5cbd14-node-4eoj startupscript: Finished running startup script /var/run/google.startup.script</span></div><div class="line">&lt;<span class="built_in">source</span>&gt;</div><div class="line">  <span class="built_in">type</span> tail</div><div class="line">  format syslog</div><div class="line">  path /var/<span class="built_in">log</span>/startupscript.log</div><div class="line">  pos_file /var/<span class="built_in">log</span>/es-startupscript.log.pos</div><div class="line">  tag startupscript</div><div class="line">&lt;/<span class="built_in">source</span>&gt;</div><div class="line"></div><div class="line"><span class="comment"># Examples:</span></div><div class="line"><span class="comment"># time="2016-02-04T06:51:03.053580605Z" level=info msg="GET /containers/json"</span></div><div class="line"><span class="comment"># time="2016-02-04T07:53:57.505612354Z" level=error msg="HTTP Error" err="No such image: -f" statusCode=404</span></div><div class="line">&lt;<span class="built_in">source</span>&gt;</div><div class="line">  <span class="built_in">type</span> tail</div><div class="line">  format /^time=<span class="string">"(?&lt;time&gt;[^)]*)"</span> level=(?&lt;severity&gt;[^ ]*) msg=<span class="string">"(?&lt;message&gt;[^"</span>]*)<span class="string">"( err="</span>(?&lt;error&gt;[^<span class="string">"]*)"</span>)?( statusCode=($&lt;status_code&gt;\d+))?/</div><div class="line">  path /var/<span class="built_in">log</span>/docker.log</div><div class="line">  pos_file /var/<span class="built_in">log</span>/es-docker.log.pos</div><div class="line">  tag docker</div><div class="line">&lt;/<span class="built_in">source</span>&gt;</div><div class="line"></div><div class="line"><span class="comment"># Example:</span></div><div class="line"><span class="comment"># 2016/02/04 06:52:38 filePurge: successfully removed file /var/etcd/data/member/wal/00000000000006d0-00000000010a23d1.wal</span></div><div class="line">&lt;<span class="built_in">source</span>&gt;</div><div class="line">  <span class="built_in">type</span> tail</div><div class="line">  <span class="comment"># Not parsing this, because it doesn't have anything particularly useful to</span></div><div class="line">  <span class="comment"># parse out of it (like severities).</span></div><div class="line">  format none</div><div class="line">  path /var/<span class="built_in">log</span>/etcd.log</div><div class="line">  pos_file /var/<span class="built_in">log</span>/es-etcd.log.pos</div><div class="line">  tag etcd</div><div class="line">&lt;/<span class="built_in">source</span>&gt;</div><div class="line"></div><div class="line"><span class="comment"># Multi-line parsing is required for all the kube logs because very large log</span></div><div class="line"><span class="comment"># statements, such as those that include entire object bodies, get split into</span></div><div class="line"><span class="comment"># multiple lines by glog.</span></div><div class="line"></div><div class="line"><span class="comment"># Example:</span></div><div class="line"><span class="comment"># I0204 07:32:30.020537    3368 server.go:1048] POST /stats/container/: (13.972191ms) 200 [[Go-http-client/1.1] 10.244.1.3:40537]</span></div><div class="line">&lt;<span class="built_in">source</span>&gt;</div><div class="line">  <span class="built_in">type</span> tail</div><div class="line">  format multiline</div><div class="line">  multiline_flush_interval 5s</div><div class="line">  format_firstline /^\w\d&#123;4&#125;/</div><div class="line">  format1 /^(?&lt;severity&gt;\w)(?&lt;time&gt;\d&#123;4&#125; [^\s]*)\s+(?&lt;pid&gt;\d+)\s+(?&lt;<span class="built_in">source</span>&gt;[^ \]]+)\] (?&lt;message&gt;.*)/</div><div class="line">  time_format %m%d %H:%M:%S.%N</div><div class="line">  path /var/<span class="built_in">log</span>/kubelet.log</div><div class="line">  pos_file /var/<span class="built_in">log</span>/es-kubelet.log.pos</div><div class="line">  tag kubelet</div><div class="line">&lt;/<span class="built_in">source</span>&gt;</div><div class="line"></div><div class="line"><span class="comment"># Example:</span></div><div class="line"><span class="comment"># I1118 21:26:53.975789       6 proxier.go:1096] Port "nodePort for kube-system/default-http-backend:http" (:31429/tcp) was open before and is still needed</span></div><div class="line">&lt;<span class="built_in">source</span>&gt;</div><div class="line">  <span class="built_in">type</span> tail</div><div class="line">  format multiline</div><div class="line">  multiline_flush_interval 5s</div><div class="line">  format_firstline /^\w\d&#123;4&#125;/</div><div class="line">  format1 /^(?&lt;severity&gt;\w)(?&lt;time&gt;\d&#123;4&#125; [^\s]*)\s+(?&lt;pid&gt;\d+)\s+(?&lt;<span class="built_in">source</span>&gt;[^ \]]+)\] (?&lt;message&gt;.*)/</div><div class="line">  time_format %m%d %H:%M:%S.%N</div><div class="line">  path /var/<span class="built_in">log</span>/kube-proxy.log</div><div class="line">  pos_file /var/<span class="built_in">log</span>/es-kube-proxy.log.pos</div><div class="line">  tag kube-proxy</div><div class="line">&lt;/<span class="built_in">source</span>&gt;</div><div class="line"></div><div class="line"><span class="comment"># Example:</span></div><div class="line"><span class="comment"># I0204 07:00:19.604280       5 handlers.go:131] GET /api/v1/nodes: (1.624207ms) 200 [[kube-controller-manager/v1.1.3 (linux/amd64) kubernetes/6a81b50] 127.0.0.1:38266]</span></div><div class="line">&lt;<span class="built_in">source</span>&gt;</div><div class="line">  <span class="built_in">type</span> tail</div><div class="line">  format multiline</div><div class="line">  multiline_flush_interval 5s</div><div class="line">  format_firstline /^\w\d&#123;4&#125;/</div><div class="line">  format1 /^(?&lt;severity&gt;\w)(?&lt;time&gt;\d&#123;4&#125; [^\s]*)\s+(?&lt;pid&gt;\d+)\s+(?&lt;<span class="built_in">source</span>&gt;[^ \]]+)\] (?&lt;message&gt;.*)/</div><div class="line">  time_format %m%d %H:%M:%S.%N</div><div class="line">  path /var/<span class="built_in">log</span>/kube-apiserver.log</div><div class="line">  pos_file /var/<span class="built_in">log</span>/es-kube-apiserver.log.pos</div><div class="line">  tag kube-apiserver</div><div class="line">&lt;/<span class="built_in">source</span>&gt;</div><div class="line"></div><div class="line"><span class="comment"># Example:</span></div><div class="line"><span class="comment"># I0204 06:55:31.872680       5 servicecontroller.go:277] LB already exists and doesn't need update for service kube-system/kube-ui</span></div><div class="line">&lt;<span class="built_in">source</span>&gt;</div><div class="line">  <span class="built_in">type</span> tail</div><div class="line">  format multiline</div><div class="line">  multiline_flush_interval 5s</div><div class="line">  format_firstline /^\w\d&#123;4&#125;/</div><div class="line">  format1 /^(?&lt;severity&gt;\w)(?&lt;time&gt;\d&#123;4&#125; [^\s]*)\s+(?&lt;pid&gt;\d+)\s+(?&lt;<span class="built_in">source</span>&gt;[^ \]]+)\] (?&lt;message&gt;.*)/</div><div class="line">  time_format %m%d %H:%M:%S.%N</div><div class="line">  path /var/<span class="built_in">log</span>/kube-controller-manager.log</div><div class="line">  pos_file /var/<span class="built_in">log</span>/es-kube-controller-manager.log.pos</div><div class="line">  tag kube-controller-manager</div><div class="line">&lt;/<span class="built_in">source</span>&gt;</div><div class="line"></div><div class="line"><span class="comment"># Example:</span></div><div class="line"><span class="comment"># W0204 06:49:18.239674       7 reflector.go:245] pkg/scheduler/factory/factory.go:193: watch of *api.Service ended with: 401: The event in requested index is outdated and cleared (</span></div><div class="line">the requested <span class="built_in">history</span> has been cleared [2578313/2577886]) [2579312]</div><div class="line">&lt;<span class="built_in">source</span>&gt;</div><div class="line">  <span class="built_in">type</span> tail</div><div class="line">  format multiline</div><div class="line">  multiline_flush_interval 5s</div><div class="line">  format_firstline /^\w\d&#123;4&#125;/</div><div class="line">  format1 /^(?&lt;severity&gt;\w)(?&lt;time&gt;\d&#123;4&#125; [^\s]*)\s+(?&lt;pid&gt;\d+)\s+(?&lt;<span class="built_in">source</span>&gt;[^ \]]+)\] (?&lt;message&gt;.*)/</div><div class="line">  time_format %m%d %H:%M:%S.%N</div><div class="line">  path /var/<span class="built_in">log</span>/kube-scheduler.log</div><div class="line">  pos_file /var/<span class="built_in">log</span>/es-kube-scheduler.log.pos</div><div class="line">  tag kube-scheduler</div><div class="line">&lt;/<span class="built_in">source</span>&gt;</div><div class="line"></div><div class="line"><span class="comment"># Example:</span></div><div class="line"><span class="comment"># I1104 10:36:20.242766       5 rescheduler.go:73] Running Rescheduler</span></div><div class="line">&lt;<span class="built_in">source</span>&gt;</div><div class="line">  <span class="built_in">type</span> tail</div><div class="line">  format multiline</div><div class="line">  multiline_flush_interval 5s</div><div class="line">  format_firstline /^\w\d&#123;4&#125;/</div><div class="line">  format1 /^(?&lt;severity&gt;\w)(?&lt;time&gt;\d&#123;4&#125; [^\s]*)\s+(?&lt;pid&gt;\d+)\s+(?&lt;<span class="built_in">source</span>&gt;[^ \]]+)\] (?&lt;message&gt;.*)/</div><div class="line">  time_format %m%d %H:%M:%S.%N</div><div class="line">  path /var/<span class="built_in">log</span>/rescheduler.log</div><div class="line">  pos_file /var/<span class="built_in">log</span>/es-rescheduler.log.pos</div><div class="line">  tag rescheduler</div><div class="line">&lt;/<span class="built_in">source</span>&gt;</div><div class="line"></div><div class="line"><span class="comment"># Example:</span></div><div class="line"><span class="comment"># I0603 15:31:05.793605       6 cluster_manager.go:230] Reading config from path /etc/gce.conf</span></div><div class="line">&lt;<span class="built_in">source</span>&gt;</div><div class="line">  <span class="built_in">type</span> tail</div><div class="line">  format multiline</div><div class="line">  multiline_flush_interval 5s</div><div class="line">  format_firstline /^\w\d&#123;4&#125;/</div><div class="line">  format1 /^(?&lt;severity&gt;\w)(?&lt;time&gt;\d&#123;4&#125; [^\s]*)\s+(?&lt;pid&gt;\d+)\s+(?&lt;<span class="built_in">source</span>&gt;[^ \]]+)\] (?&lt;message&gt;.*)/</div><div class="line">  time_format %m%d %H:%M:%S.%N</div><div class="line">  path /var/<span class="built_in">log</span>/glbc.log</div><div class="line">  pos_file /var/<span class="built_in">log</span>/es-glbc.log.pos</div><div class="line">  tag glbc</div><div class="line">&lt;/<span class="built_in">source</span>&gt;</div><div class="line"></div><div class="line"><span class="comment"># Example:</span></div><div class="line"><span class="comment"># I0603 15:31:05.793605       6 cluster_manager.go:230] Reading config from path /etc/gce.conf</span></div><div class="line">&lt;<span class="built_in">source</span>&gt;</div><div class="line">  <span class="built_in">type</span> tail</div><div class="line">  format multiline</div><div class="line">  multiline_flush_interval 5s</div><div class="line">  format_firstline /^\w\d&#123;4&#125;/</div><div class="line">  format1 /^(?&lt;severity&gt;\w)(?&lt;time&gt;\d&#123;4&#125; [^\s]*)\s+(?&lt;pid&gt;\d+)\s+(?&lt;<span class="built_in">source</span>&gt;[^ \]]+)\] (?&lt;message&gt;.*)/</div><div class="line">  time_format %m%d %H:%M:%S.%N</div><div class="line">  path /var/<span class="built_in">log</span>/cluster-autoscaler.log</div><div class="line">  pos_file /var/<span class="built_in">log</span>/es-cluster-autoscaler.log.pos</div><div class="line">  tag cluster-autoscaler</div><div class="line">&lt;/<span class="built_in">source</span>&gt;</div><div class="line"></div><div class="line">&lt;filter kubernetes.**&gt;</div><div class="line">  <span class="built_in">type</span> kubernetes_metadata</div><div class="line">  kubernetes_url http://172.21.1.200:8080</div><div class="line">&lt;/filter&gt;</div><div class="line"></div><div class="line">&lt;match **&gt;</div><div class="line">   <span class="built_in">type</span> elasticsearch</div><div class="line">   log_level info</div><div class="line">   include_tag_key <span class="literal">true</span></div><div class="line">   host 172.21.2.40</div><div class="line">   port 9211</div><div class="line">   logstash_format <span class="literal">true</span></div><div class="line">   <span class="comment"># Set the chunk limit the same as for fluentd-gcp.</span></div><div class="line">   buffer_chunk_limit 2M</div><div class="line">   <span class="comment"># Cap buffer memory usage to 2MiB/chunk * 32 chunks = 64 MiB</span></div><div class="line">   buffer_queue_limit 32</div><div class="line">   flush_interval 5s</div><div class="line">   <span class="comment"># Never wait longer than 5 minutes between retries.</span></div><div class="line">   max_retry_wait 30</div><div class="line">   <span class="comment"># Disable the limit on the number of retries (retry forever).</span></div><div class="line">   disable_retry_limit</div><div class="line">   <span class="comment"># Use multiple threads for processing.</span></div><div class="line">   num_threads 8</div><div class="line">&lt;/match&gt;</div></pre></td></tr></table></figure><p>修改其中的kubernetes_url地址为kubernetes的master节点地址<br>修改host,port分别为es的地址和端口</p><h3 id="部署fluent镜像"><a href="#部署fluent镜像" class="headerlink" title="部署fluent镜像"></a>部署fluent镜像</h3><p>使用daemonset部署fluent可以使得fluent在每台主机上部署一个POD</p><blockquote><p>cat fluentd-es.yaml</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></div><div class="line"><span class="attr">kind:</span> <span class="string">DaemonSet</span></div><div class="line"><span class="attr">metadata:</span></div><div class="line"><span class="attr">  name:</span> <span class="string">fluentd-es</span></div><div class="line"><span class="attr">  namespace:</span> <span class="string">kube-system</span></div><div class="line"><span class="attr">  labels:</span></div><div class="line"><span class="attr">    k8s-app:</span> <span class="string">fluentd-es</span></div><div class="line"><span class="attr">spec:</span></div><div class="line"><span class="attr">  template:</span></div><div class="line"><span class="attr">    metadata:</span></div><div class="line"><span class="attr">      labels:</span></div><div class="line"><span class="attr">        k8s-app:</span> <span class="string">fluentd-es</span></div><div class="line"><span class="attr">    spec:</span></div><div class="line"><span class="attr">      containers:</span></div><div class="line"><span class="attr">      - name:</span> <span class="string">fluentd-es</span></div><div class="line"><span class="attr">        image:</span> <span class="number">172.21</span><span class="number">.3</span><span class="number">.106</span><span class="string">:5000/fluentd-es</span></div><div class="line"><span class="attr">        resources:</span></div><div class="line"><span class="attr">          limits:</span></div><div class="line"><span class="attr">            memory:</span> <span class="number">200</span><span class="string">Mi</span></div><div class="line"><span class="attr">          requests:</span></div><div class="line"><span class="attr">            cpu:</span> <span class="number">250</span><span class="string">m</span></div><div class="line"><span class="attr">            memory:</span> <span class="number">200</span><span class="string">Mi</span></div><div class="line"><span class="attr">        volumeMounts:</span></div><div class="line"><span class="attr">        - name:</span> <span class="string">varlog</span></div><div class="line"><span class="attr">          mountPath:</span> <span class="string">/var/log</span></div><div class="line"><span class="attr">        - name:</span> <span class="string">varlibdockercontainers</span></div><div class="line"><span class="attr">          mountPath:</span> <span class="string">/var/lib/docker/containers</span></div><div class="line"><span class="attr">          readOnly:</span> <span class="literal">true</span></div><div class="line"><span class="attr">      terminationGracePeriodSeconds:</span> <span class="number">30</span></div><div class="line"><span class="attr">      volumes:</span></div><div class="line"><span class="attr">      - name:</span> <span class="string">varlog</span></div><div class="line"><span class="attr">        hostPath:</span></div><div class="line"><span class="attr">          path:</span> <span class="string">/var/log</span></div><div class="line"><span class="attr">      - name:</span> <span class="string">varlibdockercontainers</span></div><div class="line"><span class="attr">        hostPath:</span></div><div class="line"><span class="attr">          path:</span> <span class="string">/var/lib/docker/containers</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;安装es集群&quot;&gt;&lt;a href=&quot;#安装es集群&quot; class=&quot;headerlink&quot; title=&quot;安装es集群&quot;&gt;&lt;/a&gt;安装es集群&lt;/h3&gt;&lt;p&gt;假设es集群在k8s集群外,不要使用root用户。这里安装的版本是2.4.0&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;tar -zxvf elasticsearch-2.4.0.tar.gz&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;修改config文件夹下的elasticsearch.yml&lt;/p&gt;
&lt;figure class=&quot;highlight yml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;cluster.name:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;elk_cluster&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;node.name:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;elk_node01&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;path.data:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;/csdbomc/elasticsearch-2.4.0/data&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;path.logs:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;/csdbomc/elasticsearch-2.4.0/logs&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;network.host:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;172.21&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.201&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;network.port:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;9201&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;http.cors.enabled&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;//&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;http.cors.allow-origin:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;/.*/&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;http.cors.allow-methods&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;OPTIONS,&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;HEAD,&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;GET,&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;POST,&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;PUT,&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;DELETE&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;http.cors.allow-headers&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;X-Requested-With,X-Auth-Token,Content-Type, Content-Length, Authorization&quot;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;到bin目录下执行（需要提前安装java）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;./elasticsearch -d&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;制作fluent镜像&quot;&gt;&lt;a href=&quot;#制作fluent镜像&quot; class=&quot;headerlink&quot; title=&quot;制作fluent镜像&quot;&gt;&lt;/a&gt;制作fluent镜像&lt;/h3&gt;&lt;p&gt;Dockerfile内容如下:&lt;/p&gt;
&lt;figure class=&quot;highlight dockerfile&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt;  badwolf/fluentd-es-image&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Ensure there are enough file descriptors for running Fluentd.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#RUN ulimit -n 65536&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Disable prompts from apt.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Copy the Fluentd configuration file.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; td-agent.conf /etc/td-agent/td-agent.conf&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;bash&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;bash&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;bash&quot;&gt;ENV LD_PRELOAD /opt/td-agent/embedded/lib/libjemalloc.so&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;bash&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;bash&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Run the Fluentd service.&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;bash&quot;&gt;ENTRYPOINT [&lt;span class=&quot;string&quot;&gt;&quot;td-agent&quot;&lt;/span&gt;]&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="docker" scheme="http://www.51yimo.com/categories/docker/"/>
    
    
      <category term="docker" scheme="http://www.51yimo.com/tags/docker/"/>
    
      <category term="kubernetes" scheme="http://www.51yimo.com/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>Docker镜像中国加速</title>
    <link href="http://www.51yimo.com/2017/09/25/docker-image-mirror/"/>
    <id>http://www.51yimo.com/2017/09/25/docker-image-mirror/</id>
    <published>2017-09-25T14:23:15.000Z</published>
    <updated>2017-09-25T15:01:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>通过 Docker 官方镜像加速，中国区用户能够快速访问最流行的 Docker 镜像。该镜像托管于中国大陆，本地用户现在将会享受到更快的下载速度和更强的稳定性，从而能够更敏捷地开发和交付 Docker 化应用。</p><p>Docker 中国官方镜像加速可通过 registry.docker-cn.com 访问。该镜像库只包含流行的公有镜像。私有镜像仍需要从美国镜像库中拉取。</p><p>您可以使用以下命令直接从该镜像加速地址进行拉取：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker pull registry.docker-cn.com/myname/myrepo:mytag</div></pre></td></tr></table></figure><p>例如:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker pull registry.docker-cn.com/library/ubuntu:16.04</div></pre></td></tr></table></figure><blockquote><p>注: 除非您修改了 Docker 守护进程的 <code>--registry-mirror</code> 参数 (见下文), 否则您将需要完整地指定官方镜像的名称。例如，library/ubuntu、library/redis、library/nginx。</p></blockquote><a id="more"></a><p><strong>使用 –registry-mirror 配置 Docker 守护进程</strong><br>您可以配置 Docker 守护进程默认使用 Docker 官方镜像加速。这样您可以默认通过官方镜像加速拉取镜像，而无需在每次拉取时指定 registry.docker-cn.com。</p><p>您可以在 Docker 守护进程启动时传入 –registry-mirror 参数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker --registry-mirror=https://registry.docker-cn.com daemon</div></pre></td></tr></table></figure><p>为了永久性保留更改，您可以修改 /etc/docker/daemon.json 文件并添加上 registry-mirrors 键值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"registry-mirrors"</span>: [<span class="string">"https://registry.docker-cn.com"</span>]</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>修改保存后重启 Docker 以使配置生效。</p><blockquote><p>注: 您也可以使用适用于 Mac 的 Docker 和适用于 Windows 的 Docker 来进行设置。</p></blockquote><p>原文连接:</p><blockquote><p><a href="https://www.docker-cn.com/registry-mirror" target="_blank" rel="external">https://www.docker-cn.com/registry-mirror</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过 Docker 官方镜像加速，中国区用户能够快速访问最流行的 Docker 镜像。该镜像托管于中国大陆，本地用户现在将会享受到更快的下载速度和更强的稳定性，从而能够更敏捷地开发和交付 Docker 化应用。&lt;/p&gt;
&lt;p&gt;Docker 中国官方镜像加速可通过 registry.docker-cn.com 访问。该镜像库只包含流行的公有镜像。私有镜像仍需要从美国镜像库中拉取。&lt;/p&gt;
&lt;p&gt;您可以使用以下命令直接从该镜像加速地址进行拉取：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ docker pull registry.docker-cn.com/myname/myrepo:mytag&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;例如:&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ docker pull registry.docker-cn.com/library/ubuntu:16.04&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;注: 除非您修改了 Docker 守护进程的 &lt;code&gt;--registry-mirror&lt;/code&gt; 参数 (见下文), 否则您将需要完整地指定官方镜像的名称。例如，library/ubuntu、library/redis、library/nginx。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="docker" scheme="http://www.51yimo.com/categories/docker/"/>
    
    
      <category term="docker" scheme="http://www.51yimo.com/tags/docker/"/>
    
      <category term="image" scheme="http://www.51yimo.com/tags/image/"/>
    
  </entry>
  
  <entry>
    <title>调用Harbor RestAPI增加认证</title>
    <link href="http://www.51yimo.com/2017/09/25/harbor-api-token/"/>
    <id>http://www.51yimo.com/2017/09/25/harbor-api-token/</id>
    <published>2017-09-25T02:57:19.000Z</published>
    <updated>2017-09-25T03:09:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>1.通过Rest API访问Harbor需要Token认证信息</p><blockquote><p>curl -u username:password <a href="http://172.21.1.19/api/users" target="_blank" rel="external">http://172.21.1.19/api/users</a></p></blockquote><p>但是通过restclient访问时像curl一样添加-u参数，需要在Header中<br>增加参数</p><blockquote><p>Authorization: Basic base64encoded(user:pass)</p></blockquote><p>如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Builder builder = restClient.target(url + <span class="string">"/api/users"</span>).request();</div><div class="line">String auth = Base64.getEncoder().encodeToString(<span class="string">"user:password"</span>.getBytes())；</div><div class="line">builder.header(<span class="string">"Authorization"</span>,<span class="string">"Basic "</span> + auth);</div></pre></td></tr></table></figure><p>在JAVA8中，可以直接使用Base64工具类。</p><p>参考链接:</p><blockquote><p><a href="https://stackoverflow.com/questions/29116595/how-to-send-u-data-of-curl-in-rest-client" target="_blank" rel="external">https://stackoverflow.com/questions/29116595/how-to-send-u-data-of-curl-in-rest-client</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.通过Rest API访问Harbor需要Token认证信息&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;curl -u username:password &lt;a href=&quot;http://172.21.1.19/api/users&quot; target=&quot;_blank&quot; rel=
      
    
    </summary>
    
      <category term="harbor" scheme="http://www.51yimo.com/categories/harbor/"/>
    
    
      <category term="harbor" scheme="http://www.51yimo.com/tags/harbor/"/>
    
  </entry>
  
  <entry>
    <title>MAC上安装docker</title>
    <link href="http://www.51yimo.com/2017/09/21/install-docker-via-dlite/"/>
    <id>http://www.51yimo.com/2017/09/21/install-docker-via-dlite/</id>
    <published>2017-09-21T13:09:47.000Z</published>
    <updated>2017-09-21T13:19:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>在MAC上安装docker for mac后，docker程序会在用户登录mac后自动启动，而如果用户没有登录，而是通过ssh远程登录的情况下，docker是无法启动的，在配置launchctl也无法配置自动启动命令。</p><p>经过一番搜索后，可以使用dlite来通过命令启动docker。</p><p>1.项目地址：</p><blockquote><p><a href="https://github.com/nlf/dlite" target="_blank" rel="external">https://github.com/nlf/dlite</a></p></blockquote><p>2.在release中下载编译好的二进制文件，将文件放到<em>PATH</em>下，最简单的放到<em>/usr/local/bin/</em>目录下，然后执行</p><blockquote><p>sudo dlite init</p></blockquote><p>注意需要给dlite可执行权限</p><blockquote><p>chmod +x dlite</p></blockquote><p>3.执行命令后，开始询问创建虚拟机的参数，一路回车，但是最后报错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Saving configuration: <span class="keyword">done</span></div><div class="line">Creating ssh key pair: <span class="keyword">done</span></div><div class="line">Adding host to ssh config: ERROR!</div><div class="line">Adding host to ssh config: | open /var/root/.ssh/config: no such file or directory</div></pre></td></tr></table></figure><p>手动创建.ssh目录以及config文件</p><blockquote><p>sudo mkdir /var/root/.ssh</p><p>sudo touch /var/root/.ssh/config</p></blockquote><p>然后重新执行sudo dlite init</p><a id="more"></a><p>而后报新的错误</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Creating tool binaries: <span class="keyword">done</span> Creating tool binaries: |</div><div class="line">Creating disk: ERROR!</div><div class="line">signal: trace/BPT <span class="built_in">trap</span></div></pre></td></tr></table></figure><p>需要安装依赖</p><blockquote><p>brew install opam golang libev</p><p>opam init</p><p>eval <code>opam config env</code></p><p>opam install uri qcow.0.7.0 conf-libev logs fmt qcow-format</p></blockquote><p>然后仍然报错,信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Next we<span class="string">'ll run a few steps that require sudo, you may be prompted for your password. </span></div><div class="line"><span class="string">Creating /etc/resoModifying /etc/exports: ERROR! done</span></div></pre></td></tr></table></figure><p>根据github上的issue</p><blockquote><p><a href="https://github.com/nlf/dlite/issues/218" target="_blank" rel="external">https://github.com/nlf/dlite/issues/218</a></p></blockquote><p>问题在于执行sudo dlite init是不能加sudo,再次执行</p><blockquote><p>dlite init</p></blockquote><p>即可</p><blockquote><p>dlite start</p></blockquote><p>执行docker命令报错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ docker ps</div><div class="line">Error response from daemon: Unable to connect to the virtual machine</div></pre></td></tr></table></figure><p>执行ssh docker@local.docker 报错。 正常Dlite 会自动添加 local.docker 到 OS X 的 hosts 文件内。</p><p>需要手动更改hosts文件</p><blockquote><p>dlite ip </p></blockquote><p>查看ip 为192.168.64.2</p><blockquote><p>sudo vi /etc/hosts</p></blockquote><p>增加一行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">192.168.64.2    local.docker</div></pre></td></tr></table></figure><p>后执行docker ps就可以了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ docker ps</div><div class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</div></pre></td></tr></table></figure><p>可参考链接</p><blockquote><p><a href="http://holys.im/2016/02/22/run-docker-on-osx-with-dlite/" target="_blank" rel="external">http://holys.im/2016/02/22/run-docker-on-osx-with-dlite/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在MAC上安装docker for mac后，docker程序会在用户登录mac后自动启动，而如果用户没有登录，而是通过ssh远程登录的情况下，docker是无法启动的，在配置launchctl也无法配置自动启动命令。&lt;/p&gt;
&lt;p&gt;经过一番搜索后，可以使用dlite来通过命令启动docker。&lt;/p&gt;
&lt;p&gt;1.项目地址：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/nlf/dlite&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/nlf/dlite&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2.在release中下载编译好的二进制文件，将文件放到&lt;em&gt;PATH&lt;/em&gt;下，最简单的放到&lt;em&gt;/usr/local/bin/&lt;/em&gt;目录下，然后执行&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;sudo dlite init&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;注意需要给dlite可执行权限&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;chmod +x dlite&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;3.执行命令后，开始询问创建虚拟机的参数，一路回车，但是最后报错&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Saving configuration: &lt;span class=&quot;keyword&quot;&gt;done&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Creating ssh key pair: &lt;span class=&quot;keyword&quot;&gt;done&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Adding host to ssh config: ERROR!&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Adding host to ssh config: | open /var/root/.ssh/config: no such file or directory&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;手动创建.ssh目录以及config文件&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;sudo mkdir /var/root/.ssh&lt;/p&gt;
&lt;p&gt;sudo touch /var/root/.ssh/config&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;然后重新执行sudo dlite init&lt;/p&gt;
    
    </summary>
    
      <category term="docker" scheme="http://www.51yimo.com/categories/docker/"/>
    
    
      <category term="docker" scheme="http://www.51yimo.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Go 指南学习笔记九</title>
    <link href="http://www.51yimo.com/2017/09/15/go-e6-8c-87-e5-8d-97-e5-ad-a6-e4-b9-a0-e7-ac-94-e8-ae-b0-e4-b9-9d/"/>
    <id>http://www.51yimo.com/2017/09/15/go-e6-8c-87-e5-8d-97-e5-ad-a6-e4-b9-a0-e7-ac-94-e8-ae-b0-e4-b9-9d/</id>
    <published>2017-09-15T13:17:04.000Z</published>
    <updated>2017-09-19T14:20:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>1.接口，接口为一组方法定义的集合</p><blockquote><p>和其它语言不同，类型实现接口不需要显示声明，不需要implements关键字</p></blockquote><p>定义接口和实现接口互不依赖</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> Abser <span class="keyword">interface</span> &#123;</div><div class="line">  Abs() <span class="keyword">float64</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">type</span> MyFloat <span class="keyword">float64</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f MyFloat)</span> <span class="title">Abs</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</div><div class="line">  <span class="keyword">if</span> f &lt; <span class="number">0</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">float64</span>(-f)</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">float64</span>(f)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</div><div class="line">  X, Y <span class="keyword">float64</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v *Vertex)</span> <span class="title">Abs</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</div><div class="line">  <span class="keyword">return</span> math.Sqrt(v.X*v.X + v.Y*v.Y)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">  <span class="keyword">var</span> a Abser</div><div class="line">  f := MyFloat(-math.Sqrt2)</div><div class="line">  v := Vertex&#123;<span class="number">3</span>, <span class="number">4</span>&#125;</div><div class="line"></div><div class="line">  a = f  <span class="comment">// a MyFloat 实现了 Abser</span></div><div class="line">  a = &amp;v <span class="comment">// a *Vertex 实现了 Abser</span></div><div class="line"></div><div class="line">  <span class="comment">// 下面一行，v 是一个 Vertex（而不是 *Vertex）</span></div><div class="line">  <span class="comment">// 所以没有实现 Abser。</span></div><div class="line">  a = v</div><div class="line"></div><div class="line">  fmt.Println(a.Abs())</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.接口，接口为一组方法定义的集合&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;和其它语言不同，类型实现接口不需要显示声明，不需要implements关键字&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;定义接口和实现接口互不依赖&lt;/p&gt;
&lt;figure class=&quot;highli
      
    
    </summary>
    
      <category term="golang" scheme="http://www.51yimo.com/categories/golang/"/>
    
    
  </entry>
  
  <entry>
    <title>Go 指南学习笔记八</title>
    <link href="http://www.51yimo.com/2017/09/11/go-e6-8c-87-e5-8d-97-e5-ad-a6-e4-b9-a0-e7-ac-94-e8-ae-b0-e5-85-ab/"/>
    <id>http://www.51yimo.com/2017/09/11/go-e6-8c-87-e5-8d-97-e5-ad-a6-e4-b9-a0-e7-ac-94-e8-ae-b0-e5-85-ab/</id>
    <published>2017-09-11T05:22:53.000Z</published>
    <updated>2017-09-19T14:21:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>1.结构体方法</p><p>Go语言不像JAVA，没有类的定义，但是依然可以为结构体定义方法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"><span class="keyword">import</span> (</div><div class="line">  <span class="string">"fmt"</span></div><div class="line">  <span class="string">"math"</span></div><div class="line">)</div><div class="line"><span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</div><div class="line">  X, Y <span class="keyword">float64</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v *Vertex)</span> <span class="title">Abs</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</div><div class="line">  <span class="keyword">return</span> math.Sqrt(v.X * v.X + v.Y * v.Y)</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">  v := &amp;Vertex&#123;<span class="number">3</span>,<span class="number">4</span>&#125;</div><div class="line">  fmt.Println(v.Abs()) <span class="comment">// 5</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>2.还可以对包内任意类型定义任意方法，但是不能对包外的类型或者基础类型定义方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">  <span class="string">"fmt"</span></div><div class="line">  <span class="string">"math"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">type</span> MyFloat <span class="keyword">float64</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f MyFloat)</span> <span class="title">Abs</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</div><div class="line">  <span class="keyword">if</span> f &lt; <span class="number">0</span> &#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">float64</span>(-f)</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">float64</span>(f)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">  f := MyFloat(-math.Sqrt2)</div><div class="line">  fmt.Println(f.Abs()) <span class="comment">// 1.4142135623730951</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>3.方法可以与类型和类型的指针相关联</p><p>如1中的<code>Abs方法是作用的</code>*Vertex指针类型上</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v *Vertex)</span> <span class="title">Scale</span><span class="params">(f <span class="keyword">float64</span>)</span></span>&#123;</div><div class="line">  v.X = v.X * f</div><div class="line">  v.Y = v.Y * f</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>与</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v Vertex)</span> <span class="title">Scale</span><span class="params">(f <span class="keyword">float64</span>)</span></span>&#123;</div><div class="line">  v.X = v.X * f</div><div class="line">  v.Y = v.Y * f</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>的区别</p><pre><code class="go">v := *Vertex(<span class="number">3</span>,<span class="number">5</span>)v.Scale(<span class="number">5</span>)</code></pre><p>前边的是用*Vertex指针类型接受，是引用传递，所以会改变接受者v的原始值，而后边的是用变量（后者说是对象）接受，是值传递，会对v进行一份copy,而不会对原始值做更改。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.结构体方法&lt;/p&gt;
&lt;p&gt;Go语言不像JAVA，没有类的定义，但是依然可以为结构体定义方法。&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;
      
    
    </summary>
    
      <category term="golang" scheme="http://www.51yimo.com/categories/golang/"/>
    
    
  </entry>
  
  <entry>
    <title>Go 指南学习笔记七</title>
    <link href="http://www.51yimo.com/2017/09/07/go-e6-8c-87-e5-8d-97-e5-ad-a6-e4-b9-a0-e7-ac-94-e8-ae-b0-e4-b8-83/"/>
    <id>http://www.51yimo.com/2017/09/07/go-e6-8c-87-e5-8d-97-e5-ad-a6-e4-b9-a0-e7-ac-94-e8-ae-b0-e4-b8-83/</id>
    <published>2017-09-07T13:37:40.000Z</published>
    <updated>2017-09-19T14:22:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>闭包</p><ul><li>函数也是一个值，也可以像其它值一样传递。函数值也可以作为参数或者返回值</li><li>闭包是一个函数值，他引用了函数体之外的变量</li><li>这个函数值可以对引用的变量进行修改或者赋值</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">  <span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">adder</span><span class="params">()</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</div><div class="line">  sum := <span class="number">0</span></div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(x <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</div><div class="line">    sum += x</div><div class="line"><span class="keyword">return</span> sum</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">  pos, neg := adder(), adder()</div><div class="line">  <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</div><div class="line">    fmt.Println(pos(i), neg(<span class="number">-2</span>*i))</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">[Running] <span class="keyword">go</span> run <span class="string">"/Users/badwolf/Documents/go/hello/tempCodeRunnerFile.go"</span></div><div class="line"><span class="number">0</span> <span class="number">0</span></div><div class="line"><span class="number">1</span> <span class="number">-2</span></div><div class="line"><span class="number">3</span> <span class="number">-6</span></div><div class="line"><span class="number">6</span> <span class="number">-12</span></div><div class="line"><span class="number">10</span> <span class="number">-20</span></div><div class="line"><span class="number">15</span> <span class="number">-30</span></div><div class="line"><span class="number">21</span> <span class="number">-42</span></div><div class="line"><span class="number">28</span> <span class="number">-56</span></div><div class="line"><span class="number">36</span> <span class="number">-72</span></div><div class="line"><span class="number">45</span> <span class="number">-90</span></div><div class="line"></div><div class="line">[Done] exited with code=<span class="number">0</span> in <span class="number">0.605</span> seconds</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;闭包&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;函数也是一个值，也可以像其它值一样传递。函数值也可以作为参数或者返回值&lt;/li&gt;
&lt;li&gt;闭包是一个函数值，他引用了函数体之外的变量&lt;/li&gt;
&lt;li&gt;这个函数值可以对引用的变量进行修改或者赋值&lt;/li&gt;
&lt;/ul&gt;
&lt;figure clas
      
    
    </summary>
    
      <category term="golang" scheme="http://www.51yimo.com/categories/golang/"/>
    
    
  </entry>
  
  <entry>
    <title>zookeeper安装</title>
    <link href="http://www.51yimo.com/2017/09/06/zookeeper-e5-ae-89-e8-a3-85/"/>
    <id>http://www.51yimo.com/2017/09/06/zookeeper-e5-ae-89-e8-a3-85/</id>
    <published>2017-09-06T02:33:09.000Z</published>
    <updated>2017-11-01T06:16:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>1.下载安装文件，下载地址：<a href="http://mirrors.hust.edu.cn/apache/zookeeper/" target="_blank" rel="external">http://mirrors.hust.edu.cn/apache/zookeeper/</a></p><p>这里的下载的版本为zookeeper-3.4.10.tar.gz</p><p>2.解压下载的安装文件</p><blockquote><p>tar -zxvf&nbsp;zookeeper-3.4.10.tar.gz</p></blockquote><p>3.修改配置文件</p><blockquote><p>zookeeper-3.4.10/conf<br>mv zoo_sample.cfg zoo.cfg</p></blockquote><p>zoo.cfg可以根据需要修改配置信息,如clientPort=2181</p><p>4.启动zookeeper</p><blockquote><p>cd ../bin<br>./zkServer.sh start</p></blockquote><p>启动成功信息：</p><p><span style="background-color:#D3D3D3;">ZooKeeper JMX enabled by default</span></p><p><span style="background-color:#D3D3D3;">Using config: /root/zookeeper-3.4.10/bin/../conf/zoo.cfg</span></p><p><span style="background-color:#D3D3D3;">Starting zookeeper … STARTED</span></p><p>查看端口占用信息：</p><blockquote><p>netstat -an|grep 2181</p></blockquote><p>5.客户端连接测试</p><blockquote><p>./zkCli.sh -server 127.0.0.1</p></blockquote><p>连接成功后执行help命令可以查看帮助命令</p><p><span style="background-color:#D3D3D3;">[zk: 127.0.0.1(CONNECTED) 0] help</span></p><p><span style="background-color:#D3D3D3;">ZooKeeper -server host:port cmd args</span></p><p><span style="background-color:#D3D3D3;"> stat path [watch]</span></p><p><span style="background-color:#D3D3D3;"> set path data [version]</span></p><p><span style="background-color:#D3D3D3;"> ls path [watch]</span></p><p><span style="background-color:#D3D3D3;"> delquota [-n|-b] path</span></p><p><span style="background-color:#D3D3D3;"> ls2 path [watch]</span></p><p><span style="background-color:#D3D3D3;"> setAcl path acl</span></p><p><span style="background-color:#D3D3D3;"> setquota -n|-b val path</span></p><p><span style="background-color:#D3D3D3;"> history&nbsp;</span></p><p><span style="background-color:#D3D3D3;"> redo cmdno</span></p><p><span style="background-color:#D3D3D3;"> printwatches on|off</span></p><p><span style="background-color:#D3D3D3;"> delete path [version]</span></p><p><span style="background-color:#D3D3D3;"> sync path</span></p><p><span style="background-color:#D3D3D3;"> listquota path</span></p><p><span style="background-color:#D3D3D3;"> rmr path</span></p><p><span style="background-color:#D3D3D3;"> get path [watch]</span></p><p><span style="background-color:#D3D3D3;"> create [-s] [-e] path data acl</span></p><p><span style="background-color:#D3D3D3;"> addauth scheme auth</span></p><p><span style="background-color:#D3D3D3;"> quit&nbsp;</span></p><p><span style="background-color:#D3D3D3;"> getAcl path</span></p><p><span style="background-color:#D3D3D3;"> close&nbsp;</span></p><p><span style="background-color:#D3D3D3;"> connect host:port</span></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.下载安装文件，下载地址：&lt;a href=&quot;http://mirrors.hust.edu.cn/apache/zookeeper/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://mirrors.hust.edu.cn/apache/zoo
      
    
    </summary>
    
      <category term="Java" scheme="http://www.51yimo.com/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>Go 指南学习笔记六</title>
    <link href="http://www.51yimo.com/2017/09/05/go-e6-8c-87-e5-8d-97-e5-ad-a6-e4-b9-a0-e7-ac-94-e8-ae-b0-e5-85-ad/"/>
    <id>http://www.51yimo.com/2017/09/05/go-e6-8c-87-e5-8d-97-e5-ad-a6-e4-b9-a0-e7-ac-94-e8-ae-b0-e5-85-ad/</id>
    <published>2017-09-05T01:48:36.000Z</published>
    <updated>2017-09-19T14:23:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>1.map</p><p>map在使用之前必须使用make来创建，值为nil的map是空的，并且不能对它赋值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">  <span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">type</span> Vertex <span class="keyword">struct</span>&#123;</div><div class="line">  Lat, Long <span class="keyword">float64</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> m <span class="keyword">map</span>[<span class="keyword">string</span>]Vertex</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">  m = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]Vertex)</div><div class="line">  m[<span class="string">"Bell Labs"</span>] = Vertex&#123;<span class="number">40.68433</span>, <span class="number">-74.39967</span>&#125;</div><div class="line">  fmt.Println(m[<span class="string">"Bell Labs"</span>])<span class="comment">// &#123;40.68433 -74.39967&#125;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>2.和结构体语法类似</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> n = <span class="keyword">map</span>[<span class="keyword">string</span>]Vertex &#123;</div><div class="line">  <span class="string">"Bell Labs"</span>: Vertex&#123;<span class="number">40.68433</span>, <span class="number">-74.39967</span>,&#125;,</div><div class="line">  <span class="string">"Google"</span>:Vertex&#123;<span class="number">37.42202</span>, <span class="number">-122.08408</span>,&#125;,</div><div class="line">&#125;</div><div class="line">fmt.Println(n) <span class="comment">//map[Bell Labs:&#123;40.68433 -74.39967&#125; Google:&#123;37.42202 -122.08408&#125;]</span></div></pre></td></tr></table></figure><p>如果map的value值只是一个类型，可以在{}中将类型省略</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> k = <span class="keyword">map</span>[<span class="keyword">string</span>]Vertex&#123;</div><div class="line">  <span class="string">"Bell Labs"</span>: &#123;<span class="number">40.68433</span>, <span class="number">-74.39967</span>&#125;,</div><div class="line">  <span class="string">"Google"</span>: &#123;<span class="number">37.42202</span>, <span class="number">-122.08408</span>&#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>3.修改map</p><ul><li>插入或者修改元素: m[key] =&nbsp;<span style="white-space: pre-wrap; line-height: 1.6;">elem</span></li><li>获得元素:&nbsp;<span style="white-space: pre-wrap; line-height: 1.6;">elem = m[key]</span></li><li><span style="white-space: pre-wrap; line-height: 1.6;">删除元素: delete(m,key)</span></li><li><span style="white-space: pre-wrap; line-height: 1.6;">检测是否存在: <span style="line-height: 1.6;">elem, ok = m[key]</span></span></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.map&lt;/p&gt;
&lt;p&gt;map在使用之前必须使用make来创建，值为nil的map是空的，并且不能对它赋值&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;li
      
    
    </summary>
    
      <category term="golang" scheme="http://www.51yimo.com/categories/golang/"/>
    
    
  </entry>
  
  <entry>
    <title>Go 指南学习笔记五</title>
    <link href="http://www.51yimo.com/2017/09/03/go-e6-8c-87-e5-8d-97-e5-ad-a6-e4-b9-a0-e7-ac-94-e8-ae-b0-e4-ba-94/"/>
    <id>http://www.51yimo.com/2017/09/03/go-e6-8c-87-e5-8d-97-e5-ad-a6-e4-b9-a0-e7-ac-94-e8-ae-b0-e4-ba-94/</id>
    <published>2017-09-03T15:28:42.000Z</published>
    <updated>2017-09-19T14:25:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>1.数组：类型[n]T是有n个值的类型为T的数组</p><blockquote><p>var a [10] int</p></blockquote><p>变量a是一个有10个整数的数组。</p><p><span style="color:#FF0000;">数组不能改变大小</span></p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">  <span class="keyword">var</span> a [<span class="number">10</span>]<span class="keyword">string</span></div><div class="line">  a[<span class="number">0</span>] = <span class="string">"hello"</span></div><div class="line">  a[<span class="number">1</span>] = <span class="string">"world"</span></div><div class="line">  fmt.Println(a[<span class="number">0</span>], a[<span class="number">1</span>]) <span class="comment">//hello world</span></div><div class="line">  fmt.Println(a) <span class="comment">// [hello world</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>2.slice(切片),[]T为一个类型为T的slice,len(s)返回切片s的长度</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">s := []<span class="keyword">int</span>&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>&#125;</div><div class="line">fmt.Println(<span class="string">"s == "</span>, s)</div><div class="line"></div><div class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(s); i++ &#123;</div><div class="line">  fmt.Printf(<span class="string">"s[%d] = %d\n"</span>, i, s[i])</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//输出结果</span></div><div class="line">s == [<span class="number">2</span> <span class="number">3</span> <span class="number">5</span> <span class="number">7</span> <span class="number">11</span> <span class="number">13</span>]</div><div class="line">s[<span class="number">0</span>] = <span class="number">2</span></div><div class="line">s[<span class="number">1</span>] = <span class="number">3</span></div><div class="line">s[<span class="number">2</span>] = <span class="number">5</span></div><div class="line">s[<span class="number">3</span>] = <span class="number">7</span></div><div class="line">s[<span class="number">4</span>] = <span class="number">11</span></div><div class="line">s[<span class="number">5</span>] = <span class="number">13</span></div></pre></td></tr></table></figure><p>3.slice 可以包含任意的类型，包括另一个 slice。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">game := [][] <span class="keyword">string</span>&#123;</div><div class="line">  []<span class="keyword">string</span>&#123;<span class="string">""</span>,<span class="string">""</span>,<span class="string">""</span>&#125;,</div><div class="line">  []<span class="keyword">string</span>&#123;<span class="string">""</span>,<span class="string">""</span>,<span class="string">""</span>&#125;,</div><div class="line">  []<span class="keyword">string</span>&#123;<span class="string">""</span>,<span class="string">""</span>,<span class="string">""</span>&#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>4.对slice切片</p><blockquote><p>s[lo:hi] // 包含lo元素，不包含hi元素</p></blockquote><p>5.构造slice,slice由make创建，这会分配一个全是零值的数组并返回一个slice并指向这个数组</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">a := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">5</span>)</div></pre></td></tr></table></figure><p>可以传递第三个参数来执行容量</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">b := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">0</span> , <span class="number">5</span>) <span class="comment">// len(b) = 0, cap(b) = 5</span></div></pre></td></tr></table></figure><p>如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">printlnSlice</span><span class="params">(s <span class="keyword">string</span>, x []<span class="keyword">int</span>)</span></span> &#123;</div><div class="line">  fmt.Printf(<span class="string">"%s len=%d, cap=%d %v\n"</span>, s, <span class="built_in">len</span>(x), <span class="built_in">cap</span>(x), x)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">  a := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">5</span>)</div><div class="line">  printlnSlice(<span class="string">"a"</span>, a) <span class="comment">// a len=5, cap=5 [0 0 0 0 0]</span></div><div class="line">  b := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">0</span>, <span class="number">5</span>)</div><div class="line">  printlnSlice(<span class="string">"b"</span>, b) <span class="comment">// b len=0, cap=5 []</span></div><div class="line">  c := b[:<span class="number">2</span>]</div><div class="line">  printlnSlice(<span class="string">"c"</span>, c) <span class="comment">// c len=2, cap=5 [0 0]</span></div><div class="line">  d := c[<span class="number">2</span>:<span class="number">5</span>]</div><div class="line">  printlnSlice(<span class="string">"d"</span>, d) <span class="comment">//d len=3, cap=3 [0 0 0]</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>6.向slice结尾添加元素，append</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a []<span class="keyword">int</span></div><div class="line"><span class="built_in">append</span>(a, <span class="number">0</span>)</div><div class="line"><span class="built_in">append</span>(a, <span class="number">1</span>)</div><div class="line"><span class="built_in">append</span>(a, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</div></pre></td></tr></table></figure><p>如果slice底层数组的不能分配更多的数组时，会自动分配一个更大的数组，返回的slice指向新的数组。</p><p>7.切片是数组之上的抽象数据类型。</p><p>初始化不同,切片不需要指定固定长度:var a [10]int//数组var a []int//切片</p><p>切片的零值是nil</p><p>更多的<a href="https://blog.go-zh.org/go-slices-usage-and-internals" target="_blank" rel="external">slice切片：用法与本质</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.数组：类型[n]T是有n个值的类型为T的数组&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;var a [10] int&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;变量a是一个有10个整数的数组。&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color:#FF0000;&quot;&gt;数组不
      
    
    </summary>
    
      <category term="golang" scheme="http://www.51yimo.com/categories/golang/"/>
    
    
  </entry>
  
  <entry>
    <title>Go 指南学习笔记四</title>
    <link href="http://www.51yimo.com/2017/09/02/go-e6-8c-87-e5-8d-97-e5-ad-a6-e4-b9-a0-e7-ac-94-e8-ae-b0-e5-9b-9b/"/>
    <id>http://www.51yimo.com/2017/09/02/go-e6-8c-87-e5-8d-97-e5-ad-a6-e4-b9-a0-e7-ac-94-e8-ae-b0-e5-9b-9b/</id>
    <published>2017-09-02T12:57:40.000Z</published>
    <updated>2017-09-19T14:25:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>1.结构体struct</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</div><div class="line">  X <span class="keyword">int</span></div><div class="line">  Y <span class="keyword">int</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">  v := Vertex&#123;<span class="number">1</span>,<span class="number">2</span>&#125;</div><div class="line">  v.X = <span class="number">4</span></div><div class="line">  fmt.Println(v.X) <span class="comment">// 4</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>2.结构体指针</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">v := Vertex&#123;<span class="number">1</span>,<span class="number">2</span>&#125;</div><div class="line">p := &amp;amp;v</div><div class="line">p.X = <span class="number">1e9</span></div><div class="line">fmt.Println(p.X) <span class="comment">//1000000000</span></div></pre></td></tr></table></figure><p>3.结构体语法，可以仅列出部分字段；&amp;可以指向结构体的指针</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> (</div><div class="line">  v1 = Vertex&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</div><div class="line">  v2 = Vertex&#123;X: <span class="number">1</span>&#125;</div><div class="line">  v3 = Vertex&#123;&#125;</div><div class="line">  p = *Vertex&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</div><div class="line">)</div><div class="line">fmt.Println(v1, v2, v3, p)<span class="comment">//&#123;1 2&#125; &#123;1 0&#125; &#123;0 0&#125; *&#123;1 2&#125;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.结构体struct&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div cl
      
    
    </summary>
    
      <category term="golang" scheme="http://www.51yimo.com/categories/golang/"/>
    
    
  </entry>
  
  <entry>
    <title>Go 指南学习笔记三</title>
    <link href="http://www.51yimo.com/2017/09/01/go-e6-8c-87-e5-8d-97-e5-ad-a6-e4-b9-a0-e7-ac-94-e8-ae-b0-e4-b8-89/"/>
    <id>http://www.51yimo.com/2017/09/01/go-e6-8c-87-e5-8d-97-e5-ad-a6-e4-b9-a0-e7-ac-94-e8-ae-b0-e4-b8-89/</id>
    <published>2017-09-01T12:45:41.000Z</published>
    <updated>2017-09-19T14:26:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>1.指针：指针保存了变量的内存地址。</p><ul><li>T是指向类型T的值指针，其零值是nil</li></ul><p>*符号会生成一个其作用对象的指针</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> p *<span class="keyword">int</span></div><div class="line"></div><div class="line">fmt.Println(p)</div><div class="line"></div><div class="line">i := <span class="number">42</span></div><div class="line">p = *i</div><div class="line"></div><div class="line">fmt.Println(p)</div></pre></td></tr></table></figure><p>输出结果为</p><p><img src="/images/pasted-13.png" alt="upload successful"></p><p>*表示指针指向底层的值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fmt.Println(*p)</div></pre></td></tr></table></figure><p>并且可以通过修改指针修改底层的值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">*p = <span class="number">21</span></div></pre></td></tr></table></figure><p>这就是常说的”间接引用”。与C语言不同，go语言的指针没有运算。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.指针：指针保存了变量的内存地址。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;T是指向类型T的值指针，其零值是nil&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;*符号会生成一个其作用对象的指针&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=
      
    
    </summary>
    
      <category term="golang" scheme="http://www.51yimo.com/categories/golang/"/>
    
    
  </entry>
  
  <entry>
    <title>利用Dockerhub+github自定义制作镜像</title>
    <link href="http://www.51yimo.com/2017/08/31/e5-88-a9-e7-94-a8dockerhubgithub-e8-87-aa-e5-ae-9a-e4-b9-89-e5-88-b6-e4-bd-9c-e9-95-9c-e5-83-8f/"/>
    <id>http://www.51yimo.com/2017/08/31/e5-88-a9-e7-94-a8dockerhubgithub-e8-87-aa-e5-ae-9a-e4-b9-89-e5-88-b6-e4-bd-9c-e9-95-9c-e5-83-8f/</id>
    <published>2017-08-31T15:00:13.000Z</published>
    <updated>2017-09-19T13:59:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>Dockerhub可以根据github工程中Dockerfile自动生成镜像，一般情况下，我们需要google下gcr的镜像，因为网络原因连接不上，我们可以将Dockerfile文件提交到github,然后生成我们自己的镜像，如：</p><p><img src="/images/pasted-1.png" alt="upload successful"></p><p>前提是已经注册自己的Dockerhub帐号，登录<a href="https://hub.docker.com" target="_blank" rel="external">https://hub.docker.com</a></p><p>点击右上角Create -&gt; Create Automated Build</p><p><img src="/images/pasted-2.png" alt="upload successful"></p><p>后登录自己的github帐号</p><p><img src="/images/pasted-5.png" alt="upload successful"></p><p>从自己的github工程中选择要创建镜像的工程</p><p><img src="/images/pasted-6.png" alt="upload successful"></p><p>后输入要生成的镜像名称</p><p><img src="/images/pasted-7.png" alt="upload successful"></p><p>在Build Setting的Tab页中输入Dockerfile的位置以及tag</p><p><img src="/images/pasted-8.png" alt="upload successful"></p><p>/目录为相对于github中工程的位置，如github中Dockerfile在/centos下</p><p><img src="/images/pasted-9.png" alt="upload successful"></p><p>则输入/centos，再点击save changes后，点击Trigger后就可以构建镜像了，后续如果github中代码有更改，构建动作会自动触发。点击build details可以查看每次构建日志</p><p><img src="/images/pasted-10.png" alt="upload successful"></p><p><img src="/images/pasted-11.png" alt="upload successful"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Dockerhub可以根据github工程中Dockerfile自动生成镜像，一般情况下，我们需要google下gcr的镜像，因为网络原因连接不上，我们可以将Dockerfile文件提交到github,然后生成我们自己的镜像，如：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/ima
      
    
    </summary>
    
      <category term="golang" scheme="http://www.51yimo.com/categories/golang/"/>
    
    
  </entry>
  
  <entry>
    <title>Go 指南学习笔记二</title>
    <link href="http://www.51yimo.com/2017/08/30/go-e6-8c-87-e5-8d-97-e5-ad-a6-e4-b9-a0-e7-ac-94-e8-ae-b0-e4-ba-8c/"/>
    <id>http://www.51yimo.com/2017/08/30/go-e6-8c-87-e5-8d-97-e5-ad-a6-e4-b9-a0-e7-ac-94-e8-ae-b0-e4-ba-8c/</id>
    <published>2017-08-30T13:18:46.000Z</published>
    <updated>2017-09-19T14:27:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>1.for循环</p><blockquote><p>go语言只有一个循环语句，即for.</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sum := <span class="number">0</span></div><div class="line"><span class="keyword">for</span> i:= <span class="number">0</span>;i&lt;<span class="number">10</span>;i++&#123;</div><div class="line">  sum += i</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>不像java,python等，条件表达式不需要()小括号，循环体需要{}</li><li>初始化条件和后置判断条件不是必须的，如for ; i&lt;10; {}</li><li>在java等语言中while循环在go语言中写法</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i &lt; <span class="number">10</span> &#123;</div><div class="line">  sum += i</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>死循环</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> &#123;</div><div class="line">  sum += i</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>2.if语句</p><ul><li>同for循环一样,if语句的判断条件语句也不需要()</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> i&lt;<span class="number">10</span> &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>同for循环一样，条件之前也可以是一个简单的语句</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">i := <span class="number">10</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> j := <span class="number">10</span>; i&lt;j &#123;</div><div class="line">  <span class="keyword">return</span> j</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  <span class="keyword">return</span> i</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>3.switch语句</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">  <span class="string">"fmt"</span></div><div class="line">  <span class="string">"runtime"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">  fmt.Print(<span class="string">"Go runs on "</span>)</div><div class="line">  <span class="keyword">switch</span> os := runtime.GOOS; os &#123;</div><div class="line">  <span class="keyword">case</span> <span class="string">"darwin"</span>:</div><div class="line">    fmt.Println(<span class="string">"OS X."</span>)</div><div class="line">  <span class="keyword">case</span> <span class="string">"linux"</span>:</div><div class="line">    fmt.Println(<span class="string">"Linux."</span>)</div><div class="line">  <span class="keyword">default</span>:</div><div class="line">    fmt.Printf(<span class="string">"%s."</span>, os)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>按照条件从上到下执行，直到匹配到成功为止，执行成功后，后边的条件不再执行</li><li>没有条件的switch，如switch {},同switch true {}一样</li></ul><p>4.defer语句</p><ul><li><p>defer 语句会延迟函数的执行直到上层函数返回。</p><p>延迟调用的参数会立刻生成，但是在上层函数返回前函数都不会被调用</p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">  <span class="keyword">defer</span> fmt.Println(<span class="string">"world&amp;quot;)</span></div><div class="line"><span class="string">  fmt.Print("</span>hello<span class="string">")</span></div><div class="line"><span class="string">&#125;</span></div></pre></td></tr></table></figure><ul><li>defer栈，延迟的函数调用会被压入一个栈中。</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">  fmt.Println(<span class="string">"counting"</span>)</div><div class="line">  <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</div><div class="line">    <span class="keyword">defer</span> fmt.Println(i)</div><div class="line">  &#125;</div><div class="line">  fmt.Println(<span class="string">"done"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">[Running] <span class="keyword">go</span> run <span class="string">"/Users/badwolf/Documents/go/hello/defer.go"</span></div><div class="line">counting</div><div class="line">done</div><div class="line"><span class="number">9</span></div><div class="line"><span class="number">8</span></div><div class="line"><span class="number">7</span></div><div class="line"><span class="number">6</span></div><div class="line"><span class="number">5</span></div><div class="line"><span class="number">4</span></div><div class="line"><span class="number">3</span></div><div class="line"><span class="number">2</span></div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">0</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.for循环&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;go语言只有一个循环语句，即for.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div cla
      
    
    </summary>
    
      <category term="golang" scheme="http://www.51yimo.com/categories/golang/"/>
    
    
  </entry>
  
  <entry>
    <title>ssh免密码登陆</title>
    <link href="http://www.51yimo.com/2017/08/30/ssh-e5-85-8d-e5-af-86-e7-a0-81-e7-99-bb-e9-99-86/"/>
    <id>http://www.51yimo.com/2017/08/30/ssh-e5-85-8d-e5-af-86-e7-a0-81-e7-99-bb-e9-99-86/</id>
    <published>2017-08-30T01:56:25.000Z</published>
    <updated>2017-09-19T14:09:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>有三台机器172.21.3.124/125/126，需要在这三台机器配置免密码登陆能够互相访问</p><p>1.在一台机器上执行命令，如172.21.3.124，期间会输入三次回车</p><blockquote><p>ssh-keygen -t rsa</p></blockquote><p><img src="/images/pasted-14.png" alt="upload successful"></p><p>2.命令会在当前用户的家目录的.ssh的目录下生成id_rsa和id_rsa.pub文件，将id_rsa.pub文件copy到其他主机(172.21.3.125)的.ssh/authorized_keys目录下</p><p><img src="/images/pasted-15.png" alt="upload successful"></p><p>因为我的是root用户，所以copy到/root/.ssh目录下。</p><p>3.这样再登陆172.21.3.125就可以不用输入密码了。需要注意的是</p><p><strong>authorized_keys的权限需要是600</strong>。(chmod 600 .ssh/authorized_keys)</p><p>将id_rsa.pub文件Copy到172.21.3.126上就可以免密码登陆到172.21.3.126了。</p><p>将以上的命令和步骤重复在172.21.3.125/126分别执行，</p><p>注意已经存在authorized_keys文件不能覆盖，需要在文件内容后追加其他主机的id_rsa.pub的内容。</p><p>这样就可以三台机器 间互相免密码访问了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;有三台机器172.21.3.124/125/126，需要在这三台机器配置免密码登陆能够互相访问&lt;/p&gt;
&lt;p&gt;1.在一台机器上执行命令，如172.21.3.124，期间会输入三次回车&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ssh-keygen -t rsa&lt;/p&gt;
&lt;/b
      
    
    </summary>
    
      <category term="linux" scheme="http://www.51yimo.com/categories/linux/"/>
    
    
  </entry>
  
</feed>
